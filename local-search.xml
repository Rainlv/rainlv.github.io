<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RIRS云平台用户手册</title>
    <link href="/2023/08/21/RIRS%E4%BA%91%E5%B9%B3%E5%8F%B0%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/"/>
    <url>/2023/08/21/RIRS%E4%BA%91%E5%B9%B3%E5%8F%B0%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><p>版本：v1.1</p><p>日期：2023/8/21</p><p>维护：xuanh.w@outlook.com</p></blockquote><h2 id="使用说明">使用说明</h2><h3 id="登录注册">登录注册</h3><p>暂<strong>未开放</strong>用户注册功能，如需使用请联系管理员<a href="mailto:xuanh.w@outlook.com">@xuanh.w</a>授权。</p><p><img src="http://qiniu.rainna.xyz/image-20230821200833310.png" alt="image-20230821200831446"></p><h3 id="用户界面">用户界面</h3><p><img src="http://qiniu.rainna.xyz/image-20230821200918422.png" alt="image-20230821200918422"></p><p>用户界面包含<code>总览、任务中心、样本仓库、模型库、容器管理、用户资源</code>六大模块。</p><ul class="lvl-0"><li class="lvl-2"><p>总览：大致暂时用户目前的资源和任务等，截至目前，实现为假数据，仅供观看</p></li><li class="lvl-2"><p>任务中心：创建任务，管理任务，查看任务日志等</p></li><li class="lvl-2"><p>样本仓库：查看样本、上传样本</p></li><li class="lvl-2"><p>模型库：查看模型、管理模型</p></li><li class="lvl-2"><p>容器管理：容器与镜像管理，代码在线编辑与运行</p></li><li class="lvl-2"><p>用户资源：开发中…</p></li></ul><h3 id="容器管理">容器管理</h3><blockquote><p>是最常用也是最核心的模块，代码在线编辑和运行，创建和发布模型等</p></blockquote><p><img src="http://qiniu.rainna.xyz/image-20230821201925231.png" alt="image-20230821201925231"></p><p>在使用前需要先了解镜像和容器的概念。</p><p>镜像定义来自Docker容器化技术中的镜像概念，可以理解为<strong>虚拟机的模板、快照</strong>等，可以根据镜像快速创建出一个容器(虚拟机)。容器，即是由镜像创建出的虚拟机，可以通过Editor访问操作容器。</p><p>镜像由名称和版本标识，一个名称下可以有多个版本。为了便于用户访问与使用镜像，引出<code>Editor</code>的概念。</p><p>Editor是用户操作和访问容器(虚拟机)的窗口，目前支持<code>code-server</code>和<code>web-top</code>两种交互方式。<code>code-server</code>可以理解为web版的vscode，提供与桌面版vscode相同的开发体验。<code>web-top</code>即是web桌面，目前仅支持xfce桌面，包含<code>web-top</code>Editor的镜像创建出的容器具有桌面环境，否则为命令行环境(无法运行依赖桌面的程序)。</p><h4 id="新建容器">新建容器</h4><blockquote><p>创建一个可交互的虚拟机</p></blockquote><p>根据需求选择镜像创建一个虚拟机，预定义了一部分镜像。如<code>pytorch</code>镜像有多个版本，<code>1.13_11.6_8</code>版本代表pytorch版本为1.13，cuda为11.6，cudnn为8.x版本。</p><p><img src="http://qiniu.rainna.xyz/image-20230821202930566.png" alt="image-20230821202930566"></p><p>我们以<code>pytorch:1.13_11.6_8</code>为例创建一个容器。</p><ol><li class="lvl-3"><p>单击右侧的新建容器，可以根据需要选择所需的资源，CPU核心数目前支持1-8核，内存支持1-16G，显卡支持0-5。分配的最终资源大小根据资源池中所剩资源可能会动态调整，实际资源浮动率在0.5-2倍，即在创建时指定8核，最多可能可以使用16核的资源，最低为4核的资源；内存同理。显卡资源为独占，不会动态调整。申请显卡资源数量大于1时，需要向管理员申请。用户可调配的默认资源数为1张显卡1个容器，即当创建第二个容器时，也需要管理员审核。</p></li></ol><p><img src="http://qiniu.rainna.xyz/image-20230821203301275.png" alt="image-20230821203301275"></p><ol start="2"><li class="lvl-3"><p>容器信息。创建完成后，可以在<code>容器列表</code>中看到容器的相关信息，当状态切换到运行中时代表容器创建完成，使用默认镜像创建通常1min内可以创建完成，需要用户点击<code>容器列表</code>旁的刷新符号手动刷新查看最新状态。</p></li></ol><p><img src="http://qiniu.rainna.xyz/image-20230821203740250.png" alt="image-20230821203740250"></p><ol start="3"><li class="lvl-3"><p>访问Editor。当容器状态为<strong>运行中</strong>时可以点击<code>Editor</code>访问vscode，或<code>Web-VNC</code>访问桌面。</p></li></ol><p><img src="http://qiniu.rainna.xyz/image-20230821204057320.png" alt="image-20230821204057320"></p><p><img src="http://qiniu.rainna.xyz/image-20230821204146310.png" alt="image-20230821204146310"></p><p>3.1 <strong>web-top访问</strong>。单击<code>Web VNC</code></p><p><img src="http://qiniu.rainna.xyz/image-20230821204254275.png" alt="image-20230821204254275"></p><p><img src="http://qiniu.rainna.xyz/image-20230821204437424.png" alt="image-20230821204437424"></p><p><u><strong>直接点击连接无法连接到桌面，需要点击右侧齿轮图标设置URL</strong></u></p><p><img src="http://qiniu.rainna.xyz/image-20230821204615028.png" alt="image-20230821204615028"></p><p>此处的值设置需要参考当前页面URL值，如下图红框部分。最终值为：<code>红框部分值+/websockify</code>，以下图为例，值为：<code>web-top/e37b1e82-6eb6-4ba6-874f-04909b5498fd/websockify</code></p><p><img src="http://qiniu.rainna.xyz/image-20230821205040353.png" alt="image-20230821205040353"></p><p>修改完毕后，点击连接，若提示无法连接服务器，请检查输入路径是否有误！</p><p>正常情况如下图所示：</p><p><img src="http://qiniu.rainna.xyz/image-20230821205144040.png" alt="image-20230821205144040"></p><p>输入密码为：<code>WHU@123</code>，回车或单击<code>Send Credentials</code>按钮，即可进入桌面。默认未安装显卡驱动和cuda，请自行安装。</p><p><img src="http://qiniu.rainna.xyz/image-20230821205259365.png" alt="image-20230821205259365"></p><p>3.2 <strong>code-server访问。</strong></p><p>单击Editor即可访问code-server页面，但是受限于校园网内网环境，无https签名证书，部分功能(如图片和pdf浏览)可能受限，可自行<a href="http://qiniu.rainna.xyz/rootCA.crt">下载</a>自签名证书安装后使用，windows系统双击安装，其余操作系统请参考网络。</p><p>3.3 <strong>特殊目录介绍</strong></p><p><code>/data</code>下有<code>private</code>、<code>public</code>、<code>share</code>、<code>user</code>目录</p><ul class="lvl-0"><li class="lvl-2"><p>private：读写。私有空间，仅当前登录用户可见</p></li><li class="lvl-2"><p>public：只读。公共空间，存储管理员发布的资源，通常为样本</p></li><li class="lvl-2"><p>share：只读。用户共享空间，存储用户自发共享的文件（未实现）。</p></li><li class="lvl-2"><p>user：读写。私有空间，是private下的子集，为便利用户操作而独立出来。</p></li></ul><p>各个目录下的二级目录代表数据源，目前有<code>default</code>、<code>nfs_ds1</code>、<code>nfs_ds2</code>数据源</p><ul class="lvl-0"><li class="lvl-2"><p>default：总大小20T。默认数据源，/data/user其实就是private空间下的默认数据源的链接。</p></li><li class="lvl-2"><p>nfs_ds1：总大小100T</p></li><li class="lvl-2"><p>nfs_ds2：总大小100T</p></li></ul><p><strong>！！注意：请使用<code>/data/user</code>目录存储需要持久化的数据，如代码等，该目录下的数据在重建容器后仍然存在，否则数据与容器绑定，删除容器后丢失！！</strong></p><h3 id="其他">其他</h3><p>…</p>]]></content>
    
    
    <categories>
      
      <category>文档</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ESXI平台Ubuntu显卡直通</title>
    <link href="/2023/04/30/ESXI%E5%B9%B3%E5%8F%B0Ubuntu%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A/"/>
    <url>/2023/04/30/ESXI%E5%B9%B3%E5%8F%B0Ubuntu%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A/</url>
    
    <content type="html"><![CDATA[<h3 id="问题1">问题1</h3><p>实验室新装了几台服务器，加入vSphere集群，配置显卡直通后，创建的windows虚拟机可以正常安装Nvidia驱动，<code>nvidia-smi</code>命令可以显示显卡信息，但是创建的ubuntu虚拟机<code>nvidia-smi</code>一直无法显示显卡信息，返回<code>no devices were found</code>。</p><p><code>sudo lspci |grep -i VGA</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">03</span>:<span class="hljs-number">00</span>.<span class="hljs-number">0</span> VGA compatible controller: NVIDIA Corporation Device xxxxx<br></code></pre></td></tr></table></figure><p><code>dmesg</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[ 1606.332778]</span> <span class="hljs-selector-tag">NVRM</span>: <span class="hljs-selector-tag">GPU</span> <span class="hljs-number">0000</span>:<span class="hljs-number">03</span>:<span class="hljs-number">00.0</span>: <span class="hljs-selector-tag">RmInitAdapter</span> <span class="hljs-selector-tag">failed</span>! (<span class="hljs-number">0</span><span class="hljs-attribute">x26</span>:<span class="hljs-number">0</span><span class="hljs-attribute">x56</span>:<span class="hljs-number">1463</span>)<br><span class="hljs-selector-attr">[ 1606.332912]</span> <span class="hljs-selector-tag">NVRM</span>: <span class="hljs-selector-tag">GPU</span> <span class="hljs-number">0000</span>:<span class="hljs-number">03</span>:<span class="hljs-number">00.0</span>: <span class="hljs-selector-tag">rm_init_adapter</span> <span class="hljs-selector-tag">failed</span>, <span class="hljs-selector-tag">device</span> <span class="hljs-selector-tag">minor</span> <span class="hljs-selector-tag">number</span> <span class="hljs-number">0</span><br><span class="hljs-selector-attr">[ 1607.004207]</span> <span class="hljs-selector-tag">NVRM</span>: <span class="hljs-selector-tag">GPU</span> <span class="hljs-number">0000</span>:<span class="hljs-number">03</span>:<span class="hljs-number">00.0</span>: <span class="hljs-selector-tag">RmInitAdapter</span> <span class="hljs-selector-tag">failed</span>! (<span class="hljs-number">0</span><span class="hljs-attribute">x26</span>:<span class="hljs-number">0</span><span class="hljs-attribute">x56</span>:<span class="hljs-number">1463</span>)<br><span class="hljs-selector-attr">[ 1607.004349]</span> <span class="hljs-selector-tag">NVRM</span>: <span class="hljs-selector-tag">GPU</span> <span class="hljs-number">0000</span>:<span class="hljs-number">03</span>:<span class="hljs-number">00.0</span>: <span class="hljs-selector-tag">rm_init_adapter</span> <span class="hljs-selector-tag">failed</span>, <span class="hljs-selector-tag">device</span> <span class="hljs-selector-tag">minor</span> <span class="hljs-selector-tag">number</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="环境">环境</h3><ul class="lvl-0"><li class="lvl-2"><p>平台 ESXI 6.7 Update3</p></li><li class="lvl-2"><p>虚拟机系统 Ubuntu18.04（16.x也试过同样问题）</p></li><li class="lvl-2"><p>显卡：3090 * 8</p></li></ul><h3 id="解决方案">解决方案</h3><p>NVDIA论坛有类似问题，中文社区貌似没有搬运过类似的方法，大多是设置高级参数，打补丁之类的方法。<a href="https://forums.developer.nvidia.com/t/nvidia-smi-no-devices-were-found-vmware-esxi-ubuntu-server-20-04-03-with-rtx3070/202904/25">传送门</a></p><ol><li class="lvl-3"><p>禁用nouveau</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> /etc/modprobe.d/blacklist-nvidia-nouveau.conf<br><br><span class="hljs-built_in">cat</span> /etc/modprobe.d/blacklist-nvidia-nouveau.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">blacklist nouveau</span><br><span class="hljs-string">options nouveau modeset=0</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>NVDIA内核参数</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> /etc/modprobe.d/nvidia.conf<br><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/modprobe.d/nvidia.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">options nvidia NVreg_OpenRmEnableUnsupportedGpus=1</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>应用更改</p></li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo update-initramfs -u</span><br></code></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>重启</p></li><li class="lvl-3"><p>下载驱动（官网）</p></li><li class="lvl-3"><p>安装驱动</p></li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo .\nvidia-derive-filename.<span class="hljs-built_in">run</span> <span class="hljs-attribute">-m</span>=kernel-open<br></code></pre></td></tr></table></figure><ol start="7"><li class="lvl-3"><p>重启</p></li></ol><h2 id="问题2">问题2</h2><p>vsphere中的虚拟机配置直通GPU后，启动时出现模块“DevicePowerOn”打开电源失败。</p><h3 id="环境-2">环境</h3><ul class="lvl-0"><li class="lvl-2"><p>平台 ESXI 6.7</p></li><li class="lvl-2"><p>显卡 Tesla K80</p></li></ul><h3 id="解决方案-2">解决方案</h3><p>设置高级参数</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">pciPassthru.use64bitMMIO</span>=<span class="hljs-literal">TRUE</span><br><span class="hljs-attr">pciPassthru.64bitMMIOSizeGB</span>=<span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><p>具体操作如下：</p><p><img src="https://img-blog.csdnimg.cn/8a287079595f4eb1befca3dec47e2d6b.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/9cf4da550288431d8ac1caaf69642c93.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nvidia</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【markdown】markdown基本语法</title>
    <link href="/2022/10/08/2022-10-08-markdown/"/>
    <url>/2022/10/08/2022-10-08-markdown/</url>
    
    <content type="html"><![CDATA[<h2 id="表格">表格</h2><p>要添加表，请使用三个或多个连字符（—）创建每列的标题，并使用管道（|）分隔每列。您可以选择在表的任一端添加管道。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| Syntax      | Description |<br>| ----------- | ----------- |<br>| Header      | Title       |<br>| Paragraph   | Text        |<br></code></pre></td></tr></table></figure><p><strong>对齐</strong></p><p>您可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心。</p><table><thead><tr><th style="text-align:left">Syntax</th><th style="text-align:center">Description</th><th style="text-align:right">Test Text</th></tr></thead><tbody><tr><td style="text-align:left">Header</td><td style="text-align:center">Title</td><td style="text-align:right">Here’s this</td></tr><tr><td style="text-align:left">Paragraph</td><td style="text-align:center">Text</td><td style="text-align:right">And more</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| Syntax      | Description | Test Text     |<br>| :---        |    :----:   |          ---: |<br>| Header      | Title       | Here&#x27;s this   |<br>| Paragraph   | Text        | And more      |<br></code></pre></td></tr></table></figure><h2 id="超链接">超链接</h2><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。</p><p>超链接Markdown语法代码：<br><code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code></p><p>这是一个链接 <a href="https://markdown.com.cn">Markdown语法</a>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是一个链接 [<span class="hljs-string">Markdown语法</span>](<span class="hljs-link">https://markdown.com.cn</span>)。<br></code></pre></td></tr></table></figure><h4 id="添加title">添加title</h4><blockquote><p>链接title是当鼠标悬停在链接上时会出现的文字</p></blockquote><p>这是一个链接 <a href="https://markdown.com.cn" title="Markdown 语法教程">Markdown语法</a>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是一个链接 [<span class="hljs-string">Markdown语法</span>](<span class="hljs-link">https://markdown.com.cn &quot;Markdown 语法教程&quot;</span>)。<br></code></pre></td></tr></table></figure><h4 id="网址和Email地址">网址和Email地址</h4><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接。<br></p><p><a href="https://markdown.com.cn">https://markdown.com.cn</a> <br><br><a href="mailto:fake@example.com">fake@example.com</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml">&lt;https://markdown.com.cn&gt;</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml">&lt;fake@example.com&gt;</span><br></code></pre></td></tr></table></figure><h4 id="带格式化的链接">带格式化的链接</h4><p>强调 链接, 在链接语法前后增加星号。 要将链接表示为代码，请在方括号中添加反引号。</p><p>I love supporting the <strong><a href="https://eff.org">EFF</a></strong>. <br><br>This is the <em><a href="https://www.markdownguide.org">Markdown Guide</a></em>. <br><br>See the section on <a href="https://markdown.com.cn/basic-syntax/links.html"><code>code</code></a>.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">I love supporting the <span class="hljs-strong">**[<span class="hljs-string">EFF</span>](<span class="hljs-link">https://eff.org</span>)**</span>. <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br>This is the <span class="hljs-emphasis">*[<span class="hljs-string">Markdown Guide</span>](<span class="hljs-link">https://www.markdownguide.org</span>)*</span>. <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br>See the section on [<span class="hljs-string">`code`</span>](<span class="hljs-link">#code</span>).<br></code></pre></td></tr></table></figure><h4 id="引用类型链接">引用类型链接</h4><p>引用样式链接是一种特殊的链接，它使URL在Markdown中更易于显示和阅读。参考样式链接分为两部分：与文本保持内联的部分以及存储在文件中其他位置的部分，以使文本易于阅读。<br><br></p><p><a href="https://en.wikipedia.org/wiki/Hobbit#Lifestyle">hobbit-hole</a> <br><br>[hobbit-hole] <a href="https://en.wikipedia.org/wiki/Hobbit#Lifestyle" title="Hobbit lifestyles">2</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">hobbit-hole</span>][<span class="hljs-symbol">1</span>] <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br>[hobbit-hole] [2]<br><br>[<span class="hljs-symbol">1</span>]: <span class="hljs-link">https://en.wikipedia.org/wiki/Hobbit#Lifestyle</span><br>[<span class="hljs-symbol">2</span>]: <span class="hljs-link">https://en.wikipedia.org/wiki/Hobbit#Lifestyle &#x27;Hobbit lifestyles&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="代码">代码</h2><p>要将单词或短语表示为代码，请将其包裹在反引号 (`) 中。</p><p>At the command prompt, type <code>nano</code>.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">At the command prompt, type <span class="hljs-code">`nano`</span>.<br></code></pre></td></tr></table></figure><h4 id="转义反引号">转义反引号</h4><p>如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(``)中.</p><p><code>Use `code` in your Markdown file.</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">``Use `</span>code<span class="hljs-code">` in your Markdown file.`</span>`<br></code></pre></td></tr></table></figure><h4 id="代码块">代码块</h4><p>要创建代码块，请将代码块的每一行缩进至少四个空格或一个制表符。</p><pre><code class="hljs">&lt;html&gt;  &lt;head&gt;  &lt;/head&gt;&lt;/html&gt;</code></pre><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="围栏式代码块">围栏式代码块</h4><p>在代码块之前和之后的行上使用三个反引号（(```）或三个波浪号（~~~）,要添加语法突出显示，请在受防护的代码块之前的反引号旁边指定一种语言.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;John&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Smith&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="定义列表">定义列表</h2><p>要创建定义列表，请在第一行上键入术语。在下一行，键入一个冒号，后跟一个空格和定义。</p><dl><dt>First Term</dt><dd>This is the definition of the first term.</dd><dt>Second Term</dt><dd>This is one definition of the second term.</dd><dd>This is another definition of the second term.</dd></dl><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">First Term<br>: This is the definition of the first term.<br><br>Second Term<br>: This is one definition of the second term.<br>: This is another definition of the second term.<br></code></pre></td></tr></table></figure><h2 id="分割线">分割线</h2><blockquote><p>要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容</p><p>为了兼容性，请在分隔线的前后均添加空白行。</p></blockquote><p>Try to put a blank line before…</p><hr><hr><hr><p>…and after a horizontal rule.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Try to put a blank line before...<br><br>---<br><br><span class="hljs-strong">***</span><br><span class="hljs-strong"></span><br><span class="hljs-strong">___</span><br><span class="hljs-strong"></span><br><span class="hljs-strong">...and after a horizontal rule.</span><br></code></pre></td></tr></table></figure><h2 id="脚注">脚注</h2><blockquote><p>要创建脚注参考，请在方括号（&lt;sup id=“fnref:1” class=“footnote-ref”&gt;<a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="This is the first footnote."><a href="https://en.wikipedia.org/wiki/Hobbit#Lifestyle">1</a></span></a></sup>）内添加插入符号和标识符。标识符可以是数字或单词，但不能包含空格或制表符。标识符仅将脚注参考与脚注本身相关联-在输出中，脚注按顺序编号。</p><p>在括号内使用另一个插入符号和数字添加脚注，并用冒号和文本（\</p></blockquote><p>Here’s a simple footnote,<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="This is the first footnote."><a href="https://en.wikipedia.org/wiki/Hobbit#Lifestyle">1</a></span></a></sup> and here’s a longer one.<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><h2 id="列表">列表</h2><blockquote><p>要创建<em><strong>有序列表</strong></em>，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</p></blockquote><ol><li class="lvl-3"><p>First item</p></li><li class="lvl-3"><p>Second item</p></li><li class="lvl-3"><p>Third item</p></li><li class="lvl-3"><p>Fourth item</p></li><li class="lvl-3"><p>First item</p></li><li class="lvl-3"><p>Second item</p></li><li class="lvl-3"><p>Third item</p></li><li class="lvl-3"><p>Fourth item</p></li></ol><blockquote><p>要创建<em><strong>无序列表</strong></em>，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>First item</p></li><li class="lvl-2"><p>Second item</p></li><li class="lvl-2"><p>Third item</p></li><li class="lvl-2"><p>Fourth item</p></li></ul><blockquote><p><em><strong>在列表中嵌套其他元素</strong></em>,要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符</p></blockquote><h5 id="段落">段落</h5><ul class="lvl-0"><li class="lvl-2"><p>This is the first list item.</p></li><li class="lvl-2"><p>Here’s the second list item.</p><p>I need to add another paragraph below the second list item.</p></li><li class="lvl-2"><p>And here’s the third list item.</p></li></ul><h5 id="引用">引用</h5><ul class="lvl-0"><li class="lvl-2"><p>This is the first list item.</p></li><li class="lvl-2"><p>Here’s the second list item.</p><blockquote><p>A blockquote would look great below the second list item.</p></blockquote></li><li class="lvl-2"><p>And here’s the third list item.</p></li></ul><h5 id="代码块-2">代码块</h5><blockquote><p>代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符。</p></blockquote><ol><li class="lvl-3"><p>Open the file.</p></li><li class="lvl-3"><p>Find the following code block on line 21:</p><pre><code class="hljs">&lt;html&gt;  &lt;head&gt;    &lt;title&gt;Test&lt;/title&gt;  &lt;/head&gt;</code></pre></li><li class="lvl-3"><p>Update the title to match the name of your website.<section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>My footnote.）。您不必在文档末尾添加脚注。您可以将它们放在除列表，块引号和表之类的其他元素之外的任何位置。<br><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:1" class="footnote-text"><span>This is the first footnote.<br><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section></p></li></ol><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Here’s one with multiple paragraphs and code.</p><p>Indent paragraphs to include them in the footnote.</p><p><code>&#123; my code &#125;</code></p><p>Add as many paragraphs as you like. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask基础</title>
    <link href="/2022/10/08/2022-10-08-Flask/"/>
    <url>/2022/10/08/2022-10-08-Flask/</url>
    
    <content type="html"><![CDATA[## 简介### 项目目录![image-20210207111647955](http://qiniu.rainna.xyz/image-20210207111647955.png)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">static 静态文件存放路径<br>template 模板文件存放路径<br>app.py  可改名,编写网页逻辑<br></code></pre></td></tr></table></figure>### HelloWorld<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br>app = Flask(__name__)  <span class="hljs-comment"># 创建一个网页app</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)  </span><span class="hljs-comment"># 网页路由</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<span class="hljs-comment"># 响应函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<span class="hljs-comment"># 运行</span><br></code></pre></td></tr></table></figure>## 配置<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br><span class="hljs-comment"># 配置文件路径</span><br>app = Flask(<span class="hljs-string">&quot;myApp&quot;</span>, static_folder=<span class="hljs-string">&quot;static&quot;</span>, template_folder=<span class="hljs-string">&quot;templates&quot;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/config&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 运行配置，启动debug模式</span><br>    app.run(debug=<span class="hljs-literal">True</span>, port=<span class="hljs-number">8080</span>, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br></code></pre></td></tr></table></figure>- 或在终端运行时配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; <span class="hljs-built_in">set</span> FLASK_ENV=development<br>&gt; flask run<br></code></pre></td></tr></table></figure>- pycharm的flask模板运行flask项目会有很多问题，用纯python模板！！### Flask类<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">root_path<span class="hljs-comment"># 主模块所在的目录的绝对路径</span><br>static_folder<span class="hljs-comment"># 静态资源路径，默认是当前app下的root_path/static</span><br>static_url_path<span class="hljs-comment"># 访问静态资源的路径,默认为static_folder的属性值</span><br>template_folder<span class="hljs-comment"># 模板文件的文件名</span><br></code></pre></td></tr></table></figure>- `import_name`: 应用程序的另一种实例路径。默认情况下，包或模块旁边的文件夹 instance 被假定为实例路径。- `root_path`: 默认情况下,flask将自动计算引用程序根的绝对路径, 由import_name 决定.- **instance_path** 和 **instance_relative_config** 共同作用,可以改变由import_name 实例路径, 掩藏敏感配置[1](https://blog.csdn.net/f704084109/article/details/80646937#fn:3)- `static_folder `指定了静态资源的路径. 默认情况下,底层实际上是通过static_folder 确定了 static_url_path,  然后通过 self.static_url_path + /\<path:filename>注册的静态资源路由.- 当static_url_path 和 static_folder 同时存在时, 系统会直接使用 self.static_url_path + /\<path:filename>注册的静态资源路由.- static_host 和 host_matching 同时作用可以改变静态资资源存放的主机, 既可以从资源服务器读取资源.- static_url_path / static_folder / static_host / host_matching 四者结合使用可以访问资源服务器上的指定文件夹下的资源- template_folder 设置模板文件名称- subdomain_matching 支持子域名, 结合app.config[“SERVER_NAME”] = “域名:端口” 使用.## Request### 获取请求数据#### GET请求> request.args<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 请求http://127.0.0.1:8080/?user=1&amp;pwd=1</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-comment"># 获取参数</span><br>    args = request.args<br>    <span class="hljs-built_in">print</span>(args)  <span class="hljs-comment"># ImmutableMultiDict([(&#x27;user&#x27;, &#x27;1&#x27;)])</span><br>    <span class="hljs-comment"># 是个紫癜，可以用get等方法取值</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span><br></code></pre></td></tr></table></figure>> request.args.getlist<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># http://127.0.0.1:8080/?user=1&amp;pwd=1&amp;user=2</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-comment"># 获取对应key的多个值,type参数是回调函数</span><br>    args_list = request.args.getlist(<span class="hljs-string">&#x27;user&#x27;</span>)<br>    args_list_type = request.args.getlist(<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">int</span>(x)+<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(args_list_type)  <span class="hljs-comment"># [2, 3]</span><br>    <span class="hljs-built_in">print</span>(args_list)  <span class="hljs-comment"># [&#x27;1&#x27;, &#x27;2&#x27;]</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span><br></code></pre></td></tr></table></figure>#### POST请求> request.form<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># http://127.0.0.1:8080/post/</span><br><span class="hljs-comment"># form-data: username=2;password=1;username=3</span><br><br><span class="hljs-comment"># 处理POST请求,列表内可以添加多个值，以处理多请求类型</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/post/&#x27;</span>, methods=[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-comment"># 获取POST的表单数据</span><br>    data = request.form  <br>    <span class="hljs-built_in">print</span>(data)  <span class="hljs-comment"># ImmutableMultiDict([(&#x27;password&#x27;, &#x27;1&#x27;), (&#x27;username&#x27;, &#x27;2&#x27;), (&#x27;username&#x27;, &#x27;3&#x27;)])</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span><br></code></pre></td></tr></table></figure>> request.form.getlist<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># http://127.0.0.1:8080/post/</span><br><span class="hljs-comment"># form-data: username=2;password=1;username=3</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/post/&#x27;</span>, methods=[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    data = request.form  <span class="hljs-comment"># 获取POST的表单数据</span><br>    data_list = request.form.getlist(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-keyword">lambda</span> x: x + <span class="hljs-string">&quot;~&quot;</span>)<br>    <span class="hljs-built_in">print</span>(data_list)  <span class="hljs-comment"># [&#x27;2~&#x27;, &#x27;3~&#x27;]</span><br>    <span class="hljs-built_in">print</span>(data)  <span class="hljs-comment"># ImmutableMultiDict([(&#x27;password&#x27;, &#x27;1&#x27;), (&#x27;username&#x27;, &#x27;2&#x27;), (&#x27;username&#x27;, &#x27;3&#x27;)])</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span><br></code></pre></td></tr></table></figure>> request.json<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/json/&#x27;</span>, methods=[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">json_post</span>():<br>    <span class="hljs-comment"># 获取POST的JSON数据,并自动处理为python类型数据</span><br>    data = request.json<br>    <span class="hljs-built_in">print</span>(data)  <span class="hljs-comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: [&#x27;c&#x27;, 1]&#125;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(data))  <span class="hljs-comment"># &lt;class &#x27;dict&#x27;&gt;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span><br></code></pre></td></tr></table></figure>> request.file<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 请求参数(上传文件) image:A1PRO001-2020-1356.bmp</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/file&#x27;</span>, methods=[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">file_post</span>():<br>    file = request.files<br>    <span class="hljs-built_in">print</span>(file)  <span class="hljs-comment"># ImmutableMultiDict([(&#x27;image&#x27;, &lt;FileStorage: &#x27;A1PRO001-2020-1356.bmp&#x27; (&#x27;image/bmp&#x27;)&gt;)])</span><br>    img = file.get(<span class="hljs-string">&quot;image&quot;</span>)<br>    <span class="hljs-comment"># save使用相对路径总是报错，不知道为啥</span><br>    img.save(<span class="hljs-string">r&quot;D:\Code\LearnCodes\Python\web_Flask\flasker\static\uploads\img.png&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span><br></code></pre></td></tr></table></figure>### 获取请求路径> request.path>> request.full_path>> request.script_root>> request.url>> request.base_url>> request.url_root<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 请求http://127.0.0.1:8080/?user=1&amp;pwd=1</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-comment"># 获取请求路径</span><br>    path = request.path<br>    full_path = request.full_path<br>    <span class="hljs-built_in">print</span>(path)  <span class="hljs-comment"># /    </span><br>    <span class="hljs-built_in">print</span>(full_path)  <span class="hljs-comment">#  /?user=1&amp;pwd=1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span><br></code></pre></td></tr></table></figure>***区别***:假设您的应用程序正在以下应用程序根目录上侦听：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.example.com/myapplication<br></code></pre></td></tr></table></figure>用户请求以下URI：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/myapplication/</span>%CF%<span class="hljs-number">80</span>/page.html?x=y<br></code></pre></td></tr></table></figure>在这种情况下，上述属性的值如下：| path        | `u'/π/page.html'`                                         || :---------- | --------------------------------------------------------- || full_path   | `u'/π/page.html?x=y'`                                     || script_root | `u'/myapplication'`                                       || base_url    | `u'http://www.example.com/myapplication/π/page.html'`     || url         | `u'http://www.example.com/myapplication/π/page.html?x=y'` || url_root    | `u'http://www.example.com/myapplication/'`                |## Response### Redirect> 重定向，跳转到指定地址<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello world&#x27;</span><br><br><span class="hljs-comment"># 跳转到test2</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/test1&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;this is test1&#x27;</span>)<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;test2&#x27;</span>))<br><br><span class="hljs-comment"># 跳转到baidu</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/test2&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test2</span>():<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;https:www.baidu.com&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/redirected&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">redirected</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;重定向&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;重定向啦！！&#x27;</span><br></code></pre></td></tr></table></figure>### Jinja2模板引擎> render_template 渲染模板<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-comment">&lt;!--index.html--&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> page_title %&#125;</span><span class="language-xml"></span><br><span class="language-xml">            </span><span class="hljs-template-variable">&#123;&#123; page_title &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> body %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-comment">&lt;!--block.html--&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--继承了index.html的页面，标签block内的内容在自己的block内定义--&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">extends</span></span> &quot;index.html&quot; %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> body %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> key <span class="hljs-keyword">in</span> user_info %&#125;</span><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; key &#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123; user_info[key] &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user</span>():<br>    user_info = &#123;<br>        <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;letian&#x27;</span>,<br>        <span class="hljs-string">&#x27;email&#x27;</span>: <span class="hljs-string">&#x27;123@aa.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;github&#x27;</span>: <span class="hljs-string">&#x27;https://github.com/letiantian&#x27;</span><br>    &#125;<br>    <span class="hljs-comment"># 参数：渲染的模板文件，模板文件中的待渲染变量</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;block.html&#x27;</span>, page_title=<span class="hljs-string">&#x27;i\&#x27;s info&#x27;</span>, user_info=user_info)<br></code></pre></td></tr></table></figure>### 自定义错误页面> 处理HTTP错误，可以使用`flask.abort`函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello world&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user</span>():<br>    <span class="hljs-comment"># 默认页面</span><br>    abort(<span class="hljs-number">401</span>)  <span class="hljs-comment"># 401 Unauthorized 未授权</span><br>    <span class="hljs-comment"># 阻塞式，不会运行下面的函数，控制台不会打印这句话</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Unauthorized, 请先登录&#x27;</span>)<br></code></pre></td></tr></table></figure>默认效果：![image-20210207164026415](http://qiniu.rainna.xyz/image-20210207164026415.png)> 使用@app.errorhandler(状态码)来装饰一个函数用来处理对应的错误<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello world&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user</span>():<br>    abort(<span class="hljs-number">401</span>)  <span class="hljs-comment"># Unauthorized 未授权</span><br>    <span class="hljs-comment"># 阻塞式，不会运行下面的函数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Unauthorized, 请先登录&#x27;</span>)<br><br><span class="hljs-comment"># 用来处理401错误</span><br><span class="hljs-meta">@app.errorhandler(<span class="hljs-params"><span class="hljs-number">401</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">page_unauthorized</span>(<span class="hljs-params">error</span>):<br>    <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&#x27;&lt;h1&gt; Unauthorized &lt;/h1&gt;&lt;h2&gt;&#123;&#123; error_info &#125;&#125;&lt;/h2&gt;&#x27;</span>, error_info=error), <span class="hljs-number">401</span><br></code></pre></td></tr></table></figure>- 注： 被装饰的函数返回的是一个元组，401表示状态码，缺省为200自定义效果：![image-20210207164409794](http://qiniu.rainna.xyz/image-20210207164409794.png)### Cookie<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置cookie</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/set&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    res = Response(<span class="hljs-string">&#x27;add cookies&#x27;</span>)<br>    res.set_cookie(key=<span class="hljs-string">&#x27;name&#x27;</span>, value=<span class="hljs-string">&#x27;i&#x27;</span>, expires=time.time()+<span class="hljs-number">6</span>*<span class="hljs-number">60</span>)<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-comment"># 获取cookie</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/show&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    <span class="hljs-keyword">return</span> request.cookies.__str__()<br><br><span class="hljs-comment"># 删除cookie</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/del&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">del_cookie</span>():<br>    res = Response(<span class="hljs-string">&#x27;delete cookies&#x27;</span>)<br>    res.set_cookie(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, expires=<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>### Session添加session会默认在cookie中添加sessionId字段<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 添加</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/do_login&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">do_login</span>():<br>    name = request.form.get(<span class="hljs-string">&#x27;user_name&#x27;</span>)<br>    session[<span class="hljs-string">&#x27;user_name&#x27;</span>] = name<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;success&#x27;</span><br><br><span class="hljs-comment"># 获取session</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/show&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    <span class="hljs-keyword">return</span> session[<span class="hljs-string">&#x27;user_name&#x27;</span>]<br><br><span class="hljs-comment"># 删除</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/logout&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>():<br>    session.pop(<span class="hljs-string">&#x27;user_name&#x27;</span>, <span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br></code></pre></td></tr></table></figure>## RestFul URL将访问的url中部分作为函数参数，使得网页开发向软件开发靠拢的一种架构。### 转换器的使用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># http://127.0.0.1:8080/user/1</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user</span>(<span class="hljs-params">username</span>):<br>    <span class="hljs-built_in">print</span>(username) <span class="hljs-comment"># 1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span> + <span class="hljs-built_in">str</span>(username)<br><br><br><span class="hljs-comment"># http://127.0.0.1:8080/page/a  --&gt;  返回404，不会进入视图函数</span><br><span class="hljs-comment"># http://127.0.0.1:8080/page/1</span><br><span class="hljs-comment"># 指定类型,不符合会404</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user/&lt;int:page&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pager</span>(<span class="hljs-params">page</span>):<br>    <span class="hljs-built_in">print</span>(page)  <span class="hljs-comment"># 1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span> + <span class="hljs-built_in">str</span>(page)<br><br><span class="hljs-comment"># http://127.0.0.1:8080/page/1-3</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/page/&lt;int:page_start&gt;-&lt;int:page_end&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pager_range</span>(<span class="hljs-params">page_start, page_end</span>):<br>    <span class="hljs-built_in">print</span>(page_start, page_end)  <span class="hljs-comment"># 1  3</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span> + <span class="hljs-built_in">str</span>(page_start) + <span class="hljs-built_in">str</span>(page_end)<br></code></pre></td></tr></table></figure>- 注：装饰器中<>内的参数名要与视图函数形参名相同！参数个数也要对应<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 默认的转换器</span><br>    <span class="hljs-string">&#x27;default&#x27;</span>:          UnicodeConverter,<br>    <span class="hljs-string">&#x27;string&#x27;</span>:           UnicodeConverter,<br>    <span class="hljs-string">&#x27;any&#x27;</span>:              AnyConverter,<br>    <span class="hljs-string">&#x27;path&#x27;</span>:             PathConverter,<br>    <span class="hljs-string">&#x27;int&#x27;</span>:              IntegerConverter,<br>    <span class="hljs-string">&#x27;float&#x27;</span>:            FloatConverter,<br>    <span class="hljs-string">&#x27;uuid&#x27;</span>:             UUIDConverter,<br></code></pre></td></tr></table></figure>### 自定义转换器<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> werkzeug.routing <span class="hljs-keyword">import</span> BaseConverter<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> url_for<br><br><span class="hljs-comment"># 自定义转换器,继承自BaseConverter</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConverter</span>(<span class="hljs-title class_ inherited__">BaseConverter</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, map_</span>):<br>        <span class="hljs-built_in">super</span>(MyConverter, self).__init__(map_)<br>        <span class="hljs-comment"># 匹配路由，只有匹配的路由才会走to_python</span><br>        self.regex = <span class="hljs-string">&quot;[123]&quot;</span><br><br><span class="hljs-comment"># url中的变量--&gt;to_python--&gt;函数参数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">to_python</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;value&quot;</span> + value)<br>        <span class="hljs-keyword">if</span> value.isalpha():<br>            value += <span class="hljs-string">&quot;100&quot;</span><br>        <span class="hljs-keyword">elif</span> value.isdigit():<br>            value = <span class="hljs-built_in">int</span>(value) + <span class="hljs-number">100</span><br>        <span class="hljs-keyword">return</span> value<br><br>    <span class="hljs-comment"># url_for函数名反转时使用,url_for中的参数--&gt;to_url--&gt;真实url</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">to_url</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-built_in">print</span>(value, <span class="hljs-string">&quot;v&quot;</span>)<br>        value = <span class="hljs-built_in">str</span>(value)<br>        <span class="hljs-keyword">if</span> value.isalpha():<br>            value *= <span class="hljs-number">2</span><br>        <span class="hljs-keyword">elif</span> value.isdigit():<br>            value = <span class="hljs-built_in">int</span>(value)*<span class="hljs-number">2</span><br>        <span class="hljs-comment"># 返回值必须是str类型</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(value)<br><br><br><span class="hljs-comment"># 注册自定义转换器</span><br>app.url_map.converters[<span class="hljs-string">&#x27;add100&#x27;</span>] = MyConverter<br><br><br><span class="hljs-comment"># 访问http://127.0.0.1:8080/mypage/1</span><br><span class="hljs-comment"># 使用自定义的转换器</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/mypage/&lt;add100:page&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myPager</span>(<span class="hljs-params">page</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;func&quot;</span> + <span class="hljs-built_in">str</span>(page))  <span class="hljs-comment"># func101</span><br>    <span class="hljs-built_in">print</span>(url_for(<span class="hljs-string">&quot;myPager&quot;</span>, page=<span class="hljs-number">999</span>))  <span class="hljs-comment"># /mypage/1998</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span> + <span class="hljs-built_in">str</span>(page)<br></code></pre></td></tr></table></figure>## 路由### url_for> 根据``endpoint`(默认为视图函数名)反转生成url<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user/&lt;name&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># endpoint给函数定义别名，默认是函数名，别名是url_for中使用</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/page/&lt;int:num&gt;&#x27;</span>,endpoint=<span class="hljs-string">&quot;myPage&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">page</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/test&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    <span class="hljs-built_in">print</span>(url_for(<span class="hljs-string">&#x27;hello_world&#x27;</span>))  <span class="hljs-comment"># /</span><br>    <span class="hljs-built_in">print</span>(url_for(<span class="hljs-string">&#x27;user&#x27;</span>, name=<span class="hljs-string">&#x27;i&#x27;</span>))  <span class="hljs-comment"># /user/i</span><br>    <span class="hljs-comment"># 使用myPage而不是page，是因为通过endpoint给page赋了别名</span><br>    <span class="hljs-built_in">print</span>(url_for(<span class="hljs-string">&#x27;myPage&#x27;</span>, num=<span class="hljs-number">1</span>, q=<span class="hljs-string">&#x27;had10%3&#x27;</span>, words=<span class="hljs-string">&quot;haha&quot;</span>))  <span class="hljs-comment">#　/page/1?q=had10%253&amp;words=haha</span><br>    <span class="hljs-built_in">print</span>(url_for(<span class="hljs-string">&#x27;static&#x27;</span>, filename=<span class="hljs-string">&#x27;uploads/01.jpg&#x27;</span>))  <span class="hljs-comment"># /static/uploads/01.jpg</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello&#x27;</span><br></code></pre></td></tr></table></figure>### 蓝图> `蓝图`是为了将路由和视图函数分写到多个文件，相当于Django的include。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ./user/view.py</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint<br><br><span class="hljs-comment"># 创建一个蓝图，url_prefix用于定义url前缀，默认为&quot;/&quot;</span><br>user_bp = Blueprint(<span class="hljs-string">&quot;user&quot;</span>, __name__, url_prefix=<span class="hljs-string">&quot;/user&quot;</span>)<br><br><br><span class="hljs-comment"># 将视图函数和url映射绑定在蓝图上</span><br><span class="hljs-meta">@user_bp.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello!&quot;</span><br><br><br><span class="hljs-meta">@user_bp.route(<span class="hljs-params"><span class="hljs-string">&quot;/user&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;please login&quot;</span><br><br><br><span class="hljs-meta">@user_bp.route(<span class="hljs-params"><span class="hljs-string">&#x27;/detail&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">detail</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;details&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ./__init__.py</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br><span class="hljs-keyword">from</span> flasker.ForBlueprint.user.views <span class="hljs-keyword">import</span> user_bp<br><span class="hljs-keyword">from</span> flasker.config <span class="hljs-keyword">import</span> BasicConfig<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_app</span>():<br>    app = Flask(__name__)<br>    app.config.from_object(BasicConfig)<br>    <br>    <span class="hljs-comment"># 在工厂函数中注册蓝图</span><br>    app.register_blueprint(user_bp)<br>    <span class="hljs-keyword">return</span> app<br><br></code></pre></td></tr></table></figure>### url_map> 查看当前的路由<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_app</span>():<br>    app = Flask(__name__)  <span class="hljs-comment"># __name__默认指向app,即当前包名</span><br>    app.config.from_object(BasicConfig)<br>    app.register_blueprint(user_bp)  <span class="hljs-comment"># 注册蓝图</span><br>    <span class="hljs-built_in">print</span>(app.url_map)<br>   <span class="hljs-comment"># Map([&lt;Rule &#x27;/detail&#x27; (GET, OPTIONS, HEAD) -&gt; user.detail&gt;,</span><br>        <span class="hljs-comment"># &lt;Rule &#x27;/user&#x27; (GET, OPTIONS, HEAD) -&gt; user.login&gt;,</span><br>        <span class="hljs-comment"># &lt;Rule &#x27;/&#x27; (GET, OPTIONS, HEAD) -&gt; user.user_index&gt;,</span><br>        <span class="hljs-comment"># &lt;Rule &#x27;/static/&lt;filename&gt;&#x27; (GET, OPTIONS, HEAD) -&gt; static&gt;])</span><br>    <span class="hljs-keyword">return</span> app<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>后端</tag>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BootStrap3</title>
    <link href="/2022/10/08/2022-10-08-BootStrap3/"/>
    <url>/2022/10/08/2022-10-08-BootStrap3/</url>
    
    <content type="html"><![CDATA[<h1>Bootstrap</h1><p>详细参考<a href="https://v3.bootcss.com">官方文档</a>，写的很详细！</p><h2 id="导入">导入</h2><ul class="lvl-0"><li class="lvl-2"><h4 id="Bootstrap-插件全部依赖-jQuery，因此-jQuery-必须在-Bootstrap-之前引入">Bootstrap 插件全部依赖 jQuery，因此 jQuery 必须在 Bootstrap 之前引入</h4></li></ul><ol><li class="lvl-3"><p>本地文件导入</p></li><li class="lvl-3"><p>CDN导入</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 可选的 Bootstrap 主题文件（一般不用引入） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap-theme.min.css&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="样式介绍">样式介绍</h2><h3 id="布局">布局</h3><h4 id="容器">容器</h4><p>以下两种容器二选一，不能同时存在</p><blockquote><p>container 固定容器</p></blockquote><p>会根据当前窗口尺寸改变元素尺寸。有几个固定的阈值，在不同的阈值区间设定不同的元素宽度，通常左右会留白。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- container 固定布局--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:1px black solid;&quot;</span>&gt;</span><br>    hello bootstrap!<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>container-fluid 流体容器</p></blockquote><p>布局始终占窗口宽度的100%</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- container-fluid 流体布局--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;contaniner-fluid&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:1px aqua solid;&quot;</span>&gt;</span><br>    contaniner-fluid!<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://qiniu.rainna.xyz/image-20210209232138590.png" alt="image-20210209232138590"></p><h4 id="栅格系统">栅格系统</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 表示col开头的类 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.container</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-attr">[class|=col]</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> aqua solid</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 栅格系统将页面分为行列，最多12列 --&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 栅格系统要放到容器内 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 一个row就是一行 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 定义一列，占4份 --&gt;</span><br>                <span class="hljs-comment">&lt;!-- 默认每列之间会有15的padding --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span> &gt;</span>col-sm-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span> &gt;</span>col-sm-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span> &gt;</span>col-sm-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 一行最多12列，多出的部分会到下一行 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span> &gt;</span>col-sm-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 列有四种类，只要是适应不同尺寸的屏幕，决定在什么时候堆叠元素 --&gt;</span><br>                <span class="hljs-comment">&lt;!-- 原来的列是展开的，布局在一行，堆叠后每行一列 --&gt;</span><br>                <span class="hljs-comment">&lt;!-- col-lg大屏幕</span><br><span class="hljs-comment">                     col-md中屏幕</span><br><span class="hljs-comment">                     col-sm小屏幕</span><br><span class="hljs-comment">                     col-xs更小屏幕 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3&quot;</span>&gt;</span>col-lg-3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3&quot;</span>&gt;</span>col-lg-3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3&quot;</span>&gt;</span>col-lg-3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-3&quot;</span>&gt;</span>col-lg-3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-6&quot;</span>&gt;</span>col-xs-6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-6&quot;</span>&gt;</span>col-xs-6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span>col-md-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-8&quot;</span>&gt;</span>col-md-8<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 列的嵌套 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span>col-sm-6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span>col-sm-6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span>col-sm-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span>col-sm-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 列偏移，offset --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4 col-sm-offset-2&quot;</span>&gt;</span>col-sm-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-4&quot;</span>&gt;</span>col-sm-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://qiniu.rainna.xyz/image-20210210144616191.png" alt="image-20210210144616191"></p><h3 id="排版">排版</h3><h4 id="内置标签">内置标签</h4><h5 id="small-小号文本">small-小号文本</h5><p>其内的文本大小被设置为父容器的85%。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- small：字体为父容器字体的85% --&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一级标题 <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>二级标题 <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>三级标题 <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>四级标题 <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>五级标题 <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>六级标题 <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>副标题<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://qiniu.rainna.xyz/image-20210209232626482.png" alt="image-20210209232626482"></p><h5 id="mark-标签文本">mark-标签文本</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- mark标签：添加背景色显示 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>司的后台管理系统用的是H+框架，也是基于<span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>mark标签文本<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span>的，希望学了这个以后能更好的理解H+<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://qiniu.rainna.xyz/image-20210210001756432.png" alt="image-20210210001756432"></p><h5 id="del-s-删除线">del/s-删除线</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- del/s：删除线 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>那个按esc关闭模态框的功能在电脑上的三个浏览器<span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>del删除线<span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span>试了下，只有<span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span>s删除线<span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span>成功了[doge]IE浏览器终于站起来了[doge]<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://qiniu.rainna.xyz/image-20210210002002671.png" alt="image-20210210002002671"></p><h5 id="ins-u-下划线">ins/u-下划线</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- ins/u：下划线 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>同学能跟上吧？我<span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>ins下划线<span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span>看的，刚好能跟上。B站就是没有<span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>u下划线<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span>，我就跟不上了。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://qiniu.rainna.xyz/image-20210210002010712.png" alt="image-20210210002010712"></p><h5 id="strong-加粗">strong-加粗</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- strong: 加粗文本 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>希望能出个springcloud<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span> 加粗文本！<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://qiniu.rainna.xyz/image-20210210002016865.png" alt="image-20210210002016865"></p><h5 id="em-斜体">em-斜体</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- em：斜体 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>老师的完整的课程资料谁有?<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>斜体文本<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>！！！！没找到那条置顶评论！！！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://qiniu.rainna.xyz/image-20210210002023856.png" alt="image-20210210002023856"></p><h5 id="abbr-缩略语">abbr-缩略语</h5><blockquote><p>鼠标移入会显示说明文本，</p><p>配合<strong>initialism</strong>类，可以使缩略语字体缩小</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;哔哩哔哩弹幕网的视频&quot;</span>&gt;</span>视屏<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span>最后的那个问题怎么解决的，有知道的吗？<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!-- initialism类：配合abbr标签使用，首字母缩略语，使缩略语字体变小 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;哔哩哔哩弹幕网的视频&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;initialism&quot;</span>&gt;</span>视屏<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span>最后的那个问题怎么解决的，有知道的吗？<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://qiniu.rainna.xyz/image-20210210002513761.png" alt="image-20210210002513761"></p><h5 id="blockquote-引用块">blockquote-引用块</h5><blockquote><p>相当于这种效果</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span>这是一个引用块<span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://qiniu.rainna.xyz/image-20210210002659466.png" alt="image-20210210002659466"></p><h4 id="内置类">内置类</h4><h5 id="lead-突出展示">lead-突出展示</h5><p>放大字体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    HTML&amp;CSS:尚硅谷Web前端HTMLCSS初学者零基础入门(新版已上传，推荐观看)<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    HTML5+CSS3(超哥新版):尚硅谷Web前端HTML5CSS3初学者零基础入门全套完整版<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span> =<span class="hljs-string">&quot;lead&quot;</span>&gt;</span>JS核心<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:尚硅谷最新版JavaScript基础全套教程完整版(140集实战教学,JS从入门到精通)<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    JS高级:尚硅谷JavaScript高级教程(javascript实战进阶)<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    jQuery:尚硅谷jQuery教程(jquery从入门到精通)<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lead&quot;</span>&gt;</span>必备技术--修炼内功——》》<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    ES6-ES11:尚硅谷Web前端ES6教程，涵盖ES6-ES11<br>    AngularJS:尚硅谷AngularJS实战教程(angular.js框架精讲)<br>    Node.js:尚硅谷超经典NodeJS-node.js实战教程全套完整版(初学者零基础入门)<br>        Zepto.js:尚硅谷Zepto教程(zepto.js框架精讲)<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://qiniu.rainna.xyz/image-20210210001547012.png" alt="image-20210210001547012"></p><h5 id="对齐">对齐</h5><blockquote><p>​    text-center</p><p>​    text-rignt</p><p>​    text-left</p><p>​    text-justify 自动换行</p><p>​    text-nowrap  不换行，超出加滚动条</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>居中展示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-rignt&quot;</span>&gt;</span>居右对齐<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-left&quot;</span>&gt;</span>居左对齐<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-justify&quot;</span>&gt;</span>自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行自动换行<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-nowrap&quot;</span>&gt;</span>不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行不自动换行<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://qiniu.rainna.xyz/image-20210210002158685.png" alt="image-20210210002158685"></p><h5 id="改变大小写">改变大小写</h5><blockquote><p>​    text-lowercase类 全小写</p><p>​    text-uppercase类 全大写</p><p>​    text-capitalize类 首字母大写,其他位置不变</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-lowercase&quot;</span>&gt;</span>WHAT THE FUXK 8102983!!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-uppercase&quot;</span>&gt;</span>what&#x27;s up 8102983!!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-capitalize&quot;</span>&gt;</span>WHAT the fXXk 8102983!!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://qiniu.rainna.xyz/image-20210210002252293.png" alt="image-20210210002252293"></p><h5 id="列表样式">列表样式</h5><blockquote><p>list-unstyled类：去除列表默认样式</p><p>list-inline类：将所有元素展示在一行</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- list-unstyled类：去除列表默认样式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>这是默认无序列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-unstyled&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>这是无样式列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-comment">&lt;!-- list-inline类：将所有元素展示在一行 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-inline&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>这是单行展示的列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://qiniu.rainna.xyz/image-20210210002802182.png" alt="image-20210210002802182"></p><h3 id="实体">实体</h3><h4 id="表格">表格</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 表格：</span><br><span class="hljs-comment">    table基类</span><br><span class="hljs-comment">    table-bordered  带边框</span><br><span class="hljs-comment">    table-striped   带斑马线条纹样式</span><br><span class="hljs-comment">    table-hover     带鼠标悬停样式</span><br><span class="hljs-comment">    table-condensed 紧凑表格(padding缩小50%)--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-bordered table-striped table-hover table-condensed &quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 一些状态类：可以加在tr,td,th上</span><br><span class="hljs-comment">        info        蓝色背景</span><br><span class="hljs-comment">        success     绿色</span><br><span class="hljs-comment">        warning     黄色</span><br><span class="hljs-comment">        danger      红色 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>生日<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 不能加在tbody上 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;tbody class=&quot;success&quot;&gt;  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>16<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>00.09.17<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>128371@126.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;warning&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>16<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>00.09.17<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>128371@126.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>16<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>00.09.17<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>128371@126.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;warning&quot;</span>&gt;</span>16<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>00.09.17<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>128371@126.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- table-responsive响应式表格(会在小屏幕&lt;768px上水平滚动)  --&gt;</span><br>    <span class="hljs-comment">&lt;!--注意：这是加在table标签外的div上的不是直接加在table上 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table-responsive&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-hover&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://qiniu.rainna.xyz/image-20210210151355295.png" alt="image-20210210151355295"></p><h4 id="按钮">按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 可以为 &lt;a&gt;、&lt;button&gt; 或 &lt;input&gt;添加btn类来成为一个按钮 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- btn-default是默认按钮样式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Input&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 按钮预定义样式 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 白色背景 Standard button --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>（默认样式）Default<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 深蓝色背景 Provides extra visual weight and identifies the primary action in a set of buttons --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>（首选项）Primary<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 绿色背景 Indicates a successful or positive action --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span>&gt;</span>（成功）Success<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 浅蓝 Contextual button for informational alert messages --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-info&quot;</span>&gt;</span>（一般信息）Info<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 黄色 Indicates caution should be taken with this action --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-warning&quot;</span>&gt;</span>（警告）Warning<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 红色 Indicates a dangerous or potentially negative action --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span>&gt;</span>（危险）Danger<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 链接样式 Deemphasize a button by making it look like a link while maintaining button behavior --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-link&quot;</span>&gt;</span>（链接）Link<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 按钮尺寸 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg&quot;</span>&gt;</span>（大按钮）Large button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-lg&quot;</span>&gt;</span>（大按钮）Large button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>（默认尺寸）Default button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>（默认尺寸）Default button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-sm&quot;</span>&gt;</span>（小按钮）Small button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-sm&quot;</span>&gt;</span>（小按钮）Small button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-xs&quot;</span>&gt;</span>（超小尺寸）Extra small button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-xs&quot;</span>&gt;</span>（超小尺寸）Extra small button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 块级按钮 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 通过给按钮添加 .btn-block 类可以将其拉伸至父元素100%的宽度 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg btn-block&quot;</span>&gt;</span>（块级元素）Block level button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-lg btn-block&quot;</span>&gt;</span>（块级元素）Block level button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 按钮状态 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 激活状态active --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg active&quot;</span>&gt;</span>Primary button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-lg active&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 禁用状态 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-primary&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span>Primary button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-lg&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="http://qiniu.rainna.xyz/image-20210210152726206.png" alt="image-20210210152726206"></p>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Bootstrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb</title>
    <link href="/2022/10/08/2022-10-08-JavaWeb/"/>
    <url>/2022/10/08/2022-10-08-JavaWeb/</url>
    
    <content type="html"><![CDATA[<h1>JavaWeb</h1><h2 id="Tomcat">Tomcat</h2><h3 id="目录结构">目录结构</h3><h4 id="根目录"><strong>根目录</strong></h4><p><img src="http://qiniu.rainna.xyz/image-20210205193655262.png" alt="image-20210205193655262"></p><h4 id="conf目录"><strong>conf</strong>目录</h4><p><img src="http://qiniu.rainna.xyz/image-20210205194352840.png" alt="image-20210205194352840"></p><p><strong>server.xml</strong></p><blockquote><p>配置端口号：</p></blockquote><p><img src="JavaWeb.assets/image-20210205195919280.png" alt="image-20210205195919280"></p><blockquote><p>配置地址：</p></blockquote><p><img src="JavaWeb.assets/image-20210205200103306.png" alt="image-20210205200103306"></p><h4 id="webapps目录">webapps目录</h4><p>网页页面文件存放目录，可以通过server.xml更改目录名称。</p><p><img src="http://qiniu.rainna.xyz/image-20210205214025529.png" alt="image-20210205214025529"></p><p>每个目录对应一个app，访问localhost:8080默认进入<code>ROOT</code>下的<code>index.jsp</code>文件</p><p><strong>目录结构</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">--webapps : tomcat服务器的web目录<br>    -ROOT<br>    -someApp : 网站app的目录名<br>        - WEB-INF<br>        -classes : java程序<br>            -lib : web应用依赖的jar包<br>            -web.xml : 网站配置文件<br>        - index.html : 默认的首页<br>        - <span class="hljs-keyword">static</span><br>            -css<br>            -style.css<br>            -js<br>            -img<br>        - ...<br></code></pre></td></tr></table></figure><h2 id="MAVEN">MAVEN</h2><h3 id="配置">配置</h3><h4 id="环境变量配置">环境变量配置</h4><p><code>MAVEN_HOME</code>：D:\Code\Env\Java\apache-maven-3.6.3</p><p><code>M2_HOME</code>：D:\Code\Env\Java\apache-maven-3.6.3\bin</p><p>PATH：%MAVEN_HOME%\bin</p><h4 id="镜像配置">镜像配置</h4><p>作用：加速国内下载</p><p>在maven目录下<code>/conf/setting.xml</code>中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- mirror</span><br><span class="hljs-comment">    | Specifies a repository mirror site to use instead of a given repository. The repository that</span><br><span class="hljs-comment">    | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span><br><span class="hljs-comment">    | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span><br><span class="hljs-comment">    |</span><br><span class="hljs-comment">   &lt;mirror&gt;</span><br><span class="hljs-comment">     &lt;id&gt;mirrorId&lt;/id&gt;</span><br><span class="hljs-comment">     &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span><br><span class="hljs-comment">     &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span><br><span class="hljs-comment">     &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span><br><span class="hljs-comment">   &lt;/mirror&gt;</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="本地仓库配置">本地仓库配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:/Code/Env/Java/apache-maven-3.6.3/maven-repo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="IDEA中配置">IDEA中配置</h3><p>新建MAVEN项目/模块，选择相关路径</p><p>模块的maven配置文件：<code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--项目依赖文件，需要其他模块手动添加到新节点中--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Servlet">Servlet</h2><ol><li class="lvl-3"><p>编写servlet</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.i.hello;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-comment">// 继承自HttpServlet</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);  <span class="hljs-comment">// 设置编码</span><br>        <span class="hljs-comment">// 网页打印&lt;h1&gt;hello servlet!&lt;/h1&gt;</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter(); <br>        writer.println(<span class="hljs-string">&quot;&lt;h1&gt;hello servlet!&lt;/h1&gt;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;do Get！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>配置路由映射</p></li></ol><p>配置<code>web.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>Archetype Created Web Application<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--    定义一个servlet路由--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-comment">&lt;!--    servlet名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-comment">&lt;!--    对应的类--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.i.hello.hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-comment">&lt;!--    url映射,访问host:port/hello可以返回页面--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Mapping">Mapping</h3><p>映射路径配置在对应app下<code>web.xml</code>下配置</p><p>需要配置servlet对应的<code>类</code>和对应的<code>URL</code></p><ol><li class="lvl-3"><p>一个Servlet指定一个映射路径</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    定义一个servlet路由--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.i.hello.hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>一个Servlet指定多个映射路径</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.i.hello.hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello1<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>      <br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello2<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>一个Servlet指定通用映射路径</p><p>访问所有<code>未显式指定</code>的域名时都会访问<code>/*</code>URL映射的Servlet</p><p>但访问<code>/hello</code>时会正常跳转至hello指向的内容</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>idnex<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.i.hello.Index<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>index<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.i.hello.hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.i.hello.ErrorServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/error/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>指定url的一些后缀或前缀</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>注意：<code>*</code>前面不能加<code>/</code>否则会报错。另外，但存在通配符<code>/*</code>时，好像会优先走通配符(未深度测试).</p></li></ul><h3 id="ServletContext">ServletContext</h3><p>是Tomcat中的一个全局对象，是唯一的，即是个单例，所有应用共享。可以用于网页间传值。</p><h4 id="共享数据">共享数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    resp.setHeader(<span class="hljs-string">&quot;content-type&quot;</span>,<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><span class="hljs-comment">// 获取ServletContext全局对象</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br>    <span class="hljs-comment">// 设置属性值</span><br>    context.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;Xiaoi&quot;</span>);<br><br>    <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<br>    writer.println(<span class="hljs-string">&quot;&lt;h1&gt;用户名已设置&lt;/h1&gt;&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;do Get！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    resp.setHeader(<span class="hljs-string">&quot;content-type&quot;</span>,<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>    <br><span class="hljs-comment">// 获取ServletContext全局对象</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br>    <span class="hljs-comment">// 获取属性值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">contextAttribute</span> <span class="hljs-operator">=</span> (String) context.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br><br>    <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<br>    writer.println(<span class="hljs-string">&quot;&lt;h1&gt;用户名&lt;/h1&gt;&quot;</span>);<br>    writer.println(contextAttribute);<br>    System.out.println(<span class="hljs-string">&quot;do Get！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript基础</title>
    <link href="/2022/10/08/2022-10-08-Note/"/>
    <url>/2022/10/08/2022-10-08-Note/</url>
    
    <content type="html"><![CDATA[<h2 id="函数">函数</h2><h3 id="参数">参数</h3><p>由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不需要这些参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">abs</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;blablabla&#x27;</span>); <span class="hljs-comment">// 返回10</span><br><span class="hljs-title function_">abs</span>(-<span class="hljs-number">9</span>, <span class="hljs-string">&#x27;haha&#x27;</span>, <span class="hljs-string">&#x27;hehe&#x27;</span>, <span class="hljs-literal">null</span>); <span class="hljs-comment">// 返回9</span><br></code></pre></td></tr></table></figure><p>传入的参数比定义的少也没有问题：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">abs</span>(); <span class="hljs-comment">// 返回NaN</span><br></code></pre></td></tr></table></figure><p>此时<code>abs(x)</code>函数的参数<code>x</code>将收到<code>undefined</code>，计算结果为<code>NaN</code>。</p><p>要避免收到<code>undefined</code>，可以对参数进行检查：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">abs</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x !== <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;Not a number&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="arguments">arguments</h4><p>它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。<code>arguments</code>类似<code>Array</code>但它不是一个<code>Array</code>。</p><p>理解为一个参数列表，多用于判断参数个数。</p><h4 id="rest">rest</h4><p>ES6引入的语法！</p><p>rest参数只能写在最后，前面用<code>...</code>标识</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a, b, ...rest</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a = &#x27;</span> + a);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b = &#x27;</span> + b);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rest);<br>&#125;<br></code></pre></td></tr></table></figure><p>用于接收剩下的参数，来替代arguments的复杂判断。</p><h3 id="调用">调用</h3><h4 id="apple">apple</h4><p>它接收两个参数，第一个参数就是需要绑定的<code>this</code>变量，第二个参数是<code>Array</code>，表示函数本身的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> y = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>();<br>    <span class="hljs-keyword">return</span> y - <span class="hljs-variable language_">this</span>.<span class="hljs-property">birth</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> xiaoming = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">birth</span>: <span class="hljs-number">1990</span>,<br>    <span class="hljs-attr">age</span>: getAge<br>&#125;;<br><br>xiaoming.<span class="hljs-title function_">age</span>(); <span class="hljs-comment">// 25</span><br>getAge.<span class="hljs-title function_">apply</span>(xiaoming, []); <span class="hljs-comment">// 25, this指向xiaoming, 参数为空</span><br></code></pre></td></tr></table></figure><p>利用apple<strong>实现装饰器</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> oldParseInt = <span class="hljs-built_in">parseInt</span>; <span class="hljs-comment">// 保存原函数</span><br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">parseInt</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    count += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> oldParseInt.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, <span class="hljs-variable language_">arguments</span>); <span class="hljs-comment">// 调用原函数</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="call">call</h4><p>同apple，唯一区别是：</p><ul class="lvl-0"><li class="lvl-2"><p><code>apply()</code>把参数打包成<code>Array</code>再传入；</p></li><li class="lvl-2"><p><code>call()</code>把参数按顺序传入。</p></li></ul><p>比如调用<code>Math.max(3, 5, 4)</code>，分别用<code>apply()</code>和<code>call()</code>实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Math</span>.<span class="hljs-property">max</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>]); <span class="hljs-comment">// 5</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-property">max</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><h2 id="作用域">作用域</h2><h3 id="全局作用域">全局作用域</h3><p>JavaScript默认有一个全局对象<code>window</code>，全局作用域的变量实际上被绑定到<code>window</code>的一个属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> course = <span class="hljs-string">&#x27;Learn JavaScript&#x27;</span>;<br><span class="hljs-title function_">alert</span>(course); <span class="hljs-comment">// &#x27;Learn JavaScript&#x27;</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">course</span>); <span class="hljs-comment">// &#x27;Learn JavaScript&#x27;</span><br></code></pre></td></tr></table></figure><p>我们每次直接调用的<code>alert()</code>函数其实也是<code>window</code>的一个变量</p><h3 id="局部作用域">局部作用域</h3><p>函数内为局部作用域</p><p>for循环等块语句是全局作用域！要声明局部变量使用<code>let</code>关键字</p><h3 id="命名空间">命名空间</h3><p>全局变量会绑定到<code>window</code>上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。</p><p>减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 唯一的全局变量MYAPP:</span><br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">MYAPP</span> = &#123;&#125;;<br><br><span class="hljs-comment">// 其他变量:</span><br><span class="hljs-variable constant_">MYAPP</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;myapp&#x27;</span>;<br><span class="hljs-variable constant_">MYAPP</span>.<span class="hljs-property">version</span> = <span class="hljs-number">1.0</span>;<br><br><span class="hljs-comment">// 其他函数:</span><br><span class="hljs-variable constant_">MYAPP</span>.<span class="hljs-property">foo</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;foo&#x27;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>把自己的代码全部放入唯一的名字空间<code>MYAPP</code>中，会大大减少全局变量冲突的可能。</p><h2 id="解构赋值">解构赋值</h2><p>（拆包）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> [x, [y, z]] = [<span class="hljs-string">&#x27;hello&#x27;</span>, [<span class="hljs-string">&#x27;JavaScript&#x27;</span>, <span class="hljs-string">&#x27;ES6&#x27;</span>]];<br>x; <span class="hljs-comment">// &#x27;hello&#x27;</span><br>y; <span class="hljs-comment">// &#x27;JavaScript&#x27;</span><br>z; <span class="hljs-comment">// &#x27;ES6&#x27;</span><br></code></pre></td></tr></table></figure><p>快速获取对象的指定属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>    <span class="hljs-attr">passport</span>: <span class="hljs-string">&#x27;G-12345678&#x27;</span>,<br>    <span class="hljs-attr">school</span>: <span class="hljs-string">&#x27;No.4 middle school&#x27;</span><br>&#125;;<br><span class="hljs-keyword">var</span> &#123;name, age, passport&#125; = person;<br></code></pre></td></tr></table></figure><p>可以直接对嵌套的对象属性进行赋值，只要保证对应的层次是一致的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>    <span class="hljs-attr">passport</span>: <span class="hljs-string">&#x27;G-12345678&#x27;</span>,<br>    <span class="hljs-attr">school</span>: <span class="hljs-string">&#x27;No.4 middle school&#x27;</span>,<br>    <span class="hljs-attr">address</span>: &#123;<br>        <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;Beijing&#x27;</span>,<br>        <span class="hljs-attr">street</span>: <span class="hljs-string">&#x27;No.1 Road&#x27;</span>,<br>        <span class="hljs-attr">zipcode</span>: <span class="hljs-string">&#x27;100001&#x27;</span><br>    &#125;<br>&#125;;<br><span class="hljs-keyword">var</span> &#123;name, <span class="hljs-attr">address</span>: &#123;city, zip&#125;&#125; = person;<br>name; <span class="hljs-comment">// &#x27;小明&#x27;</span><br>city; <span class="hljs-comment">// &#x27;Beijing&#x27;</span><br>zip; <span class="hljs-comment">// undefined, 因为属性名是zipcode而不是zip</span><br><span class="hljs-comment">// 注意: address不是变量，而是为了让city和zip获得嵌套的address对象的属性:</span><br>address; <span class="hljs-comment">// Uncaught ReferenceError: address is not defined</span><br><br><br><span class="hljs-comment">// 把passport属性赋值给变量id:</span><br><span class="hljs-keyword">let</span> &#123;name, <span class="hljs-attr">passport</span>:id&#125; = person;<br>name; <span class="hljs-comment">// &#x27;小明&#x27;</span><br>id; <span class="hljs-comment">// &#x27;G-12345678&#x27;</span><br><span class="hljs-comment">// 注意: passport不是变量，而是为了让变量id获得passport属性:</span><br>passport; <span class="hljs-comment">// Uncaught ReferenceError: passport is not defined</span><br><br><span class="hljs-comment">// 如果person对象没有single属性，默认赋值为true:</span><br><span class="hljs-keyword">var</span> &#123;name, single=<span class="hljs-literal">true</span>&#125; = person;<br>name; <span class="hljs-comment">// &#x27;小明&#x27;</span><br>single; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="this指向问题">this指向问题</h2><p>对象里的函数叫方法</p><ul class="lvl-0"><li class="lvl-2"><p>在对象的方法内，this指向被调用的对象。要保证<code>this</code>指向正确，必须用<code>obj.xxx()</code>的形式调用！</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> y = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>();<br>    <span class="hljs-keyword">return</span> y - <span class="hljs-variable language_">this</span>.<span class="hljs-property">birth</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> xiaoming = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">birth</span>: <span class="hljs-number">1990</span>,<br>    <span class="hljs-attr">age</span>:  getAge<br>&#125;;<br><br>xiaoming.<span class="hljs-title function_">age</span>(); <span class="hljs-comment">// 25</span><br><br><span class="hljs-comment">// 外部调用，指向window</span><br><span class="hljs-title function_">getAge</span>(); <span class="hljs-comment">// NaN</span><br><br><span class="hljs-keyword">var</span> fn = xiaoming.<span class="hljs-property">age</span>; <span class="hljs-comment">// 先拿到xiaoming的age函数</span><br><span class="hljs-title function_">fn</span>(); <span class="hljs-comment">// NaN</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xiaoming = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">birth</span>: <span class="hljs-number">1990</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">getAgeFromBirth</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">var</span> y = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>();<br>                <span class="hljs-keyword">return</span> y - <span class="hljs-variable language_">this</span>.<span class="hljs-property">birth</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">getAgeFromBirth</span>();<br>    &#125;<br>&#125;;<br><br>xiaoming.<span class="hljs-title function_">age</span>(); <span class="hljs-comment">// Uncaught TypeError: Cannot read property &#x27;birth&#x27; of undefined</span><br></code></pre></td></tr></table></figure><p><code>this</code>指针只在<code>age</code>方法的函数内指向<code>xiaoming</code>，在函数内部定义的函数，<code>this</code>又指向<code>undefined</code>了！（在非strict模式下，它重新指向全局对象<code>window</code>！）</p><p>修复的办法也不是没有，我们用一个<code>that</code>变量首先捕获<code>this</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xiaoming = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">birth</span>: <span class="hljs-number">1990</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span>; <span class="hljs-comment">// 在方法内部一开始就捕获this</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">getAgeFromBirth</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> y = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>();<br>            <span class="hljs-keyword">return</span> y - that.<span class="hljs-property">birth</span>; <span class="hljs-comment">// 用that而不是this</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">getAgeFromBirth</span>();<br>    &#125;<br>&#125;;<br><br>xiaoming.<span class="hljs-title function_">age</span>(); <span class="hljs-comment">// 25</span><br></code></pre></td></tr></table></figure><p>箭头函数修复了this指向的问题！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">birth</span>: <span class="hljs-number">1990</span>,<br>    <span class="hljs-attr">getAge</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> b = <span class="hljs-variable language_">this</span>.<span class="hljs-property">birth</span>; <span class="hljs-comment">// 1990</span><br>        <span class="hljs-keyword">var</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>() - <span class="hljs-variable language_">this</span>.<span class="hljs-property">birth</span>; <span class="hljs-comment">// this指向obj对象</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">fn</span>();<br>    &#125;<br>&#125;;<br>obj.<span class="hljs-title function_">getAge</span>(); <span class="hljs-comment">// 25</span><br></code></pre></td></tr></table></figure><p><code>this</code>总是指向词法作用域，也就是外层调用者<code>obj</code></p><p><code>this</code>在箭头函数中已经按照词法作用域绑定了，所以，用<code>call()</code>或者<code>apply()</code>调用箭头函数时，无法对<code>this</code>进行绑定，即传入的第一个参数被忽略：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">birth</span>: <span class="hljs-number">1990</span>,<br>    <span class="hljs-attr">getAge</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">year</span>) &#123;<br>        <span class="hljs-keyword">var</span> b = <span class="hljs-variable language_">this</span>.<span class="hljs-property">birth</span>; <span class="hljs-comment">// 1990</span><br>        <span class="hljs-keyword">var</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params">y</span>) =&gt; y - <span class="hljs-variable language_">this</span>.<span class="hljs-property">birth</span>; <span class="hljs-comment">// this.birth仍是1990</span><br>        <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">call</span>(&#123;<span class="hljs-attr">birth</span>:<span class="hljs-number">2000</span>&#125;, year);<br>    &#125;<br>&#125;;<br>obj.<span class="hljs-title function_">getAge</span>(<span class="hljs-number">2015</span>); <span class="hljs-comment">// 25</span><br></code></pre></td></tr></table></figure><h2 id="生成器">生成器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">foo</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">yield</span> x + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">yield</span> x + <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> x + <span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>generator由<code>function*</code>定义（注意多出的<code>*</code>号），并且，除了<code>return</code>语句，还可以用<code>yield</code>返回多次。</p><p>调用generator对象有两个方法，一是不断地调用generator对象的<code>next()</code>方法，<code>next()</code>方法会执行generator的代码，然后，每次遇到<code>yield x;</code>就返回一个对象<code>&#123;value: x, done: true/false&#125;</code>，然后“暂停”。返回的<code>value</code>就是<code>yield</code>的返回值，<code>done</code>表示这个generator是否已经执行结束了。如果<code>done</code>为<code>true</code>，则<code>value</code>就是<code>return</code>的返回值。</p><p>第二个方法是直接用<code>for ... of</code>循环迭代generator对象，这种方式不需要我们自己判断<code>done</code>。</p><h2 id="对象">对象</h2><h3 id="继承">继承</h3><p>JavaScript由于采用原型继承，我们无法直接扩展一个Class</p><p>JavaScript的原型继承实现方式就是：</p><ol><li class="lvl-3"><p>定义新的构造函数，并在内部用<code>call()</code>调用希望“继承”的构造函数，并绑定<code>this</code>；</p></li><li class="lvl-3"><p>借助中间函数<code>F</code>实现原型链继承，最好通过封装的<code>inherits</code>函数完成；</p></li><li class="lvl-3"><p>继续在新的构造函数的原型上定义新方法。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 继承实现方式</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">inherits</span>(<span class="hljs-params">Child, Parent</span>) &#123;<br>    <span class="hljs-keyword">var</span> F = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;;<br>    F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>    <span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>();<br>    <span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Child</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="class继承">class继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-title function_">hello</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;!&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// s</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimaryStudent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Student</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, grade</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(name); <span class="hljs-comment">// 记得用super调用父类的构造方法!</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">grade</span> = grade;<br>    &#125;<br><br>    <span class="hljs-title function_">myGrade</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;I am at grade &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">grade</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="高阶函数">高阶函数</h2><h3 id="map">map</h3><blockquote><p>map(fn)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ns = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> new_ns = ns.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>)&#123;<br>    <span class="hljs-keyword">return</span> n * <span class="hljs-number">2</span><br>&#125;)<br><span class="hljs-comment">// new_ns = [2, 4, 6]</span><br></code></pre></td></tr></table></figure><h3 id="reduce">reduce</h3><blockquote><p>reduce(fn, preDefault)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ns = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> new_ns = ns.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">preValue,n</span>)&#123;<br>    <span class="hljs-keyword">return</span> preValue + n<br>&#125;, <span class="hljs-number">0</span>)  <span class="hljs-comment">// 第一个值为0</span><br><span class="hljs-comment">// new_ns =  0+1+2+3 = 6</span><br></code></pre></td></tr></table></figure><h3 id="filter">filter</h3><blockquote><p>filter(fn)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ns = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> new_ns = ns.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">preValue,n</span>)&#123;<br>    <span class="hljs-keyword">return</span> n &gt;= <span class="hljs-number">2</span><br>&#125;)  <span class="hljs-comment">// 第一个值为0</span><br><span class="hljs-comment">// new_ns =  [2, 3]</span><br></code></pre></td></tr></table></figure><h2 id="模块导入导出">模块导入导出</h2><h3 id="ES6">ES6</h3><p>因为直接引用script是导入到全局作用域，会导致变量名重复等问题。</p><p>解决：以模块为变量作用域，通过导入导出的方式来提供复用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--这里的type必须是module，表示作用域限定与模块--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;aaa.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;bbb.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;ccc.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// aaa.js</span><br><br><span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">var</span> num = <span class="hljs-number">100</span>;<br><span class="hljs-comment">// 1.1 导出变量</span><br><span class="hljs-keyword">export</span> &#123;<br>    flag, num<br>&#125;<br><span class="hljs-comment">// 1.2 导出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> len = <span class="hljs-number">10</span>;<br><span class="hljs-comment">// 1.3 导出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">n1, n2</span>)&#123;<br>    <span class="hljs-keyword">return</span> n1 + n2<br>&#125;<br><span class="hljs-comment">// export default</span><br><span class="hljs-comment">// 导出一个变量，可以让导入者自己命名，但是一个文件只能导出一个export default</span><br><span class="hljs-keyword">var</span> address = <span class="hljs-string">&quot;北京市&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> address;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// bbb.js</span><br><br><span class="hljs-comment">// 导入</span><br><span class="hljs-keyword">import</span> &#123;flag, num&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./aaa.js&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(flag);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br><br><span class="hljs-keyword">import</span> &#123;len&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./aaa.js&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;add&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./aaa.js&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(len, num));<br><span class="hljs-comment">// 导入export default的变量</span><br><span class="hljs-comment">// 可以自命名，变量不用&#123;&#125;包裹</span><br><span class="hljs-keyword">import</span> addr <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./aaa.js&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(addr);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ccc.js</span><br><br><span class="hljs-comment">// 导入aaa中所有导出的变量</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> hah <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./aaa.js&quot;</span>;<br><span class="hljs-comment">// 通过 别名.变量名 使用</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(hah.<span class="hljs-property">num</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pycharm启动端口绑定问题</title>
    <link href="/2022/10/07/2022-10-07-Pycharm%E5%90%AF%E5%8A%A8%E7%AB%AF%E5%8F%A3%E7%BB%91%E5%AE%9A%E9%97%AE%E9%A2%98/"/>
    <url>/2022/10/07/2022-10-07-Pycharm%E5%90%AF%E5%8A%A8%E7%AB%AF%E5%8F%A3%E7%BB%91%E5%AE%9A%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1>Pycharm启动提示端口被占用</h1><h2 id="报错信息">报错信息</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java.util.concurrent.CompletionException: </span><span class="hljs-keyword">java.net.BindException: </span>**<span class="hljs-keyword">Address </span>already in use: <span class="hljs-keyword">bind**</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:314)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:319)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1702)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)</span><br><span class="hljs-keyword"></span>...<br></code></pre></td></tr></table></figure><h2 id="原因分析">原因分析</h2><p>Pycharm运行端口被占用</p><h2 id="解决方案">解决方案</h2><p>管理员身份启动命令行，运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">net stop winnat<br>net start winnat<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu下Selenium自动上传</title>
    <link href="/2022/10/05/2022-10-05-Ubuntu%E4%B8%8BSelenium%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0/"/>
    <url>/2022/10/05/2022-10-05-Ubuntu%E4%B8%8BSelenium%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>最近参与了一个小比赛，成果提交方式是提交Docker镜像，镜像执行在服务端进行，执行完毕会返回执行结果</p><p>比赛存在使用随机seed控制场景，导致结果会有好坏变化的情况。为了得到一个较好的成绩，可以通过不断提交镜像来刷分。</p><p>但是我总是忘记上传，于是想到抓包使用爬虫加定时任务的方式取代人工上传。</p><p>但是直接抓包，并没有找到文件的上传接口，因为有断点续传的功能，估计没有直接的上传接口（大概）。</p><p>想到使用Selenium来模拟点击实现自动上传。</p><p>但是，上传按钮不是传统的<code>input</code>标签，是一个<code>button</code>，不能通过直接<code>send_key</code>来指定文件，只能通过模拟选择文件上传。</p><h2 id="解决方案">解决方案</h2><p>点击button会弹出OS级别的弹框，并将窗口焦点聚焦于弹框中，因此只需要模拟输入文件路径，并点击<code>打开</code>按钮，即可完成选择文件上传的功能。</p><p><img src="http://qiniu.rainna.xyz/image-20220925202318296.png" alt="image-20220925202318296"></p><blockquote><p>Ubuntu中，在文件管理器中输入<code>ctrl</code>+<code>l</code>出现路径输入框，输入完毕，输入<code>enter</code>或者<code>alt</code>+<code>o</code>表示打开文件，相当于点击右上角的<code>打开(O)</code></p><p><img src="http://qiniu.rainna.xyz/image-20220926165308535.png" alt="image-20220926165308535"></p></blockquote><p>对于Windows系统，可以使用<code>pywin32</code>或者<code>SendKeys等库完成上述流程，但是对于Linux系统似乎没有看到类似的博客，遂一通搜索找到了一个</code>pyqutogui`的跨平台的自动化库，可以程序控制键鼠的输入。具体API参考<a href="https://github.com/asweigart/pyautogui">官方文档</a>。</p><h2 id="具体实现">具体实现</h2><p>不多说，直接上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Ubuntu_autogui_uploader</span>(<span class="hljs-params">self, filk_path</span>):<br>    <span class="hljs-keyword">import</span> pyautogui<br>    pyautogui.hotkey(<span class="hljs-string">&#x27;alt&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>)<br>    pyautogui.typewrite(filk_path)<br>    <span class="hljs-comment"># 防止中文输入法</span><br>    pyautogui.press(<span class="hljs-string">&quot;enter&quot;</span>)<br>    pyautogui.hotkey(<span class="hljs-string">&#x27;alt&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>)<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>这里又输入了<code>enter</code>又使用了<code>alt</code>+<code>o</code>是为了防止输入法为中文时，输入字符没有正确进入输入框，追加一个<code>enter</code>确保进入，若能保证为英文输入法，可以删去这一行。</p></li></ul><p>迁移到Windows也很简单，Windows相比Ubuntu少了一步<code>Ctrl</code>+<code>L</code>，默认焦点就在输入框上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">win_autogui_uploader</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">import</span> pyautogui<br>    pyautogui.typewrite(self.image_tar_path)<br>    <span class="hljs-comment"># 防止中文输入法</span><br>    pyautogui.press(<span class="hljs-string">&quot;enter&quot;</span>)<br>    pyautogui.hotkey(<span class="hljs-string">&#x27;alt&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>虽然可以实现自动上传，但是基于GUI实现的上传，需要保证出现上传弹窗时焦点是在弹窗上，也就是鼠标不能点击其他区域，或出现其他高等级的弹窗导致窗口失焦，否则会导致文本无法输入，而导致自动化流程中断。</p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>linux</tag>
      
      <tag>Selenium</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu配置时间服务器(TCP版)</title>
    <link href="/2022/10/05/2022-10-05-Ubuntu%E9%85%8D%E7%BD%AE%E6%97%B6%E9%97%B4%E6%9C%8D%E5%8A%A1%E5%99%A8(TCP%E7%89%88)/"/>
    <url>/2022/10/05/2022-10-05-Ubuntu%E9%85%8D%E7%BD%AE%E6%97%B6%E9%97%B4%E6%9C%8D%E5%8A%A1%E5%99%A8(TCP%E7%89%88)/</url>
    
    <content type="html"><![CDATA[<h2 id="问题提出">问题提出</h2><p>最近由于二十大要召开，用的物联网卡又只能走TCP访问指定IP的服务器，为了同步时间，需要在服务器搭建一个时间服务器，主流都是使用udp的ntp协议，但是由于不可抗力，无法使用udp，遂只能使用支持TIME协议的服务器，一通搜索终于找到支持rdate的服务器搭建方式：<strong>xinetd</strong>。这个东西其实不是用来搭建时间服务器的，貌似是个后台服务管理的程序。</p><p><img src="http://qiniu.rainna.xyz/image-20220929115746809.png" alt="image-20220929115746809"></p><h2 id="具体操作">具体操作</h2><h3 id="安装xinetd">安装xinetd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update<br>sudo apt install xinetd<br></code></pre></td></tr></table></figure><h3 id="修改配置文件">修改配置文件</h3><p><code>xinetd</code>的配置文件位置在<code>/etc/xinetd.d</code>下</p><p>Ubuntu下的配置文件如图：</p><p><img src="http://qiniu.rainna.xyz/image-20220929120546359.png" alt="image-20220929120546359"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/xinetd.d/time<br></code></pre></td></tr></table></figure><p>内容如图：</p><p><img src="http://qiniu.rainna.xyz/image-20220929120853257.png" alt="image-20220929120853257"></p><p>修改第一个<code>disable  = yes</code>为<code>disable = no</code>即可，第二个是udp协议，不需要修改，修改完毕如图。</p><p><img src="http://qiniu.rainna.xyz/image-20220929120812549.png" alt="image-20220929120812549"></p><h3 id="启动xinetd服务">启动xinetd服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service xinetd restart<br></code></pre></td></tr></table></figure><h3 id="查看是否启动成功">查看是否启动成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service xinetd status<br></code></pre></td></tr></table></figure><p><img src="http://qiniu.rainna.xyz/image-20220929121106859.png" alt="image-20220929121106859"></p><p>若<code>start working</code>是**<u>1</u>** available service，则表示启动成功。</p><h3 id="验证">验证</h3><p>使用<code>rdate</code>查看能否正常访问时间服务。</p><ol><li class="lvl-3"><p>安装<code>rdate</code>： <code>sudo apt install rdate</code></p></li><li class="lvl-3"><p>访问时间服务器： <code>sudo rdate -p localhost</code></p><ul class="lvl-2"><li class="lvl-5"><p>这里是在服务器本地测试是否成功，如果没问题会输出如下结果</p><p><img src="http://qiniu.rainna.xyz/image-20220929121454909.png" alt="image-20220929121454909"></p></li></ul></li><li class="lvl-3"><p>外网测试：<code>sudo rdate -p &#123;IP&#125;</code> 这里的IP是服务器的IP，如果显示连接拒绝，多半是防火墙或者安全组<strong>37</strong>端口没放开，前往对应的云服务提供商控制台开放37端口 TCP访问权限即可，另外也需要本地防火墙允许通过。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>环境部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Geoserver安装配置GDAL扩展</title>
    <link href="/2022/06/29/2022-06-29-geoserver-gdal/"/>
    <url>/2022/06/29/2022-06-29-geoserver-gdal/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>按照<a href="https://docs.geoserver.org/stable/en/user/data/raster/gdal.html#installing-gdal-extension">官网</a>和一些<a href="https://blog.csdn.net/ys_ys_y/article/details/106499154">博客</a>的操作流程安装GDAL扩展后，发现创建数据存储时没有出现img等格式</p><p>查看geoserver控制台，发现加载GDAL的dll文件时出错</p><p><img src="http://qiniu.rainna.xyz/202206290856915.png" alt="image-20220629085619718"></p><blockquote><p>截图是在总结问题时截的，配置完成后似乎不能复现原来的bug，日志略有不同</p></blockquote><h2 id="原因分析">原因分析</h2><p>当时下载的预编译GDAL库来自<a href="https://www.gisinternals.com/release.php">gisinternals</a>，可以看到其<code>&#123;GDAL_HOME&#125;/bin/gdal/java</code>下的dll并不是gdaljni.dll</p><p><img src="http://qiniu.rainna.xyz/202206290910407.png" alt="image-20220629091008309"></p><p>而是<code>gdalalljni.dll</code>，重命名成<code>gdaljni.dll</code>，并复制一份相同的并命名为<code>gdalconstjni.dll</code></p><blockquote><p>gdal库含有gdal和gdalconst两个模块，猜测gdalall是将两个模块放在一起了，但是geoserver可能是按文件名加载的，所有会出现上述问题。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境部署</tag>
      
      <tag>geoserver</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker基础</title>
    <link href="/2022/04/17/2022-04-17-Docker_basic/"/>
    <url>/2022/04/17/2022-04-17-Docker_basic/</url>
    
    <content type="html"><![CDATA[<h2 id="常用命令">常用命令</h2><p><img src="C:%5CUsers%5Ci%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210204164016051.png" alt="image-20210204164016051"></p><h3 id="查看信息">查看信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看运行容器</span><br>docker ps<br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数</span><br>-a # 显示所有容器(不论是否在运行)<br>-p# 静默显示，只显示容器ID<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看容器内进程信息</span><br>docker top 容器ID<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看本地镜像信息</span><br>docker images<br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数</span><br>-q # 静默显示，只显示ID<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看容器日志信息(如终端打印信息)</span><br>docker logs [Opt] xxx<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">返回容器详细信息的JSON数据格式</span><br>docker inspect 容器ID<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看容器内存使用情况</span><br>docker stats<br></code></pre></td></tr></table></figure><h3 id="镜像命令">镜像命令</h3><h4 id="查找搜索">查找搜索</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">从DockerHub上搜索指定镜像名</span><br>docker search [Opt] 镜像名<br><span class="hljs-meta prompt_"># </span><span class="language-bash">常用参数</span><br>-f 过滤<br></code></pre></td></tr></table></figure><h4 id="添加">添加</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull 镜像名[:标签]  # 所谓标签就是版本号，不加默认latest，即最新版<br></code></pre></td></tr></table></figure><h4 id="删除">删除</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rmi 镜像名[:标签]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">批量删除</span><br>docker rmi $(docker images -q)<br></code></pre></td></tr></table></figure><h3 id="容器命令">容器命令</h3><h4 id="运行">运行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">运行新容器</span><br>docker run 镜像名<br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数介绍</span><br>-d      # 静默模式，后台运行<br>    -p(小写) 宿主机端口:容器端口   # 建立宿主机和容器指定端口映射<br>    -P(大写)    # 随机端口映射<br>    -it     # 交互式<br>    --name     # 容器命名<br>   <br><span class="hljs-meta prompt_"># </span><span class="language-bash">容器暂停/停止时，重新运行</span><br>docker start 容器ID<br>docker restart 容器ID<br></code></pre></td></tr></table></figure><h4 id="退出">退出</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">处于容器终端时</span><br>exit  # 退出并停止<br>Ctrl + P + Q  # 退出但不停止<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">处于宿主机终端时：</span><br>docker stop 容器ID<br></code></pre></td></tr></table></figure><h4 id="进入">进入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker attach 容器ID<br><br>docker exec 容器ID<br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数</span><br>-it 进入容器获得交互式窗口<br></code></pre></td></tr></table></figure><h4 id="提交">提交</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker commit -a 作者 -m 提交注释信息 容器ID:tag<br><span class="hljs-meta prompt_"># </span><span class="language-bash">可以理解为Git的commit或者虚拟机的快照</span><br></code></pre></td></tr></table></figure><h4 id="删除-2">删除</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm 容器ID<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">批量删除</span><br>docker rm $(docker ps -qa)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">$() 是将里面命令的返回值作为参数传给外面的命令</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker ps -aq</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-a 是显示所有容器(不论是否在运行)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-q 是静默显示，即只显示容器ID</span><br></code></pre></td></tr></table></figure><h3 id="示例">示例</h3><h4 id="Nginx">Nginx</h4><blockquote><p>Docker部署运行<strong>Nginx</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. docker search nginx  搜索镜像</span><br><span class="hljs-comment"># 2. docker pull nginx    下载镜像</span><br>    i@ubuntu:/$ docker pull nginx<br>    <br>    Using default tag: latest<br>    latest: Pulling from library/nginx<br>    a076a628af6f: Pull complete <br>    0732ab25fa22: Pull complete <br>    d7f36f6fe38f: Pull complete <br>    f72584a26f32: Pull complete <br>    7125e4df9063: Pull complete <br>    Digest: sha256:10b8cc432d56da8b61b070f4c7d2543a9ed17c2b23010b43af434fd40e2ca4aa<br>    Status: Downloaded newer image <span class="hljs-keyword">for</span> nginx:latest<br>    docker.io/library/nginx:latest<br><span class="hljs-comment"># 3. docker run 运行测试</span><br><br>    <span class="hljs-comment"># -d 后台运行</span><br>    <span class="hljs-comment"># --name 自定义容器名称</span><br>    <span class="hljs-comment"># -p 指定端口(宿主机端口:容器端口) 访问宿主机3344端口会映射到容器内的80端口</span><br>    <span class="hljs-comment">### docker run -d --name nginx01 -p 3344:80 nginx</span><br><br>    i@ubuntu:/$ docker run -d --name nginx01 -p 3344:80 nginx<br>    <br>    360d290c713dc77fb93649bf33f3d7b14730cc41b0f6d5484985bd94206b6658<br>    i@ubuntu:/$ docker ps<br>    CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                  NAMES<br>    360d290c713d   nginx     <span class="hljs-string">&quot;/docker-entrypoint.…&quot;</span>   4 seconds ago   Up 3 seconds   0.0.0.0:3344-&gt;80/tcp   nginx01<br><br><span class="hljs-comment">## 测试nginx运行情况，访问宿主机3344端口，映射到容器的80端口</span><br>i@ubuntu:/$ curl localhost:3344<br><br>    &lt;!DOCTYPE html&gt;<br>    &lt;html&gt;<br>    &lt;<span class="hljs-built_in">head</span>&gt;<br>    &lt;title&gt;Welcome to nginx!&lt;/title&gt;<br>    &lt;style&gt;<br>        body &#123;<br>            width: 35em;<br>            margin: 0 auto;<br>            font-family: Tahoma, Verdana, Arial, sans-serif;<br>        &#125;<br>    &lt;/style&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>    &lt;h1&gt;Welcome to nginx!&lt;/h1&gt;<br>    &lt;p&gt;If you see this page, the nginx web server is successfully installed and<br>    working. Further configuration is required.&lt;/p&gt;<br><br>    &lt;p&gt;For online documentation and support please refer to<br>    &lt;a href=<span class="hljs-string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;<br>    Commercial support is available at<br>    &lt;a href=<span class="hljs-string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;<br><br>    &lt;p&gt;&lt;em&gt;Thank you <span class="hljs-keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;<br>    &lt;/body&gt;<br>    &lt;/html&gt;<br><br><span class="hljs-comment"># 4. 外网访问</span><br>浏览器输入 虚拟机Ip:3344即可进入Nginx欢迎页面<br></code></pre></td></tr></table></figure><h4 id="tomcat">tomcat</h4><blockquote><p>Docker 部署 <strong>tomcat</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. docker search tomcat  搜索镜像</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. docker pull tomcat    下载镜像</span><br>    i@ubuntu:/$ docker pull tomcat<br>    <br>    Using default tag: latest<br>    latest: Pulling from library/tomcat<br>    Digest: sha256:94cc18203335e400dbafcd0633f33c53663b1c1012a13bcad58cced9cd9d1305<br>    Status: Downloaded newer image for tomcat:latest<br>    docker.io/library/tomcat:latest<br>    <br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. docker run 运行测试</span><br><br>    i@ubuntu:/$ docker run -d --name tomcat01 -p 3355:8080 tomcat<br>    <br>    924d5978de969899582f49c62d35de6886e84115fc62571d3f94e3eff6117023<br>    i@ubuntu:/$ docker ps<br>    CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                    NAMES<br>    924d5978de96   tomcat    &quot;catalina.sh run&quot;        17 seconds ago   Up 16 seconds   0.0.0.0:3355-&gt;8080/tcp   tomcat01<br>    360d290c713d   nginx     &quot;/docker-entrypoint.…&quot;   58 minutes ago   Up 58 minutes   0.0.0.0:3344-&gt;80/tcp     nginx01<br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 测试nginx运行情况，访问宿主机3344端口，映射到容器的80端口</span></span><br>    i@ubuntu:/$ curl localhost:3355<br>    <br>    &lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;title&gt;HTTP Status 404 – Not Found&lt;/title&gt;&lt;style type=&quot;text/css&quot;&gt;body &#123;font-family:Tahoma,Arial,sans-serif;&#125; h1, h2, h3, b &#123;color:white;background-color:#525D76;&#125; h1 &#123;font-size:22px;&#125; h2 &#123;font-size:16px;&#125; h3 &#123;font-size:14px;&#125; p &#123;font-size:12px;&#125; a &#123;color:black;&#125; .line &#123;height:1px;background-color:#525D76;border:none;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 404 – Not Found&lt;/h1&gt;&lt;hr class=&quot;line&quot; /&gt;&lt;p&gt;&lt;b&gt;Type&lt;/b&gt; Status Report&lt;/p&gt;&lt;p&gt;&lt;b&gt;Description&lt;/b&gt; The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;/p&gt;&lt;hr class=&quot;line&quot; /&gt;&lt;h3&gt;Apache Tomcat/9.0.41&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 测试结果返回404</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 是因为阿里云的镜像默认是最小镜像，需要把webapps.dist下的内容放到webapps下，重新访问成功</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4. 外网访问</span><br>浏览器输入 虚拟机Ip:3355即可进入tomcat欢迎页面<br></code></pre></td></tr></table></figure><h4 id="elasticsearch">elasticsearch</h4><blockquote><p>Docker 部署 <strong>elasticsearch</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. docker run 安装并运行</span><br>    i@ubuntu:/$ docker run -d --name elasticsearch01 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.6.2 <br>    <br>    Unable to find image &#x27;elasticsearch:7.6.2&#x27; locally<br>    7.6.2: Pulling from library/elasticsearch<br>    ab5ef0e58194: Pull complete <br>    c4d1ca5c8a25: Pull complete <br>    941a3cc8e7b8: Pull complete <br>    43ec483d9618: Pull complete <br>    c486fd200684: Pull complete <br>    1b960df074b2: Pull complete <br>    1719d48d6823: Pull complete <br>    Digest: sha256:1b09dbd93085a1e7bca34830e77d2981521a7210e11f11eda997add1c12711fa<br>    Status: Downloaded newer image for elasticsearch:7.6.2<br>    c83ecb6c53ca572eaf59f152ccf7d1743b9733a8ad428f12ff6094f783417c7d<br>    i@ubuntu:/$ docker ps<br>    CONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS          PORTS                                            NAMES<br>    c83ecb6c53ca   elasticsearch:7.6.2   &quot;/usr/local/bin/dock…&quot;   27 seconds ago   Up 26 seconds   0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp   elasticsearch01<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># es暴露的端口较多</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># es运行十分占用内存</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.  docker stats 查看内存占用情况</span><br>    i@ubuntu:/$ docker stats<br><br>    CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O       BLOCK I/O        PIDS<br>    c83ecb6c53ca   elasticsearch01   0.09%     1.244GiB / 7.221GiB   17.23%    3.64kB / 0B   2.23MB / 737kB   53<br><br>    CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O       BLOCK I/O        PIDS<br>    c83ecb6c53ca   elasticsearch01   0.09%     1.244GiB / 7.221GiB   17.23%    3.64kB / 0B   2.23MB / 737kB   53<br><br>    CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O       BLOCK I/O        PIDS<br>    c83ecb6c53ca   elasticsearch01   0.63%     1.244GiB / 7.221GiB   17.23%    3.64kB / 0B   2.23MB / 737kB   53<br><br></code></pre></td></tr></table></figure><h2 id="Docker数据卷">Docker数据卷</h2><h3 id="概述">概述</h3><p>为了连接宿主机的文件和容器内的文件，实现容器的持久化。</p><p>容器与容器间也能实现文件共享。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 挂载目录 -v 主机目录:容器目录</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将主机的/home/docker/centos目录和容器内的/home目录双向关联</span><br>    i@ubuntu:~$ docker run -v /home/docker/centos:/home --name centos01 -it centos<br><br>    [root@966a70ddfc68 /]# i@ubuntu:~$ <br>    i@ubuntu:~$ docker ps<br>    CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES<br>    966a70ddfc68   centos    &quot;/bin/bash&quot;   18 seconds ago   Up 17 seconds             centos01<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看容器信息</span><br>i@ubuntu:~$ docker inspect centos01<br></code></pre></td></tr></table></figure><p><img src="C:%5CUsers%5Ci%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210202154340220.png" alt="image-20210202154340220"></p><p>​Source是宿主机目录，Destination是容器内地址</p><p><img src="C:%5CUsers%5Ci%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210202155113694.png" alt="image-20210202155113694"></p><p>测试–&gt;数据同步，容器内目录内容改变，宿主机内也改变。反之亦然。即实现了容器与宿主机文件的双向绑定。</p><h3 id="实战：安装MySQL">实战：安装MySQL</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">官方安装启动命令 -e 配置环境，这里需要设置密码</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 启动MySQL</span><br>-p 端口映射<br>-v 卷挂载<br>-e 环境设置<br>-d 后台启动<br>    i@ubuntu:/$ docker run -p 3310:3306 -v /home/docker/mysql/conf:/etc/mysql/conf.d -v /home/docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=1 --name mysql01 -d mysql:8.0<br><br>    e0508dc55a3b002145b1d7a32a93b84dc9dbdbdb448b77179f075fcc9c48b518<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 在本机用navicat连接数据库测试是否连通--&gt;成功</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 删除容器测试宿主机目录内容是否还在</span><br>    i@ubuntu:/home/docker/mysql/data$ docker rm -f mysql01 <br>    mysql01<br>    i@ubuntu:/home/docker/mysql/data$ ls<br>     auto.cnf        ca.pem               ibdata1         mysql.ibd            sys<br>     binlog.000001   client-cert.pem      ib_logfile0     performance_schema   undo_001<br>     binlog.000002   client-key.pem       ib_logfile1     private_key.pem      undo_002<br>     binlog.000003  &#x27;#ib_16384_0.dblwr&#x27;   ibtmp1          public_key.pem<br>     binlog.index   &#x27;#ib_16384_1.dblwr&#x27;  &#x27;#innodb_temp&#x27;   server-cert.pem<br>     ca-key.pem      ib_buffer_pool       mysql           server-key.pem<br></code></pre></td></tr></table></figure><p>发现容器删除后，挂载到本地的数据卷还存在，实现了容器数据的持久化！</p><h3 id="匿名挂载与具名挂载">匿名挂载与具名挂载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 匿名挂载，在-v时不指定主机目录，只指定容器目录</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-v /etc/nginx</span><br>i@ubuntu:~$ docker run -d -v /etc/nginx --name nginx02 nginx<br>9163461b8c472e85cb16b1662d35f6d97853e5b7a94441795461cb8dc27b3efb<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker volume 查看卷信息</span><br>    i@ubuntu:~$ docker volume ls<br>    DRIVER    VOLUME NAME<br>    local     fa318d942f443d4c18685cdf912e1b67d872b2eddd5ddf3952b94b79b0f0ecbf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">发现容器卷信息为16进制乱码</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 具名挂载，在-v时不指定宿主机目录，但取别名来替代主机目录</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-v 卷名:容器目录</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-v named-nginx:/etc/nginx</span><br>    i@ubuntu:~$ docker run -d -v named-nginx:/etc/nginx --name nginx03 nginx<br>    a63817405a648af76e80d56d3e690245cba223af14fc9c9ee564356760d42872<br><br>    i@ubuntu:~$ docker volume ls<br>    DRIVER    VOLUME NAME<br>    local     named-nginx<br>    <br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过docker volume inspect 卷名来查看卷的具体信息</span><br>    i@ubuntu:~$ docker volume inspect named-nginx <br>[<br>    &#123;<br>        &quot;CreatedAt&quot;: &quot;2021-02-02T18:31:06+08:00&quot;,<br>        &quot;Driver&quot;: &quot;local&quot;,<br>        &quot;Labels&quot;: null,<br>        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/named-nginx/_data&quot;,  # 存放地址<br>        &quot;Name&quot;: &quot;named-nginx&quot;,<br>        &quot;Options&quot;: null,<br>        &quot;Scope&quot;: &quot;local&quot;<br>    &#125;<br>]<br></code></pre></td></tr></table></figure><p>所有Docker容器内的卷，没有指定，目录的情况下都是在宿主机<code>/var/lib/docker/volumes</code>目录下</p><p>大多数情况中我们使用的都是<em><strong>具名挂载</strong></em>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看宿主机中的卷目录</span><br>i@ubuntu:/var/lib/docker/volumes$ ls<br>5262e7fffc05ca7528ea1c22269aaf1c4a7c480ef9cfbf58f4e8f784129a7318  metadata.db<br>backingFsBlockDev                                                 named-nginx<br>fa318d942f443d4c18685cdf912e1b67d872b2eddd5ddf3952b94b79b0f0ecbf<br></code></pre></td></tr></table></figure><p><em><strong>挂载总结：</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">-v 容器内路径  # 匿名挂载<br>-v 卷名:容器内路径      # 具名挂载<br>-v /宿主机路径:容器路径  # 指定路径挂载<br></code></pre></td></tr></table></figure><p><em><strong>拓展：</strong></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">-v 容器内路径:ro或rw  改变读写权限</span><br>ro readonly # 只读<br>rw readwrite# 读写<br>docker run -d -P --name nginx04 -v nginx3:/etc/nginx:ro nginx<br>docker run -d -P --name nginx04 -v nginx3:/etc/nginx:rw nginx<br><span class="hljs-meta prompt_"># </span><span class="language-bash">只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作的！</span><br></code></pre></td></tr></table></figure><h3 id="DockerFile挂载">DockerFile挂载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建编写dockerfile脚本</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">dockerfile内容  命令(大写) 参数</span><br>FROM centos  # 以centos为基础镜像<br>  <br>VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]  # 用于将生成的镜像自动创建两个目录匿名挂载到宿主机<br><br>CMD echo &quot;-----end-----&quot;<br><br>CMD /bin/bash<br><span class="hljs-meta prompt_"># </span><span class="language-bash">这里每个命令就是镜像中的一层</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通过dockerfile打包生成镜像</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker build [OPTIONS] PATH | URL | -</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-f 指定通过哪个dockerfile</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-t 生成镜像名称</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">. 为PATH路径，即为当前路径</span><br>i@ubuntu:~/docker-test-volume$ docker build -f dockerfile1 -t i/centos:0.1 .<br>Sending build context to Docker daemon  2.048kB<br>Step 1/4 : FROM centos<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">300e315adb2f</span><br>Step 2/4 : VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> bbef076d89be</span><br>Removing intermediate container bbef076d89be<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">61ade211504a</span><br>Step 3/4 : CMD echo &quot;-----end-----&quot;<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> c56dd7e6c8e0</span><br>Removing intermediate container c56dd7e6c8e0<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">72d1734ecb46</span><br>Step 4/4 : CMD /bin/bash<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> a28419438715</span><br>Removing intermediate container a28419438715<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">54288e8680c8</span><br>Successfully built 54288e8680c8<br>Successfully tagged i/centos:0.1<br><br></code></pre></td></tr></table></figure><p>启动自己写的容器</p><p><img src="C:%5CUsers%5Ci%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210202194248259.png" alt="image-20210202194248259"></p><p>这个目录就是我们生成镜像的时候自动挂载的。</p><p><img src="C:%5CUsers%5Ci%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210202194802330.png" alt="image-20210202194802330"></p><h3 id="数据卷容器">数据卷容器</h3><p>实现容器间数据共享</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell">--volumes-from 容器ID   # 和指定容器一样的卷挂载<br><br>    i@ubuntu:~$ docker run -p 3310:3306 -v /home/docker/mysql/conf:/etc/mysql/conf.d -v /home/docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=1 --name mysql01 -d mysql:8.0<br>    c9092980b2f58f5fa76acd0375ba22510c074f624bbbc561cb3541ae7b479eda<br><br>    i@ubuntu:~$ docker run -p 3311:3306 --volumes-from mysql01 -e MYSQL_ROOT_PASSWORD=1 --name mysql02 -d mysql:8.0<br>    d8cac17a23eccc089ffa7b94259acaec253bb4618985467ec8095b44f9e18417<br><br>i@ubuntu:~$ docker inspect mysql02<br>...<br>        &quot;Mounts&quot;: [<br>            &#123;<br>                &quot;Type&quot;: &quot;bind&quot;,<br>                &quot;Source&quot;: &quot;/home/docker/mysql/conf&quot;,<br>                &quot;Destination&quot;: &quot;/etc/mysql/conf.d&quot;,<br>                &quot;Mode&quot;: &quot;&quot;,<br>                &quot;RW&quot;: true,<br>                &quot;Propagation&quot;: &quot;rprivate&quot;<br>            &#125;,<br>            &#123;<br>                &quot;Type&quot;: &quot;bind&quot;,<br>                &quot;Source&quot;: &quot;/home/docker/mysql/data&quot;,<br>                &quot;Destination&quot;: &quot;/var/lib/mysql&quot;,<br>                &quot;Mode&quot;: &quot;&quot;,<br>                &quot;RW&quot;: true,<br>                &quot;Propagation&quot;: &quot;rprivate&quot;<br>            &#125;<br>...<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显然mysql01与mysql02卷挂载的位置相同，数据共享</span><br></code></pre></td></tr></table></figure><h2 id="DockerFile">DockerFile</h2><h3 id="常用命令-2">常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM# 基础镜像，一切从这里开始构建<br>MAINTAINER# 镜像是谁写的，姓名+邮箱<br>RUN# 镜像构建的时候需要运行的命令<br>ADD# 如：tomcat镜像，就要添加tomcat压缩包！<br>WORKDIR# 镜像的工作目录  如docker run xxx /bin/bash 这个/bin/bash就是默认工作目录<br>VOLUME# 挂载的目录(匿名挂载) -v<br>EXPOSE# 保留端口配置 -p<br>ENV# 镜像构建的时候设置环境变量！ -v<br>ONBUILD# 当构建一个继承自该 DockerFile 的时候就会运行 ONBUILD 的指令。触发指令<br>COPY# 类似ADD，将我们文件拷贝到镜像中<br><br>CMD# 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代<br>ENTRYPOINT# 指定这个容器启动的时候要运行的命令，可以追加命令<br></code></pre></td></tr></table></figure><blockquote><p>CMD和ENTRYPOINT区别</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">CMD命令是不追加的，追加命令的是直接覆写原命令</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># dockerfile</span></span><br>FROM centos<br>CMD [&quot;ls&quot;,&quot;-a&quot;]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># build</span></span><br>i@ubuntu:~/myDockerFileDir$ docker build -f cmd-test -t cmd-test:0.1 .<br>Sending build context to Docker daemon  3.072kB<br>Step 1/3 : FROM centos<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">300e315adb2f</span><br>Step 2/3 : MAINTAINER i&lt;610253199@qq.com&gt;<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> f94ea5ad1cdf</span><br>Removing intermediate container f94ea5ad1cdf<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">c509dc7e705b</span><br>Step 3/3 : CMD [&quot;ls&quot;,&quot;-a&quot;]<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> bb3b07bce52d</span><br>Removing intermediate container bb3b07bce52d<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">f851b2c378d2</span><br>Successfully built f851b2c378d2<br>Successfully tagged cmd-test:0.1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># run</span></span> <br>i@ubuntu:~/myDockerFileDir$ docker run -it cmd-test:0.1 <br>.   .dockerenvdev  home  lib64       media  opt   root  sbinsys  usr<br>..  binetc  lib   lost+found  mnt    proc  run   srvtmp  var<br><span class="hljs-meta prompt_"># </span><span class="language-bash">直接追加-l会因为没有-l命令而报错</span><br>i@ubuntu:~/myDockerFileDir$ docker run -it cmd-test:0.1 -l<br>docker: Error response from daemon: OCI runtime create failed: container_linux.go:370: starting container process caused: exec: &quot;-l&quot;: executable file not found in $PATH: unknown.<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加一个命令会直接运行该命令而不允许dockerfile中的命令，即覆盖了</span><br>i@ubuntu:~/myDockerFileDir$ docker run -it cmd-test:0.1 ls -al<br>    total 56<br>    drwxr-xr-x   1 root root 4096 Feb  3 04:47 .<br>    drwxr-xr-x   1 root root 4096 Feb  3 04:47 ..<br>    -rwxr-xr-x   1 root root    0 Feb  3 04:47 .dockerenv<br>    lrwxrwxrwx   1 root root    7 Nov  3 15:22 bin -&gt; usr/bin<br>    drwxr-xr-x   5 root root  360 Feb  3 04:47 dev<br>    drwxr-xr-x   1 root root 4096 Feb  3 04:47 etc<br>    drwxr-xr-x   2 root root 4096 Nov  3 15:22 home<br>    lrwxrwxrwx   1 root root    7 Nov  3 15:22 lib -&gt; usr/lib<br>    lrwxrwxrwx   1 root root    9 Nov  3 15:22 lib64 -&gt; usr/lib64<br>    drwx------   2 root root 4096 Dec  4 17:37 lost+found<br>    drwxr-xr-x   2 root root 4096 Nov  3 15:22 media<br>    drwxr-xr-x   2 root root 4096 Nov  3 15:22 mnt<br>    drwxr-xr-x   2 root root 4096 Nov  3 15:22 opt<br>    dr-xr-xr-x 413 root root    0 Feb  3 04:47 proc<br>    dr-xr-x---   2 root root 4096 Dec  4 17:37 root<br>    drwxr-xr-x  11 root root 4096 Dec  4 17:37 run<br>    lrwxrwxrwx   1 root root    8 Nov  3 15:22 sbin -&gt; usr/sbin<br>    drwxr-xr-x   2 root root 4096 Nov  3 15:22 srv<br>    dr-xr-xr-x  13 root root    0 Feb  3 04:47 sys<br>    drwxrwxrwt   7 root root 4096 Dec  4 17:37 tmp<br>    drwxr-xr-x  12 root root 4096 Dec  4 17:37 usr<br>    drwxr-xr-x  20 root root 4096 Dec  4 17:37 var<br><br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ENTRYPOINT命令是追加的，增加的命令直接拼接在命令后</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># dockerfile</span></span><br>FROM centos<br>ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># build</span></span><br>i@ubuntu:~/myDockerFileDir$ docker build -f entrypoint-test -t entrypoint-test:0.1 .<br>Sending build context to Docker daemon  4.096kB<br>Step 1/2 : FROM centos<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">300e315adb2f</span><br>Step 2/2 : ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> c9d33a5f0b1b</span><br>Removing intermediate container c9d33a5f0b1b<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">f367bad8e69f</span><br>Successfully built f367bad8e69f<br>Successfully tagged entrypoint-test:0.1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># run</span></span><br>    i@ubuntu:~/myDockerFileDir$ docker run -it entrypoint-test:0.1 <br>    .   .dockerenvdev  home  lib64       media  opt   root  sbinsys  usr<br>    ..  binetc  lib   lost+found  mnt    proc  run   srvtmp  var<br><span class="hljs-meta prompt_"># </span><span class="language-bash">追加-l会直接拼接在<span class="hljs-built_in">ls</span> -a后，成为<span class="hljs-built_in">ls</span> -a -l</span><br>    i@ubuntu:~/myDockerFileDir$ docker run -it entrypoint-test:0.1 -l<br>    total 56<br>    drwxr-xr-x   1 root root 4096 Feb  3 04:55 .<br>    drwxr-xr-x   1 root root 4096 Feb  3 04:55 ..<br>    -rwxr-xr-x   1 root root    0 Feb  3 04:55 .dockerenv<br>    lrwxrwxrwx   1 root root    7 Nov  3 15:22 bin -&gt; usr/bin<br>    drwxr-xr-x   5 root root  360 Feb  3 04:55 dev<br>    drwxr-xr-x   1 root root 4096 Feb  3 04:55 etc<br>    drwxr-xr-x   2 root root 4096 Nov  3 15:22 home<br>    lrwxrwxrwx   1 root root    7 Nov  3 15:22 lib -&gt; usr/lib<br>    lrwxrwxrwx   1 root root    9 Nov  3 15:22 lib64 -&gt; usr/lib64<br>    drwx------   2 root root 4096 Dec  4 17:37 lost+found<br>    drwxr-xr-x   2 root root 4096 Nov  3 15:22 media<br>    drwxr-xr-x   2 root root 4096 Nov  3 15:22 mnt<br>    drwxr-xr-x   2 root root 4096 Nov  3 15:22 opt<br>    dr-xr-xr-x 411 root root    0 Feb  3 04:55 proc<br>    dr-xr-x---   2 root root 4096 Dec  4 17:37 root<br>    drwxr-xr-x  11 root root 4096 Dec  4 17:37 run<br>    lrwxrwxrwx   1 root root    8 Nov  3 15:22 sbin -&gt; usr/sbin<br>    drwxr-xr-x   2 root root 4096 Nov  3 15:22 srv<br>    dr-xr-xr-x  13 root root    0 Feb  3 04:55 sys<br>    drwxrwxrwt   7 root root 4096 Dec  4 17:37 tmp<br>    drwxr-xr-x  12 root root 4096 Dec  4 17:37 usr<br>    drwxr-xr-x  20 root root 4096 Dec  4 17:37 var<br><span class="hljs-meta prompt_"># </span><span class="language-bash">直接写命令会因为无法拼接识别报错</span><br>i@ubuntu:~/myDockerFileDir$ docker run -it entrypoint-test:0.1 ls -al<br>ls: cannot access &#x27;ls&#x27;: No such file or directory<br></code></pre></td></tr></table></figure><h3 id="实例">实例</h3><h4 id="构建自定义centos">构建自定义centos</h4><p>编写DockerFile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># DockerFile 内容</span><br><span class="hljs-keyword">FROM</span> centos<br><span class="hljs-keyword">MAINTAINER</span> i&lt;<span class="hljs-number">610253199</span>@qq.com&gt;  <span class="hljs-comment"># 作者信息</span><br><br><span class="hljs-keyword">ENV</span> MYPATH /usr/local  <span class="hljs-comment"># 环境变量</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$MYPATH</span><span class="hljs-comment"># 工作目录设置为环境变量的值</span></span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum -y install vim<span class="hljs-comment"># 安装vim</span></span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum -y install net-tools<span class="hljs-comment"># 安装ifconfig等命令</span></span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">12345</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$MYPATH</span></span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;----end----&quot;</span></span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> /bin/bash</span><br></code></pre></td></tr></table></figure><p>生成镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build -f dockerfile_cenos -t my_centos:0.1 .<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看镜像</span><br>i@ubuntu:~/myDockerFileDir$ docker images<br>REPOSITORY            TAG       IMAGE ID       CREATED              SIZE<br>my_centos             0.1       6c9e45e4e25e   About a minute ago   291MB<br>mysql                 8.0       c8562eaf9d81   2 weeks ago          546MB<br>tomcat                latest    040bdb29ab37   2 weeks ago          649MB<br>nginx                 latest    f6d0b4767a6c   3 weeks ago          133MB<br>centos                latest    300e315adb2f   8 weeks ago          209MB<br>portainer/portainer   latest    62771b0b9b09   6 months ago         79.1MB<br>elasticsearch         7.6.2     f29a1ee41030   10 months ago        791MB<br><br></code></pre></td></tr></table></figure><p>运行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">i@ubuntu:~/myDockerFileDir$ docker run -it my_centos:0.1 <br>[root@34369e08996c local]# pwd<br>/usr/local<br>[root@34369e08996c local]# vim<br>[root@34369e08996c local]# ifconfig<br>eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255<br>        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)<br>        RX packets 40  bytes 4396 (4.2 KiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 0  bytes 0 (0.0 B)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536<br>        inet 127.0.0.1  netmask 255.0.0.0<br>        loop  txqueuelen 1000  (Local Loopback)<br>        RX packets 0  bytes 0 (0.0 B)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 0  bytes 0 (0.0 B)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试发现vim,ifconfig等命令都可以使用</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">pwd</span>查看当前路径为/usr/local说明工作目录配置成功</span><br></code></pre></td></tr></table></figure><h4 id="构建自定义Tomcat">构建自定义Tomcat</h4><ol><li class="lvl-3"><p>准备镜像文件 tomcat、jdk压缩包</p></li><li class="lvl-3"><p>编写Dockerfile，建议命名<code>Dockerfile</code>，在build时会默认寻找文件名为Dockerfile的文件，这样可以不用<code>-f</code>指定文件。</p></li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> centos<br><span class="hljs-keyword">MAINTAINER</span> i&lt;<span class="hljs-number">610253199</span>@qq.com&gt;<br><span class="hljs-comment"># 添加文件</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> README.txt /usr/local/README.txt</span><br><span class="hljs-comment"># 添加并自动解压镜像文件</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> apache-tomcat-10.0.2.tar.gz /usr/local/</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> jdk-8u181-linux-x64.tar.gz /usr/local/</span><br><span class="hljs-comment"># 安装vim</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum -y install vim</span><br><span class="hljs-comment"># 添加默认工作目录</span><br><span class="hljs-keyword">ENV</span> MYPATH /usr/local<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$MYPATH</span></span><br><span class="hljs-comment"># 添加JAVA环境变量</span><br><span class="hljs-keyword">ENV</span> JAVA_HOME /usr/local/jdk1.<span class="hljs-number">8.0</span>_181<br><span class="hljs-keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br><span class="hljs-comment"># 添加tomcat环境变量</span><br><span class="hljs-keyword">ENV</span> CATALINA_HOME /usr/local/apache-tomcat-<span class="hljs-number">10.0</span>.<span class="hljs-number">2</span><br><span class="hljs-keyword">ENV</span> CATALINA_BASH /usr/local/apache-tomcat-<span class="hljs-number">10.0</span>.<span class="hljs-number">2</span><br><span class="hljs-comment"># 把对应环境变量加到PATH中</span><br><span class="hljs-keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin<br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><span class="hljs-comment"># 运行执行的命令</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> /usr/local/apache-tomcat-10.0.2/bin/startup.sh &amp;&amp; <span class="hljs-built_in">tail</span> -F /usr/local/apache-tomcat-10.0.2/bin/logs/catalina.out</span><br></code></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>生成镜像</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker build</span><br>i@ubuntu:~/build_tomcat$ docker build -t mytomcat .<br>Sending build context to Docker daemon    197MB<br>Step 1/15 : FROM centos<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">300e315adb2f</span><br>Step 2/15 : MAINTAINER i&lt;610253199@qq.com&gt;<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">c509dc7e705b</span><br>Step 3/15 : COPY README.txt /usr/local/README.txt<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">cde6702270df</span><br>Step 4/15 : ADD apache-tomcat-10.0.2.tar.gz /usr/local/<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">172b6cc45854</span><br>Step 5/15 : ADD jdk-8u181-linux-x64.tar.gz /usr/local/<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">f50c75f4c05e</span><br>Step 6/15 : RUN yum -y install vim<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">6620af0f8b06</span><br>Step 7/15 : ENV MYPATH /usr/local<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">6fef2d36c0c1</span><br>Step 8/15 : WORKDIR $MYPATH<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">862d2c7f896e</span><br>Step 9/15 : ENV JAVA_HOME /usr/local/jdk1.8.0_181<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">9be03dd12479</span><br>Step 10/15 : ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">82d1beb9c267</span><br>Step 11/15 : ENV CATALINA_HOME /usr/local/apache-tomcat-10.0.2<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">35b05ccd9550</span><br>Step 12/15 : ENV CATALINA_BASH /usr/local/apache-tomcat-10.0.2<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">d7e52e24b283</span><br>Step 13/15 : ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">2862504ab66b</span><br>Step 14/15 : EXPOSE 8080<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">c6e8d02b73ab</span><br>Step 15/15 : CMD /usr/local/apache-tomcat-10.0.2/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-10.0.2/bin/logs/catalina.out<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">5274c14736a4</span><br>Successfully built 5274c14736a4<br>Successfully tagged mytomcat:latest<br></code></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>运行测试</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker run</span><br>i@ubuntu:~/build_tomcat$ docker run -d -p 9090:8080 -v tomcatWebappsTest:/usr/local/apache-tomcat-10.0.2/webapps/test -v tomcatLogs:/usr/local/apache-tomcat-10.0.2/logs mytomcat<br>e5ce670aacf1613fa54d65feb13ff6a6da0b7afdb0a1386eb4e9ab47e5fc7619<br></code></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>访问测试</p></li></ol><p>修改宿主机下绑定的tomcatWebappsTest卷目录，尝试访问。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建jsp文件</span><br>i@ubuntu:/var/lib/docker/volumes/tomcatWebappsTest/_data$ cat index.jsp <br>&lt;html&gt;<br>    &lt;head&gt;<br>        &lt;title&gt;Hello World&lt;/title&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>        Hello World!&lt;br/&gt;<br>        &lt;% <br>        out.println(&quot;Your IP address is &quot; + request.getRemoteAddr()); <br>        %&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>外网访问<a href="http://192.168.169.137:9090/test/%EF%BC%8C%E6%88%90%E5%8A%9F%E8%BF%94%E5%9B%9E%E9%A1%B5%E9%9D%A2">http://192.168.169.137:9090/test/，成功返回页面</a></p><h3 id="提交镜像">提交镜像</h3><h4 id="阿里云仓库">阿里云仓库</h4><p><img src="C:%5CUsers%5Ci%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210204130056934.png" alt="image-20210204130056934"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker login</span><br>sudo docker login --username=rainnalv registry.cn-beijing.aliyuncs.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash"> docker tag</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">为指定镜像打标签</span><br>i@ubuntu:/home$ sudo docker tag 5274c14736a4 registry.cn-beijing.aliyuncs.com/learning-repo/mydocker:0.1<br><br>i@ubuntu:/home$ docker images<br>REPOSITORY                                                TAG       IMAGE ID       CREATED         SIZE<br>mytomcat                                                  latest    5274c14736a4   3 hours ago     664MB<br>registry.cn-beijing.aliyuncs.com/learning-repo/mydocker   0.1       5274c14736a4   3 hours ago     664MB<br>entrypoint-test                                           0.1       f367bad8e69f   25 hours ago    209MB<br>cmd-test                                                  0.1       f851b2c378d2   25 hours ago    209MB<br>centos                                                    latest    300e315adb2f   8 weeks ago     209MB<br>hello-world                                               latest    bf756fb1ae65   13 months ago   13.3kB<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker push</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">推送到镜像仓库</span><br>i@ubuntu:/home$ sudo docker push registry.cn-beijing.aliyuncs.com/learning-repo/mydocker:0.1 <br>The push refers to repository [registry.cn-beijing.aliyuncs.com/learning-repo/mydocker]<br>ea1f6c4c2a02: Pushed <br>1316cbfb01f7: Pushed <br>a16c51feab24: Pushed <br>c8e60c7df6da: Pushed <br>2653d992f4ef: Pushed <br>0.1: digest: sha256:8d4d128873da08d37eacb8ace8444e45b139c1682e2c5e69dd484c891f560087 size: 1373<br></code></pre></td></tr></table></figure><p><img src="C:%5CUsers%5Ci%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210204140400936.png" alt="image-20210204140400936"></p><p>镜像提交成功！</p><h4 id="DockerHub">DockerHub</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">登录</span><br>docker login<br><span class="hljs-meta prompt_"># </span><span class="language-bash">打tag</span><br>docker tag<br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交</span><br>docker push<br></code></pre></td></tr></table></figure><h2 id="Docker网络">Docker网络</h2><p>…</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本dos命令</title>
    <link href="/2022/04/17/2022-04-17-%E5%9F%BA%E6%9C%ACdos%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/04/17/2022-04-17-%E5%9F%BA%E6%9C%ACdos%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="选项：">选项：</h2><pre><code class="hljs">/a 所有文件(包括隐藏文件)/s 递归查找/q 不询问，直接执行</code></pre><h2 id="管道符（-）：">管道符（ | ）：</h2><pre><code class="hljs">some cmd | more 表示分页输出</code></pre><h3 id="1-echo">1. echo</h3><pre><code class="hljs">echo xxxx &gt; 文件名.拓展名在当前目录下创建`文件名.拓展名`文件，并写入`xxx`内容</code></pre><h3 id="2-copy">2. copy</h3><pre><code class="hljs">复制内容例1：copy con 文件名.拓展名      开始编写内容      ctrl+z 回车结束编写注1：复制cmd中的上下文到文件中例2：copy 文件1 目录或文件2注2：复制文件1到目录命名相同，     复制文件1内容到文件2</code></pre><h3 id="3-type">3. type</h3><pre><code class="hljs">type 文件名.拓展名查看文件内容</code></pre><h3 id="4-del">4. del</h3><pre><code class="hljs">del 文件名.拓展名删除指定文件。另：加选项可以实现递归删除    *为通配符， del *.* 表示删除所有文件</code></pre><h3 id="5-attrib">5. attrib</h3><pre><code class="hljs">attrib [+-][hsa...] 文件或目录- h 隐藏- s 系统保护文件- a 只读例：attrib +h 文件名         隐藏文件夹    attrib -h 文件名         取消隐藏文件夹    attrib +h +s +a 文件名              将文件夹隐藏并设为系统保护文件</code></pre><h3 id="6-生成文件">6. 生成文件</h3><pre><code class="hljs">fsutil file createnew 文件绝对路径 大小(单位：字节)例：fsutil file createnew test.txt 1024</code></pre><h4 id="7-修改文件关联性">7. 修改文件关联性</h4><pre><code class="hljs">assoc .txt=exefile         将.txt结尾的文件识别为可执行文件assoc .txt=txtfile           恢复</code></pre><h3 id="8-shutdown">8. shutdown</h3><pre><code class="hljs">选项：     -[s,r] 关机，重启    -f 强制关机，不会保存文件等    -t xx xx秒后执行    -c &quot;xx&quot; 窗口显示消息</code></pre><h4 id="9-move">9. move</h4><pre><code class="hljs">move 文件1 目录或文件2移动文件</code></pre><h3 id="10-ren">10. ren</h3><pre><code class="hljs">ren 原文件名 新文件名重命名文件</code></pre><h3 id="11-查看开放端口">11. 查看开放端口</h3><pre><code class="hljs">netstat -antelnet端口：23远程桌面协议RDP端口：3389</code></pre>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机三级笔记</title>
    <link href="/2022/04/17/2022-04-17-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%89%E7%BA%A7%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/04/17/2022-04-17-%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%89%E7%BA%A7%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="生命周期模型">生命周期模型</h2><ul class="lvl-0"><li class="lvl-2"><p>项目规划</p><ul class="lvl-2"><li class="lvl-4">系统规划与定义</li><li class="lvl-4">可行性分析<ul class="lvl-4"><li class="lvl-6">经济</li><li class="lvl-6">操作：人员、软硬件、工作环境等</li><li class="lvl-6">技术</li><li class="lvl-6">开发方案可行性</li></ul></li><li class="lvl-4">项目规划</li></ul></li><li class="lvl-2"><p>需求分析</p><ul class="lvl-2"><li class="lvl-4">数据需求分析</li><li class="lvl-4">性能需求分析</li></ul></li><li class="lvl-2"><p><strong><em>系统设计</em></strong></p><ul class="lvl-2"><li class="lvl-4">概念设计：数据库概念模型设计、系统总体设计</li><li class="lvl-4">系统总体设计：DBAS 体系结构设计，硬件平台选型和配置，应用软件结构设计，对业务规则进行初步设计，对关键技术进行选型和初步设计</li><li class="lvl-4">逻辑设计：数据库逻辑结构设计、数据库<code>事务概要</code>设计、应用程序概要设计。</li><li class="lvl-4">物理设计：数据库物理结构设计、数据库<code>事务详细设计</code>、应用程序详细设计。</li></ul></li><li class="lvl-2"><p>实现与部署</p><p>建立数据库结构，数据加载，事务和应用程序的编码与测试，系统集成、测试与试运行，系统部署</p></li><li class="lvl-2"><p>运行与维护</p></li></ul><h2 id="需求分析">需求分析</h2><p>过程：标识问题，建立需求模型，描述需求，确认需求</p><h4 id="需求">需求</h4><h6 id="功能需求">功能需求</h6><h6 id="性能需求">性能需求</h6><p>######## 性能指标</p><ul class="lvl-0"><li class="lvl-2"><p>数据操作响应时间</p></li><li class="lvl-2"><p>系统(数据)吞吐量：系统单位时间内所完成的事务或查询的数量，单位是 TPS。</p></li><li class="lvl-2"><p>允许并发访问的最大用户数</p><p>每 TPS 代价值，用于衡量系统性价比的指标。</p></li></ul><p>提高吞吐量：大事务分解为小事务，避免死锁，降低隔离性等级</p><h6 id="数据需求">数据需求</h6><p>数据模型三要素：</p><ul class="lvl-0"><li class="lvl-2"><p>数据结构</p></li><li class="lvl-2"><p>数据操作</p></li><li class="lvl-2"><p>数据完整性约束</p></li></ul><h6 id="其他需求">其他需求</h6><ul class="lvl-0"><li class="lvl-2"><p>存储需求：存储量</p></li><li class="lvl-2"><p>安全需求</p></li></ul><h4 id="建模方法">建模方法</h4><h6 id="IDEF0">IDEF0</h6><p>两种元素：</p><ul class="lvl-0"><li class="lvl-2"><p>矩形框（活动）</p></li><li class="lvl-2"><p>箭头</p></li></ul><p><img src="/assets/img/screenshots/2022-04-17-23-12-36.png" alt=""><br><img src="/assets/img/screenshots/2022-04-17-23-12-57.png" alt=""></p><h6 id="UML">UML</h6><h6 id="DFD">DFD</h6><p>四种基本元素：</p><ul class="lvl-0"><li class="lvl-2"><p>数据流：<code>箭头</code>。</p></li><li class="lvl-2"><p>处理：<code>矩形框</code>。数据逻辑处理，数据变换</p></li><li class="lvl-2"><p>数据存储：<code>圆角矩形框</code>。</p></li><li class="lvl-2"><p>外部项：<code>圆角框或平行四边形框</code>。数据来源和去路。（系统外部）</p></li></ul><p><strong>数据流图</strong></p><p>一个处理至少一个输入流和输出流</p><p>一个存储必须有流入和流出的数据</p><p>一个数据流至少一段是处理框</p><h2 id="数据库结构设计">数据库结构设计</h2><h4 id="概念设计">概念设计</h4><h6 id="数据建模方式">数据建模方式</h6><p>######## ER</p><p>######## IDEF1X</p><ul class="lvl-0"><li class="lvl-2"><p>实体集：</p><ul class="lvl-2"><li class="lvl-4">独立实体集：每个实例都能够被唯一标识而不决定于它与其它实体集的联系 –&gt; <code>矩形框</code></li><li class="lvl-4">从属实体集：实例依赖于其它实体集的实例 –&gt; <code>圆角矩形框</code></li></ul></li><li class="lvl-2"><p>联系：</p><ul class="lvl-2"><li class="lvl-4">标定型联系：由两个父实体集共同确定（外码有两个，并取决于不同的表） –&gt; <code>实线</code>连接单点，1 端是起点，n 端是终点(用实心圆点表示)</li><li class="lvl-4">非标定型联系：无需了解父端的实例 –&gt; <code>虚线</code>连接单点</li><li class="lvl-4">分类联系：是两个或多个实体集之间的联系，且在这些实体集中存在一个一般实体集，它的每一个实例都恰好与一个且仅一个分类实体集的一个实例相联系。例如，本科生和学生就属于分类联系。 –&gt; 单点<code>实线</code>两杠</li><li class="lvl-4">不确定联系：一个非确定联系又称为<strong>多对多</strong>联系，这种联系关联的两个实体集之间，任一实体集的一个实例都将对应另一实体集的 0 个、1 个或多个实例。 –&gt; 两点<code>实线</code></li></ul></li><li class="lvl-2"><p>一些结论：</p><ul class="lvl-2"><li class="lvl-4">标定型联系中，子女实体集总是从属实体集</li></ul></li></ul><h4 id="逻辑设计">逻辑设计</h4><p>关系模式设计、规范化处理</p><blockquote><p>例：视图设计</p></blockquote><h6 id="ER-图转关系模型">ER 图转关系模型</h6><p>关系模式数量 = 实体集数量 + 多对多联系数量</p><ul class="lvl-0"><li class="lvl-2"><p>实体转化为独立的模式</p></li><li class="lvl-2"><p>多对多联系转换为关系模式</p></li><li class="lvl-2"><p>一对多联系中一端并入到多端的实体中</p></li></ul><h6 id="范式">范式</h6><p><strong>函数依赖</strong></p><ul class="lvl-0"><li class="lvl-2"><p>完全函数依赖</p><ul class="lvl-2"><li class="lvl-4">例：学生基本信息表 R（学号，班级，姓名）假设不同的班级学号有相同的，班级内学号不能相同，在 R 关系中，（学号，班级）-&gt;（姓名），但是（学号）-&gt;(姓名)不成立，（班级）-&gt;(姓名)不成立，所以姓名完全函数依赖与（学号，班级）</li></ul></li><li class="lvl-2"><p>部分函数依赖</p><ul class="lvl-2"><li class="lvl-4">例：学生基本信息表 R 中（学号，身份证号，姓名）当然学号属性取值是唯一的，在 R 关系中，（学号，身份证号）-&gt;（姓名），（学号）-&gt;（姓名），（身份证号）-&gt;（姓名）；所以姓名部分函数依赖于（学号，身份证号）</li></ul></li><li class="lvl-2"><p>传递函数依赖</p><ul class="lvl-2"><li class="lvl-4">定义：设 X,Y,Z 是关系 R 中互不相同的属性集合，存在 X → Y(Y !→X),Y → Z，则称 Z 传递函数依赖于 X。</li><li class="lvl-4">例：在关系 R(学号 ,宿舍, 费用)中，(学号) -&gt; (宿舍),宿舍 !-&gt;学号，(宿舍) -&gt; (费用),费用 !-&gt; 宿舍，所以符合传递函数的要求。</li></ul></li><li class="lvl-2"><p>多值依赖</p><ul class="lvl-2"><li class="lvl-4">例如：职工表(职工编号，职工孩子姓名，职工选修课程)，在这个表中，同一个职工可能会有多个职工孩子姓名，同样，同一个职工也可能会有多个职工选修课程，即这里存在着多值事实，不符合第四范式。如果要符合第四范式，只需要将上表分为两个表，使它们只有一个多值事实，例如职工表一(职工编号，职工孩子姓名)，职工表二(职工编号，职工选修课程)，两个表都只有一个多值事实，所以符合第四范式。</li></ul></li></ul><p><strong>范式</strong></p><ul class="lvl-0"><li class="lvl-2"><p>第一范式 1NF：关系模式不包含多值属性</p></li><li class="lvl-2"><p>第二范式 2NF：消除非主属性对主码的部分函数依赖。实体的属性完全依赖于主关键字</p></li><li class="lvl-2"><p>第三范式 3NF：消除传递依赖。属性不依赖于其它非主属性</p></li><li class="lvl-2"><p>巴斯-科德范式 BCNF：消除对主码子集的依赖。任何非主属性不能对主键子集依赖</p></li><li class="lvl-2"><p>第四范式 4NF：消除多值依赖。</p></li></ul><p>一般来说，只有两个属性的表可以到达 4NF</p><h4 id="物理设计">物理设计</h4><p>物理结构角度要考虑的问题：文件的组织，文件的结构，文件的存取和索引技术。</p><p>内容：数据库逻辑模式描述，文件组织和存取设计，数据分布设计，确定系统配置，物理模式评估。</p><blockquote><p>例：去规范化、表分区</p></blockquote><h6 id="索引">索引</h6><ul class="lvl-0"><li class="lvl-2"><p>散列索引：不适合用于模糊(范围)查询，适合点查询</p></li><li class="lvl-2"><p>有序索引：适合模糊(范围)查询和点查询</p><ul class="lvl-2"><li class="lvl-4"><ul class="lvl-4"><li class="lvl-6">聚集索引(<code>CLUSTERED</code>)：索引文件中索引项排列顺序和数据排列顺序相一致</li><li class="lvl-6">非聚集索引(<code>NONCLUSTERED</code>)：反之。</li></ul></li><li class="lvl-4"><p>聚集索引跟适合范围查询</p></li><li class="lvl-4"><ul class="lvl-4"><li class="lvl-6">稠密索引：每个查找码都对应一个索引记录</li></ul></li><li class="lvl-4"><p>稀疏索引：部分查找码对应了索引记录</p></li><li class="lvl-4"><ul class="lvl-4"><li class="lvl-6">主索引：主码属性集上建立的索引</li></ul></li><li class="lvl-4"><p>辅索引：非主属性上建立的索引</p></li></ul></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4">唯一索引(<code>UNIQUE</code>)：索引属性列都是唯一的</li></ul></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4">单层索引</li><li class="lvl-4">多层索引</li></ul></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4"><p>复合索引：效率高于单一索引</p></li><li class="lvl-4"><p>单一索引</p></li></ul></li></ul><blockquote><p>适合索引使用条件：</p><ul class="lvl-1"><li class="lvl-2">在经常需要搜索的列上，可以加快搜索的速度</li><li class="lvl-2">在经常使用连接的列上（这些列主要是一些外键）可以加快连接的速度，在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的</li><li class="lvl-2">在经常使用<code>WHERE</code>子句中的列上面创建索引，加快条件的判断速度。</li><li class="lvl-2">Group by,Order by 也行，但 select 不行</li></ul><p>不适合使用的条件：</p><ul class="lvl-1"><li class="lvl-2"><p>对于那些在<code>查询中很少使用</code>或者参考的列不应该创建索引</p></li><li class="lvl-2"><p>对于那些只有<code>很少数据值的列</code>也不应该创建索引</p></li><li class="lvl-2"><p><code>经常更新的列</code>不适宜创建索引</p></li></ul></blockquote><blockquote><p>模糊查询不会访问索引</p></blockquote><h6 id="文件分类">文件分类</h6><ul class="lvl-0"><li class="lvl-2"><p>散列文件：散列存储方式组织的文件</p><ul class="lvl-2"><li class="lvl-4">优点：文件随机存放，无需排序，插入删除方便，存取速度快，不需要索引节省空间</li><li class="lvl-4">缺点：不能顺序存取</li></ul></li><li class="lvl-2"><p>堆文件</p><ul class="lvl-2"><li class="lvl-4">数据库中的一个基本表的数据量很少，并且插入删除更新频繁，可以采用堆文件</li><li class="lvl-4">优点：无需建立索引，维护代价低，在数据量少时定位文件记录时间短</li><li class="lvl-4">缺点：数据访问效率低</li></ul></li><li class="lvl-2"><p>顺序文件</p><ul class="lvl-2"><li class="lvl-4">如果用户的查询条件定义在查找码上，则顺序文件是比较适合的文件结构</li><li class="lvl-4">优点：支持顺序存取和随机存取，顺序存取快</li><li class="lvl-4">缺点：文件不能动态增长，不利于插入和删除</li></ul></li><li class="lvl-2"><p>聚集文件</p><ul class="lvl-2"><li class="lvl-4">将不同关系表中有关联关系的记录存储到一起。</li><li class="lvl-4">如果频繁使用多表连接的查询，可以考虑聚集文件来改善查询效率</li></ul></li></ul><h2 id="数据库应用系统功能设计与实施">数据库应用系统功能设计与实施</h2><p>B/S 结构的数据库应用系统：</p><ul class="lvl-0"><li class="lvl-2"><p>浏览器</p></li><li class="lvl-2"><p>应用服务器</p></li><li class="lvl-2"><p>数据库服务器</p></li></ul><p>按功能分为四个层次：</p><ul class="lvl-0"><li class="lvl-2"><p>表示层：用户交互</p></li><li class="lvl-2"><p>业务逻辑层</p><ul class="lvl-2"><li class="lvl-4">表示层的数据加工处理传递给数据访问层</li><li class="lvl-4">数据访问层获得的数据加工处理在表示层展示</li><li class="lvl-4">例：存储过程设计、<strong>构件设计</strong><ul class="lvl-4"><li class="lvl-6">构件设计<ul class="lvl-6"><li class="lvl-8">单一责任原则</li><li class="lvl-8">功能独立，减少重叠</li><li class="lvl-8">接口简单明确</li><li class="lvl-8">如果两个构件间的关系比较复杂，应考虑进一步进行模块划分（不能合并！）</li><li class="lvl-8">如果构件过于复杂，可以细分</li></ul></li></ul></li></ul></li><li class="lvl-2"><p>数据访问层：与数据库交互，提取或存入数据。</p></li><li class="lvl-2"><p>数据持久层：负责保存和管理应用系统数据。</p><ul class="lvl-2"><li class="lvl-4">例：数据完整性维护、调整数据文件组织结构、索引设计、存储结构设计</li></ul></li></ul><p>安全：</p><ul class="lvl-0"><li class="lvl-2"><p>用户身份鉴别</p></li><li class="lvl-2"><p>权限控制</p></li><li class="lvl-2"><p>视图控制</p></li></ul><h2 id="UML-2">UML</h2><h4 id="四层建模概念框架">四层建模概念框架</h4><p>​ <strong>下层的每个概念是上层的一个实例</strong></p><ul class="lvl-0"><li class="lvl-2"><p>元元模型层：组成了 UML 的最基本的元素“事物”</p></li><li class="lvl-2"><p>元模型层：组成 UML 的基本元素</p></li><li class="lvl-2"><p>模型层：组成 UML 的模型</p></li><li class="lvl-2"><p>用户模型层：其中的所有元素都是 UML 模型的实例</p></li></ul><h4 id="结构图">结构图</h4><p>定义：对系统静态结构建模，反应模块层次结构</p><ul class="lvl-0"><li class="lvl-2"><p>类图：展现一组类、接口和协作以及它们之间的关系的一种静态视图</p><ul class="lvl-2"><li class="lvl-4"><p>关系：</p><ul class="lvl-4"><li class="lvl-6">聚合：空心菱形实线</li><li class="lvl-6">组合(不能离开整体)：实心菱形实线</li><li class="lvl-6">实现：空心三角虚线</li><li class="lvl-6">泛化：空心实线三角，即继承</li></ul><p>一对多关系用：<code>1 : *</code>表示</p></li></ul></li><li class="lvl-2"><p>组件图</p></li><li class="lvl-2"><p>对象图</p></li><li class="lvl-2"><p>部署图</p></li></ul><h4 id="行为图">行为图</h4><p>定义：系统动态行为建模</p><ul class="lvl-0"><li class="lvl-2"><p>用例图</p><ul class="lvl-2"><li class="lvl-4">组成<ul class="lvl-4"><li class="lvl-6">用例、系统、角色</li></ul></li><li class="lvl-4">关系<ul class="lvl-4"><li class="lvl-6">扩展、包含、泛化（扩展、使用、组合）</li></ul></li></ul></li><li class="lvl-2"><p>交互图</p><ul class="lvl-2"><li class="lvl-4">顺序图：描述对象自身及对象间消息传递顺序的视图</li><li class="lvl-4">通信图(协作图)：交互图的一种，其中包含一组对象、对象之间的联系以及对象发送和接收的消息</li><li class="lvl-4">时间图</li><li class="lvl-4">交互概述图</li></ul></li><li class="lvl-2"><p>状态图：描述一个实体在发生一些事件时的状态变化情况</p></li><li class="lvl-2"><p>活动图</p></li></ul><p>顺序图表示递归过程，当一个操作调用它本身时，消息总是<code>同步</code>的</p><h2 id="SQL">SQL</h2><h4 id="谓词">谓词</h4><h6 id="EXIST">EXIST</h6><h4 id="集合操作符">集合操作符</h4><h6 id="UNION-UNIAN-ALL">UNION / UNIAN ALL</h6><p>请注意，UNION (ALL)内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。</p><p>######## UNION</p><p>合并两个或多个 SELECT 语句的结果集，会对结果去重。</p><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name(s) <span class="hljs-keyword">FROM</span> table_name1<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> column_name(s) <span class="hljs-keyword">FROM</span> table_name2<br><span class="hljs-comment">-- 获取表1、表2中所有的column_name，重复的只取一次</span><br></code></pre></td></tr></table></figure><p>######## UNIAN ALL</p><p>UNION ALL 命令和 UNION 命令几乎是等效的，不过 UNION ALL 命令会列出所有的值，即不去重。</p><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> E_Name <span class="hljs-keyword">FROM</span> Employees_China<br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> E_Name <span class="hljs-keyword">FROM</span> Employees_USA<br><span class="hljs-comment">-- 获取Employees_China和USA中所有的E_Name，不去重</span><br></code></pre></td></tr></table></figure><h6 id="IN">IN</h6><h6 id="EXCEPT">EXCEPT</h6><p>在第一个集合中存在，但是不存在于第二个集合中的数据。</p><h6 id="INTERSECT">INTERSECT</h6><p>两个集合的交集。</p><h4 id="语句">语句</h4><h6 id="DISTINCT">DISTINCT</h6><p>查询结果去重</p><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> Company <span class="hljs-keyword">FROM</span> Orders<br></code></pre></td></tr></table></figure><h6 id="TOP">TOP</h6><p>top n (with ties) 表示选取最多的前 n 个，with ties 要与 top 和 order by 一起使用，表示包含最后一行并列结果。</p><p>top n percent 表示选取查询结果的前%n 行。</p><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> top <span class="hljs-number">3</span> <span class="hljs-keyword">with</span> ties a, b, c  <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id<br><span class="hljs-comment">-- a值前3的记录(含并列)</span><br></code></pre></td></tr></table></figure><h6 id="CASE">CASE</h6><p>简单的条件赋值语句</p><p>语法结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CASE</span> 测试表达式<br><span class="hljs-keyword">When</span> 简单表达式<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 结果表达式<span class="hljs-number">1</span><br><span class="hljs-keyword">When</span> 简单表达式<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 结果表达式<span class="hljs-number">2</span><br><span class="hljs-keyword">When</span> 简单表达式<span class="hljs-number">3</span> <span class="hljs-keyword">THEN</span> 结果表达式<span class="hljs-number">3</span><br>[<span class="hljs-keyword">ELSE</span> 结果表达式]<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CASE</span> sex<br><span class="hljs-keyword">When</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;男&#x27;</span><br><span class="hljs-keyword">When</span> <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;女&#x27;</span><br><span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;爬开&#x27;</span><br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CASE</span><br><span class="hljs-keyword">WHEN</span> sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;男&#x27;</span><br><span class="hljs-keyword">WHEN</span> sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;女&#x27;</span><br><span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;爬开&#x27;</span><br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><h6 id="公用表达式">公用表达式</h6><h6 id="常用函数">常用函数</h6><p>######## DATEDIFF：计算时间差</p><h6 id="开窗函数">开窗函数</h6><h6 id="用户自定义函数">用户自定义函数</h6><p>######## 声明</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span>  <span class="hljs-comment">-- 定义</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">FUNCTION</span>  <span class="hljs-comment">-- 修改</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FUNCTION</span>  <span class="hljs-comment">-- 删除</span><br></code></pre></td></tr></table></figure><p>######## 标量函数</p><p>返回值可以是除了<code>timestamp</code>类型以外的所有数据类型</p><p>######## 内嵌表值函数</p><p>类似带参数的视图</p><ul class="lvl-0"><li class="lvl-2"><p>返回值是一个表，是查询语句的结果</p></li><li class="lvl-2"><p>使用时，一般放在查询的 FROM 子句中</p></li><li class="lvl-2"><p>通过 SELECT 语句填充函数返回的表值</p></li></ul><p>######## 多语句表值函数</p><ul class="lvl-0"><li class="lvl-2"><p>只有标量函数可以出现在 SELECT 语句目标列中，其余两个函数必须放在 SELECT 语句的 FROM 子句中</p></li></ul><h4 id="触发器">触发器</h4><h6 id="定义">定义</h6><p><code>FOR / AFTER</code>声明的触发器是后触发器，在语句操作完成，约束检查成功后执行</p><p><code>INSTEAD OF</code> 创建的是前触发器，执行触发器来替代语句</p><p>一张表可以有多个后触发器，当对于同一数据操作(如 UPDATE)只能有一个前触发器</p><p>视图不能定义触发器</p><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 后触发器</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> tri_name <span class="hljs-keyword">on</span> T <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">AS</span> ...<br><span class="hljs-comment">-- 前触发器</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> tri_name <span class="hljs-keyword">on</span> T INSTEAD <span class="hljs-keyword">OF</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">AS</span> ...<br></code></pre></td></tr></table></figure><h4 id="游标">游标</h4><h6 id="声明">声明</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 定义</span><br><span class="hljs-keyword">DECLARE</span> cursor_name <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span> <span class="hljs-comment">-- FOR！</span><br><span class="hljs-keyword">SELECT</span> ...<br></code></pre></td></tr></table></figure><h6 id="使用">使用</h6><p>如果声明游标时不指定 SCROLL 选项，使用 FETCH 时只能使用 NEXT</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">FETCH</span> [NEXT <span class="hljs-operator">|</span> PRIOR <span class="hljs-operator">|</span> <span class="hljs-keyword">FIRST</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">LAST</span> <span class="hljs-operator">|</span> ABSOLUTE&#123;n<span class="hljs-operator">|</span><span class="hljs-variable">@nvar</span>&#125; <span class="hljs-operator">|</span> RELATIVE&#123;n<span class="hljs-operator">|</span><span class="hljs-variable">@nvar</span>&#125;] <span class="hljs-keyword">FROM</span> cursor_name<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">NEXT：下一行</span><br><span class="hljs-comment">PRIOR：上一行</span><br><span class="hljs-comment">FIRST：第一行</span><br><span class="hljs-comment">LAST：最后一行</span><br><span class="hljs-comment">ABSOLUTE&#123;n|@nvar&#125;：如果n或@nvar为正，则返回从第一行开始数的第n行；如果n为负，则返回倒数第n行</span><br><span class="hljs-comment">RELATIVE&#123;n|@nvar&#125;：如果n为正，返回当前行往下数的第n行；如果n为负，则返回当前行往上数的第n行</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>判断游标数据提取状态的全局变量：<code>FETCH_STATUS</code></p><ul class="lvl-0"><li class="lvl-2"><p>=0 时：表明 FETCH 成功</p></li><li class="lvl-2"><p>=-1 时：表明 FETCH 失败，或行不在结果集中</p></li><li class="lvl-2"><p>=-2 时：提取的行不存在</p></li></ul><h4 id="存储过程">存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> PROC proc_name<br>@变量<span class="hljs-number">1</span>, @变量<span class="hljs-number">2</span> <span class="hljs-keyword">AS</span> <span class="hljs-keyword">sql</span>语句<br></code></pre></td></tr></table></figure><h2 id="安全权限管理">安全权限管理</h2><p>多角色权限冲突时，优先 DENY，其余权限取并集。</p><p>数据库用户可以分为：系统管理员、对象拥有者、普通用户</p><h4 id="主要角色及权限">主要角色及权限</h4><ul class="lvl-0"><li class="lvl-2"><p>服务器角色：</p></li></ul><p><img src="/assets/img/screenshots/2022-04-17-23-14-29.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>数据库角色：</p></li></ul><p><img src="/assets/img/screenshots/2022-04-17-23-14-44.png" alt=""></p><h4 id="权限管理">权限管理</h4><p>赋予权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> 权限名 <span class="hljs-keyword">ON</span> 库名(表名) <span class="hljs-keyword">TO</span> 用户名<br><span class="hljs-keyword">GRANT</span> 权限名 <span class="hljs-keyword">ON</span> 表名 <span class="hljs-keyword">TO</span> 用户名<br><br><span class="hljs-comment">-- 例：授予用户U1具有创建表和视图权限</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span>, <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> <span class="hljs-keyword">TO</span> 用户名<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在授权时，如果要使用户可以将授予他的权限转授他人，需要加上<code>WITH GRANT OPTION</code>选项</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> 权限名 <span class="hljs-keyword">ON</span> 表名 <span class="hljs-keyword">TO</span> 用户名 <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION<br></code></pre></td></tr></table></figure></li></ul><p>不允许用户获得某种权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">DENY 权限名 <span class="hljs-keyword">ON</span> 库名(表名) <span class="hljs-keyword">TO</span> 用户名<br>DENY 权限名 <span class="hljs-keyword">ON</span> 表名 <span class="hljs-keyword">TO</span> 用户名<br></code></pre></td></tr></table></figure><p>收回已经授予的权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">REVOKE</span> 权限名 <span class="hljs-keyword">ON</span> 表名 <span class="hljs-keyword">FROM</span> 用户名<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>使用 REVOKE 回收权限时，如果要将用户转授给其他用户的权限一起回收，要加入<code>CASCADE</code>选项</p></li></ul><h4 id="安全性分级">安全性分级</h4><ul class="lvl-0"><li class="lvl-2"><p>A：验证保护</p></li><li class="lvl-2"><p>B：强制保护</p></li><li class="lvl-2"><p>C：自主保护</p></li><li class="lvl-2"><p>D：最小保护</p></li></ul><h4 id="账户管理">账户管理</h4><h6 id="身份验证模式">身份验证模式</h6><p>两种身份验证方式：混合身份验证模式、Windows 身份验证</p><p>在 WIndows 身份验证模式下，不允许 sa 登录到 SQL server 服务器</p><p>不管哪种身份验证模式，Windows 的 Administrator 无需授权就能登录到 SQl server 服务器</p><h6 id="guest-账户">guest 账户</h6><p>没有对应的登录名</p><p>任何 SQL server 登录账户都可以访问 guest 用户的数据库</p><h6 id="创建账户">创建账户</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> LOGIN 用户名 <span class="hljs-keyword">WITH</span> PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;密码&#x27;</span><br></code></pre></td></tr></table></figure><h6 id="删除账户">删除账户</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> LOGIN 用户名<br></code></pre></td></tr></table></figure><h2 id="运行与维护">运行与维护</h2><p>例：引入汇总表</p><p>性能优化：</p><ul class="lvl-0"><li class="lvl-2"><p>重组：不修改原有设计的逻辑结构和物理结构</p></li><li class="lvl-2"><p>重构：部分修改</p></li></ul><p>冗余列：减少连接</p><p>派生冗余列：减少聚合函数</p><h2 id="故障管理">故障管理</h2><p>转储机制：</p><p>​ 效率：完全 &lt; 差量 &lt; 增量</p><p>​ 空间占用：差量 &gt; 增量</p><p>​ 恢复速度：完全 &gt; 差量 &gt; 增量</p><ul class="lvl-0"><li class="lvl-2"><p>完全转储：对整个数据库的数据全部重新备份</p></li><li class="lvl-2"><p>差量转储：基于上一次完全转储基点之后变化转储，对修改和删除记录的转储</p></li><li class="lvl-2"><p>增量转储：只复制上次转储后发生变化的文件或数据块。</p></li><li class="lvl-2"><p>静态转储：保证数据有效性，牺牲数据库可用性。数据库不能运行其他事务，不允许有任何修改活动</p></li><li class="lvl-2"><p>动态转储</p></li></ul><p>故障：</p><ul class="lvl-0"><li class="lvl-2"><p>事务(内部)故障</p><ul class="lvl-2"><li class="lvl-4">预期</li><li class="lvl-4">非预期：运算溢出、并发事务死锁、违反完整性限制</li></ul></li><li class="lvl-2"><p>系统故障：又叫软故障</p><ul class="lvl-2"><li class="lvl-4">如：硬件故障、数据库软件及操作系统漏洞、突然停电等</li></ul></li><li class="lvl-2"><p>介质故障</p></li><li class="lvl-2"><p>计算机病毒</p></li></ul><p>数据库镜像</p><ul class="lvl-0"><li class="lvl-2"><p>高保护</p></li><li class="lvl-2"><p>高可用</p></li><li class="lvl-2"><p>高性能</p></li></ul><p><strong>备份</strong></p><ul class="lvl-0"><li class="lvl-2"><p>完全备份：备份所有数据和日志</p></li><li class="lvl-2"><p>差异备份：备份自上一次完全备份后产生的完全备份</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">BACKUP DATABASE 数据库名 <span class="hljs-keyword">TO</span> 设备名 [选项]<br><span class="hljs-comment">/* 选项</span><br><span class="hljs-comment">WITH DIFFERENTIAL：表示差异备份</span><br><span class="hljs-comment">NOINIT：表示将此次备份追加到指定的媒体集，以保留原有的备份集。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>事务日志备份：</p><ul class="lvl-0"><li class="lvl-2"><p>纯日志备份：仅包含一定间隔的事务日志记录而不包含再大容量日志恢复模式下执行的大容量更改的备份</p></li><li class="lvl-2"><p>大容量操作日志备份：包含日志记录和大容量操作更改的数据页的备份，不允许对大容量操作日志备份进行时点恢复</p></li><li class="lvl-2"><p>结尾备份：对可能已损坏的数据库进行日志备份，可以百行纯日志记录或大容量操作记录</p></li></ul><p>文件备份只对数据文件备份，日志文件需要再备份</p><p>对 master 数据库只支持完整备份</p><p>执行任一更新数据库的操作后，要对 model 数据库备份</p><p><strong>恢复</strong></p><p>恢复模式</p><ul class="lvl-0"><li class="lvl-2"><p>简单恢复：无日志备份。用于测试和开发，或用于主要包含只读数据的数据库(如数据仓库)。</p></li><li class="lvl-2"><p>完整恢复：需要日志备份。如，还原单个数据页</p></li><li class="lvl-2"><p>大容量日志恢复：需要日志备份。是完整恢复的附加模式，不支持时点恢复，使用最小方式记录大多数大容量操作，来减少日志空间使用量。</p></li></ul><p><strong>恢复顺序</strong></p><p>恢复最近的<code>完全</code>数据库备份</p><p>恢复完全备份之后的最近的<code>差异</code>数据备份</p><p>按日志备份的先后顺序恢复自最近的完全或差异数据备份之后的所有日志备份</p><h2 id="数据库及数据库对象">数据库及数据库对象</h2><p>数据文件：</p><ul class="lvl-0"><li class="lvl-2"><p>数据库中主要数据文件的大小不能小于<code>model</code>数据库主要文件大小，model 数据库为新创建的数据库提供模板。</p></li><li class="lvl-2"><p>主数据文件必须建立在<code>主文件组</code>中（大小不能小于 3MB），次要数据文件也可以存在在主文件组</p></li><li class="lvl-2"><p>每个数据库只有一个主要数据文件，可以有多个次要数据文件</p></li><li class="lvl-2"><p>日志文件不包含在文件组中</p></li><li class="lvl-2"><p>一个数据文件属于一个文件组</p></li></ul><p>分离附加数据库：</p><ul class="lvl-0"><li class="lvl-2"><p>分离前要断开连接</p></li><li class="lvl-2"><p>分离数据文件和日志文件</p></li><li class="lvl-2"><p>分离数据库需要停用被使用的数据库，但不能停止 SQL server 服务</p></li></ul><p>数据库：</p><ul class="lvl-0"><li class="lvl-2"><p>master：记录数据库实例的系统级信息</p></li><li class="lvl-2"><p>msdb：存储实例的作业信息</p></li><li class="lvl-2"><p>tempdb：每次启动都会重新创建</p></li><li class="lvl-2"><p>Resource：包含数据库所有系统对象</p></li></ul><p>分区：–&gt; 对表中数据进行水平/垂直划分</p><ul class="lvl-0"><li class="lvl-2"><p>步骤</p><ul class="lvl-2"><li class="lvl-4">创建分区函数：确定以什么方式对表分区</li><li class="lvl-4">创建分区方案：分区函数生成的分区映射到文件组中</li><li class="lvl-4">使用分区方案创建表</li></ul></li><li class="lvl-2"><p>分区函数</p><ul class="lvl-2"><li class="lvl-4">LEFT，范围包右不包左；RIGHT，范围包左不包右</li></ul></li></ul><p>标识列：identity</p><h2 id="大规模数据库架构">大规模数据库架构</h2><h4 id="分布式数据库">分布式数据库</h4><p>通信代价最大的是各个站点<code>分片间</code>连接和并操作</p><p>分布式数据库的分布透明性包括</p><ul class="lvl-0"><li class="lvl-2"><p>分片透明性(最高层次)：只对全局关系进行操作，不考虑关系分片。位于全局概念模型和分片模型之间</p></li><li class="lvl-2"><p>位置透明性：只需了解数据分片情况，不需要了解片段的存储场地</p></li><li class="lvl-2"><p>局部数据模型透明性：了解数据分片情况，了解片段的存储场地。位于分配模式和局部概念之间</p></li></ul><p>分片类型：</p><ul class="lvl-0"><li class="lvl-2"><p>水平分片</p></li><li class="lvl-2"><p>垂直分片</p></li><li class="lvl-2"><p>导出分片</p></li><li class="lvl-2"><p>混合分片</p></li></ul><p>分布式数据库中，使用<code>半连接</code>操作可以减少场地之间的数据传输量</p><p>分布式数据库中，使用<code>分配</code>模式来描述各片段到物理存放场所的映像</p><p>最基本特征：<code>本地自治、非集中式管理、高可用性</code></p><p>分布式数据库系统的恢复控制采用的最典型策略是基于<code>两阶段</code>的提交协议</p><h4 id="并行数据库">并行数据库</h4><p>划分方法：</p><ul class="lvl-0"><li class="lvl-2"><p>轮转法：最适合整表扫描</p></li><li class="lvl-2"><p>散列划分：适合点查询，也适合顺序扫描</p></li><li class="lvl-2"><p>范围划分：适合范围查询和点查询</p></li></ul><p>分布策略：</p><ul class="lvl-0"><li class="lvl-2"><p>集中式：所有数据片段都安排在一个场地</p></li><li class="lvl-2"><p>分割式：全局数据只有一份，但被分割成多个片段，每个片段分配在特定场地</p></li><li class="lvl-2"><p>全复制式：每个站点上都有全局数据的复制样本，数据冗余大</p></li><li class="lvl-2"><p>混合式：混合使用上述策略，介于分割式和全复制式</p></li></ul><p>结构</p><ul class="lvl-0"><li class="lvl-2"><p>无共享结构：独立磁盘，内存。 –&gt; 满足高并发，OLTP</p></li><li class="lvl-2"><p>共享结构：共享磁盘，内存。</p></li><li class="lvl-2"><p>层次结构：顶层是无共享结构，底层是共享结构</p></li></ul><h2 id="数据挖掘与数据仓库">数据挖掘与数据仓库</h2><h4 id="数据挖掘">数据挖掘</h4><p>算法：</p><ul class="lvl-0"><li class="lvl-2"><p>关联规则挖掘</p><ul class="lvl-2"><li class="lvl-4">指标：支持度、置信度</li></ul></li><li class="lvl-2"><p>聚类</p></li><li class="lvl-2"><p>分类</p></li></ul><p>数据管理和分析形式</p><ul class="lvl-0"><li class="lvl-2"><p>OLTP(联机事务处理)：对数据的查询和修改。要求快速响应操作，对数据的安全性、完整性及事务吞吐量要求高</p></li><li class="lvl-2"><p>OLAP(联机分析处理)：访问的数据率大，查询和分析操作复杂</p></li></ul><p>OLAP 的实现方式</p><ul class="lvl-0"><li class="lvl-2"><p>MOLAP：基于多维数据库</p></li><li class="lvl-2"><p>ROLAP：基于关系型数据库</p></li><li class="lvl-2"><p>HPLAP：混合型</p></li></ul><p>知识发现由三个步骤组成，数据准备、数据挖掘、结果解释评估</p><p>高粒度数据视图切换到低粒度数据视图的分析操作叫<code>钻取</code></p><h4 id="数据仓库">数据仓库</h4><p>数据仓库是面向主题的、集成的、非易失的、且随时间变化的数据集合</p><p>元数据可以分为<code>技术</code>元数据和<code>业务</code>元数据</p><p>为了解决不同数据源格式上的不统一，需要进行的数据操作是<code>转换</code></p><p>特征</p><ul class="lvl-0"><li class="lvl-2"><p>不可更新性：用户对在提取仓库中的数据进行分析时不会同时对数据仓库中的数据进行更新操作</p></li><li class="lvl-2"><p>数据变化性：数据仓库每隔一段时间进行数据的更新和处理。更新与时间间隔有关，不会实时更新</p></li></ul><h2 id="其他">其他</h2><ul class="lvl-0"><li class="lvl-2"><p>分布式数据库</p><ul class="lvl-2"><li class="lvl-4">目标：<code>本地自治、非集中式管理、高可用性</code>、位置独立性、数据分片独立性、数据复制独立性、分布式查询处理、分布式事务管理、硬件独立性、操作系统独立性、网络独立性、数据管理系统独立性。</li><li class="lvl-4">特点：独立透明性、集中结点结合、复制透明性、易于扩展性</li><li class="lvl-4">缺点：开销大，主要是通信；数据安全性和保密性难处理</li></ul></li><li class="lvl-2"><p>并行式数据库</p><ul class="lvl-2"><li class="lvl-4">目标：高性能和高可用性，通过多个处理节点并行执行数据库任务，提高整个数据库系统的性能和可用性。</li></ul></li></ul><hr><h6 id="约束">约束</h6><p>关系级别约束：主外键约束</p><p>列级约束：非空、唯一</p><p>元组约束：CHECK</p><p>数据完整性定义：</p><ul class="lvl-0"><li class="lvl-2"><p>实体完整性：主键</p><ul class="lvl-2"><li class="lvl-4">级别<ul class="lvl-4"><li class="lvl-6">元组</li><li class="lvl-6">列：值类型、范围、精度、排序等</li><li class="lvl-6">表(关系)：</li></ul></li></ul></li><li class="lvl-2"><p>参照完整性：外键</p></li><li class="lvl-2"><p>自定义完整性：定义属性上的约束条件，如非空(NOT NULL)、列值唯一(UNIQUE)、列值满足表达式(CHECK)</p></li></ul><hr><h6 id="三级模式"><code>三级模式</code></h6><ul class="lvl-0"><li class="lvl-2"><p>外模式：用户可见的部分<code>数据</code>的存在形式。</p></li><li class="lvl-2"><p>模式：全体数据的<code>逻辑结构</code>且用户不可见。</p></li><li class="lvl-2"><p>内模式(唯一)：数据库的<code>物理结构和存储方式</code>。</p></li></ul><p>二级映像：</p><ul class="lvl-0"><li class="lvl-2"><p>外模式/模式映像保证了数据与程序的<code>逻辑</code>独立性。</p></li><li class="lvl-2"><p>模式/内模式的映射保证了数据库中数据与应用程序间的<code>物理</code>独立性。</p></li></ul><h6 id="关系与关系模式">关系与关系模式</h6><ul class="lvl-0"><li class="lvl-2"><p>关系模式：二维表的<code>表头属性</code>等，即一个二维表的主要架构。由于二维表的属性名一般不会修改，所以呈现出<code>静态</code>。</p></li><li class="lvl-2"><p><strong>关系</strong>是一张二维表的<code>具体数据</code>，除去表头外各数据间的联系。由于二维表中是数据会时常修改，所以呈现出<code>动态</code>。随用户对数据库的操作而改变。</p></li></ul><h6 id="磁盘">磁盘</h6><p>RAID1：提高了写速度，磁盘利用率低</p><p>RAID5：写入速度比 RAID1 慢，磁盘利用率高</p><p>RAID10</p><h6 id="视图">视图</h6><p>特点：</p><ul class="lvl-0"><li class="lvl-2"><p>简单性：见到的就是需要的。</p></li><li class="lvl-2"><p>安全性：通过视图，用户只能查询和修改他们所能见到的数据。</p></li><li class="lvl-2"><p>逻辑数据独立性：屏蔽真实表结构变化带来的影响。</p></li></ul><p>作用：</p><ul class="lvl-0"><li class="lvl-2"><p>简化数据查询语句</p></li><li class="lvl-2"><p>使用户从多角度看待同一数据</p></li><li class="lvl-2"><p>提高数据安全性</p></li></ul><p>索引视图：–&gt; 建立了唯一聚集索引的视图</p><ul class="lvl-0"><li class="lvl-2"><p>数据源只能是同一数据库中的基表，不能是视图</p></li><li class="lvl-2"><p>索引视图的数据被物理地保存在数据库中，会占空间。因为创建唯一聚集索引会物理地保存数据。普通视图不占空间。</p></li><li class="lvl-2"><blockquote><p>不合适情况：</p><p>​ 数据更新频繁</p><p>​ 不涉及聚集和连接的查询</p><p>​ group by 具有高基数度(表示列具有许多不同值)</p></blockquote></li></ul><h6 id="事务">事务</h6><p>事务规范：</p><ul class="lvl-0"><li class="lvl-2"><p>事务名称</p></li><li class="lvl-2"><p>事务描述(处理逻辑)</p></li><li class="lvl-2"><p>事务所访问的数据项(关系表/模式)</p></li><li class="lvl-2"><p>事务用户</p></li></ul><p>检测死锁：</p><ul class="lvl-0"><li class="lvl-2"><p>超时法</p></li><li class="lvl-2"><p>等待图法：周期性的生成事务等待图进行检测。(不是在执行每个事务时检测！)</p></li></ul><p>防止死锁：</p><ul class="lvl-0"><li class="lvl-2"><p>大事务切分为小事务</p></li><li class="lvl-2"><p>事务按同一顺序访问资源</p></li><li class="lvl-2"><p>使用绑定链接</p></li><li class="lvl-2"><p>降低事务隔离性级别</p></li></ul><p>事务特性：</p><ul class="lvl-0"><li class="lvl-2"><p>原子性</p></li><li class="lvl-2"><p>一致性：事务的隔离执行，保持数据库的一致性</p></li><li class="lvl-2"><p>隔离性：</p></li><li class="lvl-2"><p>持久性：每个事务成功完成后，它对数据库的改变必须是永久的，即使系统出现故障</p></li></ul><p>事务<code>概要</code>设计阶段，用 read、write 原语来表达存取结构</p><p>两阶段加锁协议保证事务调度的<code>可串行性</code></p><hr><p>数据定义语言<code>DDL</code></p><ul class="lvl-0"><li class="lvl-2"><p>数据定义语句经过 DDL 编译器编译后，各种对象的描述信息存放在数据库的<code>数据字典</code>中。</p></li><li class="lvl-2"><p>数据字典包括<code>数据项</code>、<code>数据结构</code>、<code>数据流</code>、<code>数据存储</code>和<code>处理过程</code>。</p></li><li class="lvl-2"><p>执行后不能回滚</p></li></ul><p>概念数据模型不描述数据的完整性约束。</p><p>不同数据库管理系统有着不同的逻辑实现结构，数据库空间管理方法不同！</p><p>数据库架构与用户是一对多关系</p><h2 id="编程题">编程题</h2><p>多语句表值函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> Fun_StudentScore(<span class="hljs-variable">@gender</span> bit)<br><span class="hljs-keyword">returns</span> <span class="hljs-variable">@stuScore</span> <span class="hljs-keyword">table</span><br>(<br>  stuNo <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<br>  stuName nvarchar(<span class="hljs-number">8</span>),<br>  city nvarchar(<span class="hljs-number">8</span>),<br>  math <span class="hljs-type">int</span><br>)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">begin</span><br> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-variable">@stuScore</span> <span class="hljs-keyword">select</span> stuNo,stuName,city,math <span class="hljs-keyword">from</span> student <span class="hljs-keyword">join</span> score<br>   <span class="hljs-keyword">on</span> student.id<span class="hljs-operator">=</span>socre.stuId <span class="hljs-keyword">where</span> student.gender<span class="hljs-operator">=</span><span class="hljs-variable">@gender</span><br>   if(<span class="hljs-variable">@gender</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>)<br>   <span class="hljs-keyword">begin</span><br>     <span class="hljs-keyword">update</span> <span class="hljs-variable">@stuScore</span> <span class="hljs-keyword">set</span> math<span class="hljs-operator">=</span>math<span class="hljs-operator">+</span><span class="hljs-number">10</span><br>   <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><br><br><br><span class="hljs-comment">--调用</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dbo.Fun_StudentScore(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>创建分区方案</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br></code></pre></td></tr></table></figure><p>SQL 查询</p><p>创建存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> proc_stu<br>  <span class="hljs-variable">@notpassSum</span> <span class="hljs-type">int</span> OUTPUT, <span class="hljs-comment">/*输出（返回）参数：表示没有通过的人数*/</span><br>  <span class="hljs-variable">@writtenPass</span> <span class="hljs-type">int</span><span class="hljs-operator">=</span><span class="hljs-number">60</span>,   <span class="hljs-comment">/*推荐将默认参数放在最后*/</span><br>  <span class="hljs-variable">@labPass</span> <span class="hljs-type">int</span><span class="hljs-operator">=</span><span class="hljs-number">60</span> <br>  <span class="hljs-keyword">AS</span><br>    ……<br>     <span class="hljs-keyword">SELECT</span> stuName,stuInfo.stuNo,writtenExam, <span class="hljs-comment">/*统计并返回没有通过考试的学员人数*/</span><br>        labExam <span class="hljs-keyword">FROM</span>  stuInfo  <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> stuMarks<br>          <span class="hljs-keyword">ON</span> stuInfo.stuNo<span class="hljs-operator">=</span>stuMarks.stuNo<br>            <span class="hljs-keyword">WHERE</span> writtenExam <span class="hljs-operator">&lt;</span> <span class="hljs-variable">@writtenPass</span><br>              <span class="hljs-keyword">OR</span> labExam<span class="hljs-operator">&lt;</span><span class="hljs-variable">@labPass</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@notpassSum</span><span class="hljs-operator">=</span><span class="hljs-built_in">COUNT</span>(stuNo)<br>       <span class="hljs-keyword">FROM</span> stuMarks  <span class="hljs-keyword">WHERE</span> writtenExam<span class="hljs-operator">&lt;</span><span class="hljs-variable">@writtenPass</span><br>           <span class="hljs-keyword">OR</span> labExam<span class="hljs-operator">&lt;</span><span class="hljs-variable">@labPass</span><br>GO<br><br><span class="hljs-comment">/*---调用存储过程----*/</span><br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@sum</span> <span class="hljs-type">int</span> <span class="hljs-comment">/*调用时必须带OUTPUT关键字 ，返回结果将存放在变量@sum中*/</span><br><span class="hljs-keyword">EXEC</span> proc_stu <span class="hljs-variable">@sum</span> OUTPUT ,<span class="hljs-number">64</span> <br>print <span class="hljs-string">&#x27;--------------------------------------------------&#x27;</span><br>IF <span class="hljs-variable">@sum</span><span class="hljs-operator">&gt;=</span><span class="hljs-number">3</span> <span class="hljs-comment">/*后续语句引用返回结果*/</span><br>  print <span class="hljs-string">&#x27;未通过人数：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-keyword">convert</span>(<span class="hljs-type">varchar</span>(<span class="hljs-number">5</span>),<span class="hljs-variable">@sum</span>)<span class="hljs-operator">+</span> <span class="hljs-string">&#x27;人,</span><br><span class="hljs-string">        超过60%,及格分数线还应下调&#x27;</span><br><span class="hljs-keyword">ELSE</span><br>  print <span class="hljs-string">&#x27;未通过人数：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-keyword">convert</span>(<span class="hljs-type">varchar</span>(<span class="hljs-number">5</span>),<span class="hljs-variable">@sum</span>)<span class="hljs-operator">+</span> <span class="hljs-string">&#x27;人,</span><br><span class="hljs-string">        已控制在60%以下，及格分数线适中&#x27;</span><br>GO<br></code></pre></td></tr></table></figure><p>触发器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/* 级联删除 */</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> t_std2 <span class="hljs-keyword">on</span> student<br>instead <span class="hljs-keyword">of</span> <span class="hljs-keyword">delete</span>  <span class="hljs-comment">-- 前触发器</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">declare</span> <span class="hljs-variable">@id</span> <span class="hljs-type">char</span>(<span class="hljs-number">5</span>)<br>  <span class="hljs-keyword">select</span> <span class="hljs-variable">@id</span><span class="hljs-operator">=</span>sno <span class="hljs-keyword">from</span> deleted<br>  <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> SNo <span class="hljs-operator">=</span><span class="hljs-variable">@id</span><br>  <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> SNo<span class="hljs-operator">=</span><span class="hljs-variable">@id</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/* 更新 */</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> t_teacher <span class="hljs-keyword">on</span> teacher<br>after <span class="hljs-keyword">update</span> <span class="hljs-comment">-- 后触发器</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">declare</span> <span class="hljs-variable">@age</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@sal</span> <span class="hljs-type">float</span><br>  <span class="hljs-keyword">select</span> <span class="hljs-variable">@age</span><span class="hljs-operator">=</span>age <span class="hljs-keyword">from</span> deleted<br>  <span class="hljs-keyword">select</span> <span class="hljs-variable">@sal</span><span class="hljs-operator">=</span>sal <span class="hljs-keyword">from</span> deleted<br>  if(<span class="hljs-variable">@age</span> <span class="hljs-operator">&lt;&gt;</span> (<span class="hljs-keyword">select</span> age <span class="hljs-keyword">from</span> inserted)<span class="hljs-keyword">and</span> <span class="hljs-variable">@sal</span> <span class="hljs-operator">&lt;&gt;</span> (<span class="hljs-keyword">select</span> sal <span class="hljs-keyword">from</span> inserted))<br>  print <span class="hljs-string">&#x27;更新了年龄和工资 &#x27;</span><br>  <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@age</span> <span class="hljs-operator">&lt;&gt;</span> (<span class="hljs-keyword">select</span> age <span class="hljs-keyword">from</span> inserted )<span class="hljs-keyword">and</span> <span class="hljs-variable">@sal</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> sal <span class="hljs-keyword">from</span> inserted))<br>  print <span class="hljs-string">&#x27;更新了工资 &#x27;</span><br>  <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@age</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> age <span class="hljs-keyword">from</span> inserted )<span class="hljs-keyword">and</span> <span class="hljs-variable">@sal</span> <span class="hljs-operator">&lt;&gt;</span> (<span class="hljs-keyword">select</span> sal <span class="hljs-keyword">from</span> inserted))<br>  print <span class="hljs-string">&#x27;更新了年龄 &#x27;</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>自定义标量函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> Sales.FetchProductOrderNum<br>(<br>    <span class="hljs-variable">@ProuctID</span>  <span class="hljs-type">INT</span><br>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">INT</span><br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@SaleOrderNum</span> <span class="hljs-type">INT</span>;<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@SaleOrderNum</span><span class="hljs-operator">=</span><span class="hljs-built_in">COUNT</span>(SalesOrderID) <span class="hljs-keyword">FROM</span> Sales.SalesOrderDetail<br>    <span class="hljs-keyword">WHERE</span> ProductID<span class="hljs-operator">=</span><span class="hljs-variable">@ProuctID</span><br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> ProductID;<br><br>    <span class="hljs-keyword">RETURN</span> <span class="hljs-variable">@SaleOrderNum</span>;<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>数据库</tag>
      
      <tag>考试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些实用Python函数</title>
    <link href="/2022/04/17/2022-04-17-methods/"/>
    <url>/2022/04/17/2022-04-17-methods/</url>
    
    <content type="html"><![CDATA[<h2 id="eval-–-字符串表达式处理">eval() – 字符串表达式处理</h2><pre><code class="hljs">eval() 函数用来执行一个字符串表达式，并返回表达式的值。</code></pre><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python-repl">&gt;&gt;&gt;x = 7<br>&gt;&gt;&gt;eval( &#x27;3 * x&#x27; )<br>21<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;pow(2,2)&#x27;</span>)</span><br>4<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;2 + 2&#x27;</span>)</span><br>4<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">n=<span class="hljs-number">81</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;n + 4&quot;</span>)</span><br>85<br></code></pre></td></tr></table></figure><h2 id="re-escape-pattern-–-大段语句防止被转义">re.escape(pattern) – 大段语句防止被转义</h2><p>re.escape(pattern) 可以对字符串中所有可能被解释为正则运算符的字符进行转义的应用函数。如果字符串很长且包含很多特殊技字符，而你又不想输入一大堆反斜杠，或者字符串来自于用户(比如通过raw_input函数获取输入的内容)，且要用作正则表达式的一部分的时候，可以使用这个函数。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&gt;&gt;&gt; re<span class="hljs-selector-class">.escape</span>(<span class="hljs-string">&#x27;www.python.org&#x27;</span>)<br><span class="hljs-string">&#x27;www\\.python\\.org&#x27;</span><br><br>&gt;&gt;&gt;re<span class="hljs-selector-class">.findall</span>(re<span class="hljs-selector-class">.escape</span>(<span class="hljs-string">&#x27;w.py&#x27;</span>),<span class="hljs-string">&quot;jw.pyji w.py.f&quot;</span>)<br><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;w.py&#x27;</span>, <span class="hljs-string">&#x27;w.py&#x27;</span>]</span><br></code></pre></td></tr></table></figure><h2 id="str-maketrans-intab-outtab-delchars-–创建字符翻译映射表">str.maketrans(intab,outtab[,delchars])–创建字符翻译映射表</h2><ul class="lvl-0"><li class="lvl-2"><p>intab – 需要转换的字符组成的字符串。</p></li><li class="lvl-2"><p>outtab – 转换的目标字符组成的字符串。</p></li><li class="lvl-2"><p>delchars – 可选参数，表示要删除的字符组成的字符串。翻译前删除。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">intab = <span class="hljs-string">&quot;aeiou&quot;</span><br>outtab = <span class="hljs-string">&quot;12345&quot;</span><br>deltab = <span class="hljs-string">&quot;thw&quot;</span><br> <br>trantab1 = <span class="hljs-built_in">str</span>.maketrans(intab,outtab) <span class="hljs-comment"># 创建字符映射转换表</span><br>trantab2 = <span class="hljs-built_in">str</span>.maketrans(intab,outtab,deltab) <span class="hljs-comment">#创建字符映射转换表，并删除指定字符</span><br> <br>test = <span class="hljs-string">&quot;this is string example....wow!!!&quot;</span><br> <br><span class="hljs-built_in">print</span>(test.translate(trantab1))<br><span class="hljs-built_in">print</span>(test.translate(trantab2))<br><span class="hljs-built_in">print</span>(test.translate(trantab1,<span class="hljs-string">&#x27;xm&#x27;</span>))<br><br>输出结果：<br>th3s 3s str3ng 2x1mpl2....w4w!!!<br>3s 3s sr3ng 2x1mpl2...<span class="hljs-number">.4</span>!!!<br>th3s 3s str3ng 21pl2....w4w!!!<br></code></pre></td></tr></table></figure><p>与<code>.translate(table[, deletechars])</code>一起使用</p><ul class="lvl-0"><li class="lvl-2"><p>table – maketrans方法生成的对象</p></li><li class="lvl-2"><p>deletechars – 翻译完成后字符串中要过滤的字符列表</p></li></ul><h2 id="divmod-a-b">divmod(a,b):</h2><pre><code class="hljs"> divmod() 函数把除数和余数运算结果结合起来，返回一个包含商和余数的元组(a // b, a % b)。</code></pre> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"> &gt;&gt;&gt;<span class="hljs-built_in">divmod</span>(<span class="hljs-number">7</span>, <span class="hljs-number">2</span>)<br>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">divmod</span>(<span class="hljs-number">8</span>, <span class="hljs-number">2</span>)<br>(<span class="hljs-number">4</span>, <span class="hljs-number">0</span>)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">divmod</span>(<span class="hljs-number">1</span>+<span class="hljs-number">2j</span>,<span class="hljs-number">1</span>+<span class="hljs-number">0.5j</span>)<br>((<span class="hljs-number">1</span>+<span class="hljs-number">0j</span>), <span class="hljs-number">1.5j</span>)<br></code></pre></td></tr></table></figure><h2 id="zip">zip():</h2><pre><code class="hljs">zip([iterable, ...])</code></pre><p>zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。</p><p>我们可以使用 list() 转换来输出列表。</p><p>如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>b = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>c = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>zipped = <span class="hljs-built_in">zip</span>(a,b)     <span class="hljs-comment"># 返回一个对象</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>zipped<br>&lt;<span class="hljs-built_in">zip</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x103abc288</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(zipped)  <span class="hljs-comment"># list() 转换为列表</span><br>[(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">6</span>)]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(a,c))              <span class="hljs-comment"># 元素个数与最短的列表一致</span><br>[(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">6</span>)]<br> <br><span class="hljs-meta">&gt;&gt;&gt; </span>a1, a2 = <span class="hljs-built_in">zip</span>(*<span class="hljs-built_in">zip</span>(a,b))          <span class="hljs-comment"># 与 zip 相反，zip(*) 可理解为解压，返回二维矩阵式</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(a1)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(a2)<br>[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p><em>需要注意的是zip()函数创建的是一个只能访问一次的迭代器。比如，下面的代码就会产生错误</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">prices_and_names = <span class="hljs-built_in">zip</span>(prices.values(), prices.keys())<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(prices_and_names)) <span class="hljs-comment"># OK</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(prices_and_names)) <span class="hljs-comment"># ValueError: max() arg is an empty sequence</span><br></code></pre></td></tr></table></figure><h2 id="collections-Counter-：">collections.Counter()：</h2><p>是一个计数器，返回一个类字典类型数据。</p><h4 id="1-创建：">1.创建：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>c = Counter()  <span class="hljs-comment"># 创建一个空的Counter类</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c = Counter(<span class="hljs-string">&#x27;gallahad&#x27;</span>)  <span class="hljs-comment"># 从一个可iterable对象（list、tuple、dict、字符串等）创建</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c = Counter(&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;)  <span class="hljs-comment"># 从一个字典对象创建</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c = Counter(a=<span class="hljs-number">4</span>, b=<span class="hljs-number">2</span>)  <span class="hljs-comment"># 从一组键值对创建</span><br></code></pre></td></tr></table></figure><h4 id="2-计数器的更新（update和subtract）">2.计数器的更新（update和subtract）:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 增加使用update()</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c = Counter(<span class="hljs-string">&#x27;which&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c.update(<span class="hljs-string">&#x27;witch&#x27;</span>)  <span class="hljs-comment"># 使用另一个iterable对象更新</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c[<span class="hljs-string">&#x27;h&#x27;</span>]<br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>d = Counter(<span class="hljs-string">&#x27;watch&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c.update(d)  <span class="hljs-comment"># 使用另一个Counter对象更新</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c[<span class="hljs-string">&#x27;h&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>c = Counter(<span class="hljs-string">&#x27;which&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c.update(<span class="hljs-string">&#x27;witch&#x27;</span>)  <span class="hljs-comment"># 使用另一个iterable对象更新</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c[<span class="hljs-string">&#x27;h&#x27;</span>]<br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>d = Counter(<span class="hljs-string">&#x27;watch&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c.update(d)  <span class="hljs-comment"># 使用另一个Counter对象更新</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c[<span class="hljs-string">&#x27;h&#x27;</span>]<br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 减少使用subtract()</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c = Counter(<span class="hljs-string">&#x27;which&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c.subtract(<span class="hljs-string">&#x27;witch&#x27;</span>)  <span class="hljs-comment"># 使用另一个iterable对象更新</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c[<span class="hljs-string">&#x27;h&#x27;</span>]<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>d = Counter(<span class="hljs-string">&#x27;watch&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c.subtract(d)  <span class="hljs-comment"># 使用另一个Counter对象更新</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c[<span class="hljs-string">&#x27;a&#x27;</span>]<br>-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="一些方法：">一些方法：</h4><h6 id="elements-：">elements()：</h6><pre><code class="hljs">返回一个迭代器。元素被重复了多少次，在该迭代器中就包含多少个该元素。元素排列无确定顺序，个数小于1的元素不被包含。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>c = Counter(a=<span class="hljs-number">4</span>, b=<span class="hljs-number">2</span>, c=<span class="hljs-number">0</span>, d=-<span class="hljs-number">2</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(c.elements())<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]<br></code></pre></td></tr></table></figure><h6 id="most-common-n">most_common([n]):</h6><pre><code class="hljs">返回一个TopN列表。如果n没有被指定，则返回所有元素。当多个元素计数值相同时，排列是无确定顺序的。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>c = Counter(<span class="hljs-string">&#x27;abracadabra&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c.most_common()<br>[(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-number">2</span>), (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>), (<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">1</span>)]<br><span class="hljs-meta">&gt;&gt;&gt; </span>c.most_common(<span class="hljs-number">3</span>)<br>[(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-number">2</span>), (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>)]<br></code></pre></td></tr></table></figure><h4 id="算术和集合操作">算术和集合操作:</h4><pre><code class="hljs">+、-、&amp;、|操作也可以用于Counter。其中&amp;和|操作分别返回两个Counter对象各元素的最小值和最大值。需要注意的是，得到的Counter对象将删除小于1的元素。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>c = Counter(a=<span class="hljs-number">3</span>, b=<span class="hljs-number">1</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>d = Counter(a=<span class="hljs-number">1</span>, b=<span class="hljs-number">2</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c + d  <span class="hljs-comment"># c[x] + d[x]</span><br>Counter(&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">3</span>&#125;)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c - d  <span class="hljs-comment"># subtract（只保留正数计数的元素）</span><br>Counter(&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>&#125;)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c &amp; d  <span class="hljs-comment"># 交集:  min(c[x], d[x])</span><br>Counter(&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>&#125;)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c | d  <span class="hljs-comment"># 并集:  max(c[x], d[x])</span><br>Counter(&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;)<br></code></pre></td></tr></table></figure><h4 id="常用操作：">常用操作：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">sum</span>(c.values())  <span class="hljs-comment"># 所有计数的总数</span><br>c.clear()  <span class="hljs-comment"># 重置Counter对象，注意不是删除</span><br><span class="hljs-built_in">list</span>(c)  <span class="hljs-comment"># 将c中的键转为列表</span><br><span class="hljs-built_in">set</span>(c)  <span class="hljs-comment"># 将c中的键转为set</span><br><span class="hljs-built_in">dict</span>(c)  <span class="hljs-comment"># 将c中的键值对转为字典</span><br>c.items()  <span class="hljs-comment"># 转为(elem, cnt)格式的列表</span><br>Counter(<span class="hljs-built_in">dict</span>(list_of_pairs))  <span class="hljs-comment"># 从(elem, cnt)格式的列表转换为Counter类对象</span><br><br>c.most_common()[:-n:-<span class="hljs-number">1</span>]  <span class="hljs-comment"># **取出计数最少的n-1个元素</span><br><br>c += Counter()  <span class="hljs-comment"># **移除0和负值</span><br></code></pre></td></tr></table></figure><h4 id="注：">注：</h4><h6 id="计数值的访问与缺失的键：">计数值的访问与缺失的键：</h6><pre><code class="hljs">当所访问的键不存在时，返回0，而不是KeyError；否则返回它的计数。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>c = Counter(<span class="hljs-string">&quot;abcdefgab&quot;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c[<span class="hljs-string">&quot;a&quot;</span>]<br><span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c[<span class="hljs-string">&quot;c&quot;</span>]<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c[<span class="hljs-string">&quot;h&quot;</span>]<br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h6 id="键的删除">键的删除:</h6><pre><code class="hljs">当计数值为0时，并不意味着元素被删除，删除元素应当使用del。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>c = Counter(<span class="hljs-string">&quot;abcdcba&quot;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c<br>Counter(&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">1</span>&#125;)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c[<span class="hljs-string">&quot;b&quot;</span>] = <span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>c<br>Counter(&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">0</span>&#125;)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> c[<span class="hljs-string">&quot;a&quot;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>c<br>Counter(&#123;<span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">1</span>&#125;)<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bat批处理</title>
    <link href="/2022/04/17/2022-04-17-bat%E6%89%B9%E5%A4%84%E7%90%86/"/>
    <url>/2022/04/17/2022-04-17-bat%E6%89%B9%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="echo-off">@echo off</h3><pre><code class="hljs">加在.bat文件开头，关闭执行过程回显，即只显示执行结果</code></pre><h3 id="color-0a">color 0a</h3><pre><code class="hljs">color xx 调整cmd背景色和前景色，0位背景色，a为前景色</code></pre><h3 id="title">title</h3><pre><code class="hljs">title xxx批处理文件打开时cmd的标题</code></pre><h3 id="pause">pause</h3><pre><code class="hljs">暂停</code></pre><p>​</p><h3 id="：和goto">：和goto</h3><pre><code class="hljs">：定义代码块，用于goto语句跳转例：    :12312        echo hah        goto 12312注:是个循环执行echo hah的脚本</code></pre><h3 id="start">start</h3><pre><code class="hljs">启动软件等，后面不加参数默认启动cmd.exe</code></pre><h3 id="echo">echo.</h3><pre><code class="hljs">输出空行</code></pre><h3 id="">%%</h3><pre><code class="hljs">取变量值例：set /p a=请输入时间shutdown -s -f -t %a%注：/p会等待用户输入值，并赋值给a，请输入时间是显示在屏幕提示用户的。</code></pre>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【markdown】 格式</title>
    <link href="/2022/04/17/2022-04-17-%E6%A0%BC%E5%BC%8F/"/>
    <url>/2022/04/17/2022-04-17-%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="段落">段落</h2><blockquote><p>要创建段落，请使用空白行将一行或多行文本进行分隔。</p></blockquote><p>I really like using Markdown.</p><p>I think I’ll use it to format all of my documents from now on.</p><h2 id="换行">换行</h2><blockquote><p>在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行</p></blockquote><pre><code class="hljs">另一种换行方式：HTML 的 &lt;br&gt; 标签。</code></pre><p>First line with two spaces after.<br>And the next line.</p><p>First line with the HTML tag after.<br><br>And the next line.</p><h2 id="强调">强调</h2><blockquote><p>粗体：要加粗文本，请在单词或短语的前后各添加两个星号</p></blockquote><blockquote><p>斜体：要用斜体显示文本，请在单词或短语前后添加一个星号</p></blockquote><pre><code class="hljs">粗体+斜体：三个星号</code></pre><p>This text is <em><strong>really important</strong></em>.</p><h2 id="删除线">删除线</h2><blockquote><p>若要删除单词，请~~在单词前后使用两个波浪号</p></blockquote><p><s>世界是平坦的。</s> 我们现在知道世界是圆的。</p><h2 id="引用">引用</h2><blockquote><p>要创建块引用，请在段落前添加一个 &gt; 符.</p></blockquote><pre><code class="hljs">块引用可以包含多个段落。为段落之间的空白行添加一个 &gt; 符号。</code></pre><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.</p><p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p></blockquote><pre><code class="hljs">块引用可以嵌套。在要嵌套的段落前添加一个 &gt;&gt; 符号。</code></pre><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.</p><blockquote><p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p></blockquote></blockquote><pre><code class="hljs">块引用可以包含其他 Markdown 格式的元素</code></pre><blockquote><h4 id="The-quarterly-results-look-great">The quarterly results look great!</h4><ul class="lvl-1"><li class="lvl-2">Revenue was off the chart.</li><li class="lvl-2">Profits were higher than ever.</li></ul><p><em>Everything</em> is going according to <strong>plan</strong>.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++基础笔记</title>
    <link href="/2022/04/17/2022-04-17-C++%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/04/17/2022-04-17-C++%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="静态变量">静态变量</h2><p>所有对象都共享同一份数据</p><p>编译阶段分配内存</p><p><strong>类内声明类外初始化</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">P</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> m_A;  <span class="hljs-comment">// 类内声明</span><br>&#125;<br><span class="hljs-type">int</span> P::m_A = <span class="hljs-number">100</span>; <span class="hljs-comment">// 类外初始化</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    P p1;<br>    cout &lt;&lt; p1.m_A; <span class="hljs-comment">// 对象访问</span><br>    cout &lt;&lt; P::m_A; <span class="hljs-comment">// 类名访问</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常函数">常函数</h2><p>常函数只能修改<code>mutable</code>修饰的成员变量</p><p>常对象只能调用常函数，常对象只能修改<code>mutable</code>修饰的成员变量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_A;<br>    <span class="hljs-keyword">mutable</span> <span class="hljs-type">int</span> m_B;  <span class="hljs-comment">// mutable修饰的成员变量可在常函数内修改</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123; <span class="hljs-comment">// 常函数，此处const修饰this指针</span><br>            <span class="hljs-keyword">this</span>-&gt;m_A = <span class="hljs-number">100</span>; <span class="hljs-comment">// 报错，常函数无法修改成员变量</span><br>            <span class="hljs-keyword">this</span>-&gt;m_B = <span class="hljs-number">100</span>; <span class="hljs-comment">// 可修改</span><br>        &#125;<br>    <span class="hljs-comment">// 普通函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">const</span> C c; <span class="hljs-comment">// 常对象</span><br>    c.m_A = <span class="hljs-number">100</span>; <span class="hljs-comment">// 报错，常对象无法修改成员变量</span><br>    c.m_B = <span class="hljs-number">100</span>; <span class="hljs-comment">// 可修改</span><br>    c.<span class="hljs-built_in">test</span>();<br>    c.<span class="hljs-built_in">func</span>(); <span class="hljs-comment">// 报错，常对象只能调用常函数</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运算符重载">运算符重载</h2><h3 id="左移运算符">左移运算符</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_Age;<br>&#125;<br><span class="hljs-comment">// 只能在全局函数中重载，成员函数不行，无法实现cout&lt;&lt;的效果</span><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; cout, Person&amp; p)&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;p.m_Age&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> cout; <span class="hljs-comment">// 链式</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="递增运算符">递增运算符</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInteger</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_num;<br><br>    <span class="hljs-comment">// 前置</span><br>    MyInteger &amp;<span class="hljs-keyword">operator</span>++() &#123;<br>        m_num++;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 后置，函数带有int占位参数</span><br>    MyInteger <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>) &#123;<br>        MyInteger tmp = *<span class="hljs-keyword">this</span>;<br>        m_num++;<br>        <span class="hljs-keyword">return</span> tmp;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="函数调用运算符重载">函数调用运算符重载</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Call</span> &#123;<br>    <span class="hljs-comment">// 函数调用-&gt; ()运算符重载</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;__call__&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_call</span><span class="hljs-params">()</span></span>&#123;<br>    MyInteger i&#123;&#125;;<br>    <span class="hljs-built_in">i</span>(); <span class="hljs-comment">// 调用</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="继承">继承</h2><p><img src="/assets/img/screenshots/2022-04-17-21-20-11.png" alt=""></p><p>继承构造析构顺序：</p><p>​ 构造：先父后子</p><p>​ 析构：先子后父</p><p>菱形继承问题，会继承多份顶层基类的数据，浪费资源，使用虚继承优化，利用虚基类指针维护虚基类表中一份数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 菱形继承</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">extend</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span> &#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-type">int</span> m_Age;<br>    &#125;;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> : <span class="hljs-keyword">public</span> Parent &#123;<br>    &#125;;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mama</span> : <span class="hljs-keyword">public</span> Parent &#123;<br>    &#125;;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> : <span class="hljs-keyword">public</span> Father, <span class="hljs-keyword">public</span> Mama &#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-type">int</span> m_Age;<br>    &#125;;<br>    Son son;<br>    son.Father::m_Age = <span class="hljs-number">30</span>;<br>    son.Mama::m_Age = <span class="hljs-number">20</span>;<br>    cout &lt;&lt; son.Father::m_Age &lt;&lt; endl; <span class="hljs-comment">// 30</span><br>    cout &lt;&lt; son.Mama::m_Age &lt;&lt; endl; <span class="hljs-comment">// 20</span><br>    <span class="hljs-comment">// 菱形继承，同一份数据在子类中存储多次，资源浪费</span><br>&#125;<br><br><span class="hljs-comment">// 虚继承</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">virtual_extend</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 虚基类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span> &#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-type">int</span> m_Age;<br>    &#125;;<br><br>    <span class="hljs-comment">// virtual 关键字</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> : <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Parent &#123;<br>    &#125;;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mama</span> : <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Parent &#123;<br>    &#125;;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> : <span class="hljs-keyword">public</span> Father, <span class="hljs-keyword">public</span> Mama &#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-type">int</span> m_Age;<br>    &#125;;<br>    Son son;<br>    son.Father::m_Age = <span class="hljs-number">30</span>;<br>    son.Mama::m_Age = <span class="hljs-number">20</span>;<br>    cout &lt;&lt; son.Father::m_Age &lt;&lt; endl; <span class="hljs-comment">// 20</span><br>    cout &lt;&lt; son.Mama::m_Age &lt;&lt; endl; <span class="hljs-comment">// 20</span><br>    <span class="hljs-comment">// 虚继承保证数据只继承一份，使用虚基类指针（vbptr）指向虚基类表（vbtable）</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;菱形继承&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">extend</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;虚继承&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">virtual_extend</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多态">多态</h2><h3 id="虚继承">虚继承</h3><p>解决菱形继承，同一份数据在子类中存储多次，资源浪费问题</p><p>虚继承保证数据只继承一份，使用虚基类指针（vbptr）指向虚基类表（vbtable），继承的是指针而不是值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 菱形继承</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">extend</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span> &#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-type">int</span> m_Age;<br>    &#125;;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> : <span class="hljs-keyword">public</span> Parent &#123;<br>    &#125;;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mama</span> : <span class="hljs-keyword">public</span> Parent &#123;<br>    &#125;;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> : <span class="hljs-keyword">public</span> Father, <span class="hljs-keyword">public</span> Mama &#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-type">int</span> m_Age;<br>    &#125;;<br>    Son son;<br>    son.Father::m_Age = <span class="hljs-number">30</span>;<br>    son.Mama::m_Age = <span class="hljs-number">20</span>;<br>    cout &lt;&lt; son.Father::m_Age &lt;&lt; endl; <span class="hljs-comment">// 30</span><br>    cout &lt;&lt; son.Mama::m_Age &lt;&lt; endl; <span class="hljs-comment">// 20</span><br>    <span class="hljs-comment">// 菱形继承，同一份数据在子类中存储多次，资源浪费</span><br>&#125;<br><br><span class="hljs-comment">// 虚继承</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">virtual_extend</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 虚基类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span> &#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-type">int</span> m_Age;<br>    &#125;;<br><br>    <span class="hljs-comment">// virtual 关键字</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> : <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Parent &#123;<br>    &#125;;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mama</span> : <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Parent &#123;<br>    &#125;;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> : <span class="hljs-keyword">public</span> Father, <span class="hljs-keyword">public</span> Mama &#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-type">int</span> m_Age;<br>    &#125;;<br>    Son son;<br>    son.Father::m_Age = <span class="hljs-number">30</span>;<br>    son.Mama::m_Age = <span class="hljs-number">20</span>;<br>    cout &lt;&lt; son.Father::m_Age &lt;&lt; endl; <span class="hljs-comment">// 20</span><br>    cout &lt;&lt; son.Mama::m_Age &lt;&lt; endl; <span class="hljs-comment">// 20</span><br>    <span class="hljs-comment">// 虚继承保证数据只继承一份，使用虚基类指针（vbptr）指向虚基类表（vbtable）</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;菱形继承&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">extend</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;虚继承&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">virtual_extend</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="虚析构">虚析构</h3><p>多态时，采用父类指针指向子类对象时，释放父类指针不会调用子类析构函数，若子类中存在堆区数据，会存在内存泄漏。使用虚析构解决此类问题。</p><p>含纯虚析构的类为抽象类，纯虚析构需要在类外实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">not_virtual</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span>:<br>        ~<span class="hljs-built_in">Animal</span>() &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;~Animal()&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> : <span class="hljs-keyword">public</span> Animal &#123;<br>    <span class="hljs-keyword">public</span>:<br>        string *m_name;<br><br>        <span class="hljs-built_in">Dog</span>(string name) &#123;<br>            m_name = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(name);<br>            cout &lt;&lt; <span class="hljs-string">&quot;Dog()&quot;</span> &lt;&lt; endl;<br>        &#125;<br><br>        ~<span class="hljs-built_in">Dog</span>() &#123;<br>            <span class="hljs-keyword">if</span> (m_name) &#123;<br>                <span class="hljs-keyword">delete</span> m_name;<br>                m_name = <span class="hljs-literal">nullptr</span>;<br>            &#125;<br>            cout &lt;&lt; <span class="hljs-string">&quot;~Dog()&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;;<br><br>    Animal *animal = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Dog</span>(<span class="hljs-string">&quot;wangcai&quot;</span>);<br>    <span class="hljs-keyword">delete</span> animal;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">virtual_destruct</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Animal</span>() &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;~Animal()&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> : <span class="hljs-keyword">public</span> Animal &#123;<br>    <span class="hljs-keyword">public</span>:<br>        string *m_name;<br><br>        <span class="hljs-built_in">Dog</span>(string name) &#123;<br>            m_name = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(name);<br>            cout &lt;&lt; <span class="hljs-string">&quot;Dog()&quot;</span> &lt;&lt; endl;<br>        &#125;<br><br>        ~<span class="hljs-built_in">Dog</span>() &#123;<br>            <span class="hljs-keyword">if</span> (m_name) &#123;<br>                <span class="hljs-keyword">delete</span> m_name;<br>                m_name = <span class="hljs-literal">nullptr</span>;<br>            &#125;<br>            cout &lt;&lt; <span class="hljs-string">&quot;~Dog()&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;;<br><br><br>    Animal *animal = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Dog</span>(<span class="hljs-string">&quot;wangcai&quot;</span>);<br>    <span class="hljs-keyword">delete</span> animal;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-comment">// 纯虚析构函数，不能被实例化</span><br>    <span class="hljs-comment">// 需要实现</span><br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Test</span>() = <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-comment">// 纯虚析构实现</span><br>Test::~<span class="hljs-built_in">Test</span>() &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;~Test()&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 调用了Dog构造函数, Animal析构函数</span><br>    <span class="hljs-comment">// 但是没有调用Dog析构函数，导致Dog中的m_name没有释放</span><br>    <span class="hljs-built_in">not_virtual</span>();<br>    <span class="hljs-comment">// 调用了Dog构造函数和虚构函数, Animal析构函数</span><br>    <span class="hljs-comment">// 使用了虚析构函数，Dog中的m_name被释放了</span><br>    <span class="hljs-built_in">virtual_destruct</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx</title>
    <link href="/2021/12/07/2021-12-07-Nginx/"/>
    <url>/2021/12/07/2021-12-07-Nginx/</url>
    
    <content type="html"><![CDATA[<h1>Nginx</h1><h2 id="前言">前言</h2><p>正向代理：代理客户端。</p><p>反向代理：将外网的客户端请求转发至内网服务器。即代理服务端。</p><h2 id="简介">简介</h2><p>一般由Nginx作代理服务器，拦截外网的请求并处理返回静态资源请求，再转发动态资源请求交给内网的逻辑服务器。</p><p>可以保证内网逻辑服务器的安全，可以做到负载均衡，根据需要转发请求。</p><h2 id="程序目录">程序目录</h2><ul class="lvl-0"><li class="lvl-2"><p><code>/usr/sbin/nginx</code>：主程序</p></li><li class="lvl-2"><p><code>/etc/nginx</code>：存放配置文件</p></li><li class="lvl-2"><p><code>/usr/share/nginx</code>：存放静态文件</p></li><li class="lvl-2"><p><code>/var/log/nginx</code>：存放日志</p></li></ul><h2 id="配置文件">配置文件</h2><p>Nginx服务器的配置信息主要集中在<code>nginx.conf</code>这个配置文件</p><h3 id="详解">详解</h3><p><a href="https://www.cnblogs.com/fengff/p/8892590.html">详细配置参考</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">########### 每个指令必须有分号结束。#################</span><br><span class="hljs-comment">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span><br><span class="hljs-comment">#worker_processes 2;  #允许生成的进程数，默认为1</span><br><span class="hljs-comment">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span><br><span class="hljs-attribute">error_log</span> log/<span class="hljs-literal">error</span>.log <span class="hljs-literal">debug</span>;  <span class="hljs-comment">#制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">accept_mutex</span> <span class="hljs-literal">on</span>;   <span class="hljs-comment">#设置网路连接序列化，防止惊群现象发生，默认为on</span><br>    <span class="hljs-comment"># 惊群现象：一个网路连接到来，多个睡眠的进程被同时叫醒，但只有一个进程能获得链接，这样会影响系统性能。</span><br>    <br>    <span class="hljs-attribute">multi_accept</span> <span class="hljs-literal">on</span>;  <span class="hljs-comment">#设置一个进程是否同时接受多个网络连接，默认为off</span><br>    <span class="hljs-comment">#use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span><br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;    <span class="hljs-comment">#最大连接数，默认为512</span><br>&#125;<br><br><span class="hljs-comment"># ----http配置----</span><br><span class="hljs-comment"># server配置</span><br><span class="hljs-comment"># location配置</span><br><span class="hljs-comment"># upstream配置</span><br><span class="hljs-section">http</span> &#123;<br><span class="hljs-comment"># http 配置</span><br>    <span class="hljs-attribute">include</span>       mime.types;   <span class="hljs-comment">#文件扩展名与文件类型映射表</span><br>    <span class="hljs-attribute">default_type</span>  application/octet-stream; <span class="hljs-comment">#默认文件类型，默认为text/plain</span><br>    <span class="hljs-comment">#access_log off; #取消服务日志    </span><br>    <span class="hljs-attribute">log_format</span> myFormat <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span>–<span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] <span class="hljs-variable">$request</span> <span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> <span class="hljs-variable">$http_referer</span> <span class="hljs-variable">$http_user_agent</span> <span class="hljs-variable">$http_x_forwarded_for</span>&#x27;</span>; <span class="hljs-comment">#自定义格式</span><br>    <span class="hljs-attribute">access_log</span> log/access.log myFormat;  <span class="hljs-comment">#combined为日志格式的默认值</span><br>    <span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;   <span class="hljs-comment">#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span><br>    <span class="hljs-attribute">sendfile_max_chunk</span> <span class="hljs-number">100k</span>;  <span class="hljs-comment">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br>    <span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">65</span>;  <span class="hljs-comment">#连接超时时间，默认为75s，可以在http，server，location块。</span><br><br>    <span class="hljs-section">upstream</span> iii &#123; <span class="hljs-comment"># 这里的 iii 就是负载均衡模块的一个命名，用于在后面指定</span><br>    <span class="hljs-comment"># 服务器列表</span><br><span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8080</span> weight=<span class="hljs-number">1</span>;  <span class="hljs-comment"># weight指定服务器轮询时的权重</span><br><span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8081</span> weight=<span class="hljs-number">3</span>;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.10.121:3333</span> backup;  <span class="hljs-comment">#热备</span><br>&#125;<br>    <br>    <span class="hljs-attribute">error_page</span> <span class="hljs-number">404</span> https://www.baidu.com; <span class="hljs-comment">#错误页</span><br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><br><span class="hljs-comment"># 代理路径</span><br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">root</span> /etc/home/index;<br><span class="hljs-attribute">index</span> index.html index.html;<br><span class="hljs-attribute">proxy_pass</span> http://iii;  <span class="hljs-comment"># 指定负载均衡的代理名称，就是upstream的名称</span><br>&#125;<br><br><span class="hljs-section">location</span> /admin &#123;<br>&#125;<br>&#125;<br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">keepalive_requests</span> <span class="hljs-number">120</span>; <span class="hljs-comment">#单连接请求上限次数。</span><br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">4545</span>;   <span class="hljs-comment">#监听端口</span><br>        <span class="hljs-attribute">server_name</span>  <span class="hljs-number">127.0.0.1</span>;   <span class="hljs-comment">#监听地址       </span><br>        <span class="hljs-section">location</span>  ~*^.+$ &#123;       <span class="hljs-comment">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br>           <span class="hljs-comment">#root path;  #根目录</span><br>           <span class="hljs-comment">#index vv.txt;  #设置默认页</span><br>           <span class="hljs-attribute">proxy_pass</span>  http://mysvr;  <span class="hljs-comment">#请求转向mysvr 定义的服务器列表</span><br>           <span class="hljs-attribute">deny</span> <span class="hljs-number">127.0.0.1</span>;  <span class="hljs-comment">#拒绝的ip</span><br>           <span class="hljs-attribute">allow</span> <span class="hljs-number">172.18.5.54</span>; <span class="hljs-comment">#允许的ip           </span><br>        &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="WSGI模式">WSGI模式</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># wsgi模式下的服务器配置访问方式</span><br><span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">include</span> /etc/nginx/uwsgi_params;<br>    <span class="hljs-attribute">uwsgi_pass</span> localhost:<span class="hljs-number">8888</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="alias与root">alias与root</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /static &#123;<br>    <span class="hljs-comment"># 访问/static时转到具体哪个目录</span><br><span class="hljs-attribute">alias</span> /root/home/proj/web_flask/flasker/ForBlueprint/static/<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 区别</span><br>root与alias<span class="hljs-emphasis">*主要区别*</span>在于nginx如何解释location后面的uri，这会使两者分别以不同的方式将请求映射到服务器文件上。<br><span class="hljs-code">`root`</span>的处理结果是：root路径＋location路径<br><span class="hljs-code">`alias`</span>的处理结果是：使用alias路径替换location路径<br><br><span class="hljs-bullet">*</span> 还有一个重要的区别是alias后面必须要用“/”结束，否则会找不到文件的,而root则可有可无<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【git】 03-branch</title>
    <link href="/2021/09/04/2021-09-04-03-branch/"/>
    <url>/2021/09/04/2021-09-04-03-branch/</url>
    
    <content type="html"><![CDATA[<h2 id="创建">创建</h2><pre><code class="hljs">git checkout -b &lt;分支名&gt;  // 创建并切换到分支git branch &lt;分支名&gt;  // 创建分支git checkout &lt;分支名&gt; // 切换分支</code></pre><h2 id="查看">查看</h2><pre><code class="hljs">git branch // 查看分支，列出所有分支</code></pre><h2 id="合并">合并</h2><pre><code class="hljs">git merge &lt;分支名&gt;  // 合并分支到当前分支</code></pre><h2 id="删除">删除</h2><pre><code class="hljs">git branch -d &lt;分支名&gt;  // 删除分支</code></pre>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【git】 01-basic</title>
    <link href="/2021/09/04/2021-09-04-01-basic/"/>
    <url>/2021/09/04/2021-09-04-01-basic/</url>
    
    <content type="html"><![CDATA[<h2 id="提交">提交</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add &lt;file&gt;  // 提交到暂存区<br><br>git commit -m &quot;注释内容&quot;  // 暂存区提交到仓库<br>git commit -am &quot;注释内容&quot;  // add + commit<br></code></pre></td></tr></table></figure><h2 id="回滚">回滚</h2><ul class="lvl-0"><li class="lvl-2">回滚仓库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset --hard HEAD^  # 回滚一个版本<br>git reset --hard HEAD^^  # 回滚两个版本<br>git reset --hard HEAD~10  # 回滚10个版本<br>git reset --hard &lt;版本号&gt; #  回滚到具体版本号(通过reflog查看版本号)<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>回滚工作区</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git restore --&lt;file&gt; # 丢弃工作区的修改，回到暂存区或版本库的状态<br>git checkout &lt;file&gt;  # 同上<br></code></pre></td></tr></table></figure><h2 id="展示信息">展示信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status # 展示状态，提示是否有未跟踪、未提交文件等<br>git diff &lt;file&gt; # 展示文件修改信息<br><br>git log  # 展示仓库日志信息<br>git reflog # 显示仓库详细信息(含回退等)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【git】 02-remote</title>
    <link href="/2021/07/16/2021-07-16-02-remote/"/>
    <url>/2021/07/16/2021-07-16-02-remote/</url>
    
    <content type="html"><![CDATA[<h2 id="上传">上传</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push // 本地上传到远程库<br><br>git push origin &lt;分支名&gt;  // 上传指定分支<br><br>git push –u origin &lt;分支名&gt; // 在远程库创建分支并推送分支到远程库<br></code></pre></td></tr></table></figure><h2 id="下载">下载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> &lt;git <span class="hljs-built_in">link</span>&gt; <span class="hljs-comment"># 从 git link 克隆库</span><br><br>git pull  <span class="hljs-comment"># 从远程库更新本地库</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue学习笔记</title>
    <link href="/2021/02/17/2021-02-17-vue/"/>
    <url>/2021/02/17/2021-02-17-vue/</url>
    
    <content type="html"><![CDATA[## 基础### 过滤器通过`{{msg | filter}}`这个形式，可以声明一个带过滤器的模板语法，msg会作为参数传个filter这个函数的第一个参数，将返回值作为最后渲染到DOM的值。filter是一个JS函数，可以接收多个参数，当参数不唯一时，`{{msg | filter(arg1, arg2)}}`，会将msg作为第一个参数传给filter函数，arg1和arg2作为第二三个参数。同时，也支持多个过滤器串联，`{{msg | filter1 | filter2}}`会将msg作为参数传给filter1，将处理完成后的返回值作为参数传给filter2。### 计算属性set(一般不写)get(默认写的方法是get方法)可以理解为缓存，只有在改变时才会重新调用。### v-on**修饰符:**`.stop`：阻止事件冒泡`.prevent`：阻止默认事件。(例：表单submit按钮点击默认会跳转页面)`.{keyCode|keyAlisa}`：键盘指定按键按下时才会触发。(例：@keyup.enter=“enterClick”)`.once`：使得事件只触发一次。`.native`：监听组件根元素的原生事件。### v-for`:key`：为了提高插入删除列表的性能，key不应该重复。(相当于把一个数组变成了链表)​- vue操作数组时，通过索引修改数组值的方式不是响应式的！不会动态渲染到页面！要使用`splice`来替换值，或者通过vue内建的函数set来更改。例：`Vue.set(this.list, index, "something")`### v-model**修饰符：**`.lazy`：当键入enter或失去焦点时才更新绑定值，默认是实时输入实时修改的。`.number`：将输入框中的值转化为数值类型，默认输入的值一律作为字符串。`.trim`：将输入获取的值前后去空格。## 组件化### 定义组件> 定义、注册、使用组件<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cpn4</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn4</span>&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">cpn3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn3</span>&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">    // 定义组件</span></span><br><span class="language-xml"><span class="language-handlebars">    const cpn4 = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        template:`</span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是标题4<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是内容4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        `</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars">    // 注册全局组件</span></span><br><span class="language-xml"><span class="language-handlebars">    Vue.component(&quot;cpn4&quot;, cpn4)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">    // 语法糖写法，直接注册时定义组件</span></span><br><span class="language-xml"><span class="language-handlebars">    Vue.component(&quot;cpn3&quot;,&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        template:`</span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是标题3<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是内容3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        `</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">    const cpn2 = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        template:`</span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是标题2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是内容2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        `</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">    const cpn1 = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        // 注：模板中只能由一个根元素！推荐用div把模板包裹起来</span></span><br><span class="language-xml"><span class="language-handlebars">        // 子组件可以使用全局组件和注册的子组件</span></span><br><span class="language-xml"><span class="language-handlebars">        template: `</span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是标题1<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是内容1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">cpn2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">cpn3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn3</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        `,</span></span><br><span class="language-xml"><span class="language-handlebars">        // 注册子组件</span></span><br><span class="language-xml"><span class="language-handlebars">        components: &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            cpn2: cpn2,</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">    var vm = new Vue(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span><br><span class="language-xml"><span class="language-handlebars">        data: &#123;&#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">        components: &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            // 注册局部组件</span></span><br><span class="language-xml"><span class="language-handlebars">            cpn1: cpn1</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span><br></code></pre></td></tr></table></figure>### 模板分离<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tp1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>模板分离！<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span> <br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;cpn&quot;</span>, &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 调用template标签属性id=&quot;tp1&quot;的内容，实现模板语法分离</span></span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#tp1&quot;</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>### 数据绑定<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;t1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>T1!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;t2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>T2!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-comment">&lt;!--        这里渲染用的是cpn1中data内的值--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;cpn1&quot;</span>,&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// data要用函数形式，返回值内写数据对象</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 因为组件复用，要保证各自的变量互不干扰</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;这是cpn1!&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>:<span class="hljs-string">&quot;#t2&quot;</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;&#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">cpn</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#t1&quot;</span>,</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>### 数据传递> 父传子<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        这里的两个属性名要对应模板的props中--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">:message</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">:mv</span>=<span class="hljs-string">&quot;movie&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- &lt;cpn :mv=&quot;movie&quot;&gt;&lt;/cpn&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;t0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in mv&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> cpn = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#t0&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-comment">// props传入变量数组</span></span><br><span class="language-javascript">        <span class="hljs-comment">// props: [&quot;message&quot;, &quot;mv&quot;]</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// props传入对象，可以规定默认值和数据类型</span></span><br><span class="language-javascript">        <span class="hljs-attr">props</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// message: String</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 传入对象规定默认值和数据类型,传入数组表示可以有多个类型</span></span><br><span class="language-javascript">            <span class="hljs-attr">prop1</span>: [<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Number</span>],</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// type属性规定数据类型</span></span><br><span class="language-javascript">                <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// default 规定默认值</span></span><br><span class="language-javascript">                <span class="hljs-attr">default</span>: <span class="hljs-string">&quot;aaa&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// required 属性必须传值，不然报错</span></span><br><span class="language-javascript">                <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">mv</span>: <span class="hljs-title class_">Array</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">testLs</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">type</span>: <span class="hljs-title class_">Array</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">// 数组、对象类型default要用函数生产</span></span><br><span class="language-javascript">                <span class="hljs-attr">default</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> []</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">prop2</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 自定义验证函数</span></span><br><span class="language-javascript">                <span class="hljs-attr">validation</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> [<span class="hljs-string">&quot;yes&quot;</span>, <span class="hljs-string">&quot;no&quot;</span>].<span class="hljs-title function_">indexOf</span>(value) !== -<span class="hljs-number">1</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;这是数据&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">movie</span>: [<span class="hljs-string">&quot;哪吒&quot;</span>,<span class="hljs-string">&quot;姜子牙&quot;</span>,<span class="hljs-string">&quot;喜剧之王&quot;</span>]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//    相当于cpn:&#123;...&#125;</span></span><br><span class="language-javascript">            cpn</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br></code></pre></td></tr></table></figure>vm根组件中的data数据，通过cpn标签的v-bind绑定到message和mv属性中，cpn组件通过props将属性值message和mv存储为data，可以被组件内使用，实现数据传递。- 注：属性值字段不支持驼峰命名，如果使用，在html传值时要转化为短横线命名。例如：`props=["cArc"]`，则在html中传值时要`<cpn c-arc="xxx"></cpn>`> 子传父<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--        有参写法--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;button @click=&quot;onclicked(item)&quot;&gt;我是子组件&lt;/button&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onclicked&quot;</span>&gt;</span>我是子组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是父组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-comment">&lt;!--        2. 监听事件信号--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">children</span> @<span class="hljs-attr">btnclick</span>=<span class="hljs-string">&quot;clicked&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">children</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> children = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#c&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">onclicked</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 1. 发送事件信号</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;btnclick&quot;</span>)</span><br><span class="language-javascript">                <span class="hljs-comment">// 有参写法</span></span><br><span class="language-javascript">                <span class="hljs-comment">// this.$emit(&quot;btnclick&quot;,item)</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;parent&quot;</span>,&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>:<span class="hljs-string">&quot;#p&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>: &#123;children&#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 3. 回调信号事件函数</span></span><br><span class="language-javascript">            <span class="hljs-attr">clicked</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;子组件被点击了&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;1&quot;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;&#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>### 组件间访问> 父访问子   $children  \$refs<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;aaa&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btnClick&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btnRef&quot;</span>&gt;</span>Ref点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是一个组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> cpn = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>:<span class="hljs-string">&quot;#c&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;子组件的msg&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">printMsg</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;子组件打印的&quot;</span>)</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;&#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">btnClick</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 获取所有子组件 --&gt; 列表</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$children</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">// 访问第一个子组件data中的msg</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$children</span>[<span class="hljs-number">0</span>].<span class="hljs-property">msg</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">// 访问第一个子组件的printMsg方法</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$children</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">printMsg</span>();</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">btnRef</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 获取所有带有ref属性的子组件 --&gt; &#123;ref属性值:子组件, ...&#125;</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">// 获取ref属性值为aaa的子组件的msg</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">aaa</span>.<span class="hljs-property">msg</span>);</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">aaa</span>.<span class="hljs-title function_">printMsg</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>:&#123;</span><br><span class="language-javascript">            cpn</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>> 子访问父 $parent  \$root(访问根组件)<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是一个组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">kid</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">kid</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;kid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>子子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;kidClick&quot;</span>&gt;</span>子子组件的按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> kid = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#kid&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;子子组件的msg&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">kidClick</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;子子组件的parent：&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$parent</span>.<span class="hljs-property">msg</span>);</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;子子组件的root:&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$root</span>.<span class="hljs-property">msg</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> cpn = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>:<span class="hljs-string">&quot;#c&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;子组件的msg&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;&#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">            kid</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;root的msg&quot;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">btnClick</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 获取所有子组件 --&gt; 列表</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$children</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">// 访问第一个子组件data中的msg</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$children</span>[<span class="hljs-number">0</span>].<span class="hljs-property">msg</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">// 访问第一个子组件的printMsg方法</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$children</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">printMsg</span>();</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">btnRef</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 获取所有带有ref属性的子组件 --&gt; &#123;ref属性值:子组件, ...&#125;</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">// 获取ref属性值为aaa的子组件的msg</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">aaa</span>.<span class="hljs-property">msg</span>);</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">aaa</span>.<span class="hljs-title function_">printMsg</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>:&#123;</span><br><span class="language-javascript">            cpn</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>### 插槽> slot会用标签内部的内容替换插槽，可以预先定义插槽默认值，缺省使用默认值。当存在多个插槽时，标签内的内容会映射到每一个插槽。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>这是缺省定义的内容<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br></code></pre></td></tr></table></figure>> 具名插槽<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br></code></pre></td></tr></table></figure>这样，在默认使用插槽时，只会替换具名插槽，要使用具名插槽需要添加`slot`属性显式的指定使用的插槽名称<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        出现两个默认值的标签--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><br><span class="hljs-comment">&lt;!--            替换了所有插槽的内容，出现了两个p标签--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是插槽内的p标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ncpn</span>&gt;</span><br><span class="hljs-comment">&lt;!--            替换right插槽--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>我是右边插槽的<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>我是右边插槽的<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!--            默认替换匿名插槽--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是不使用具名插槽的<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ncpn</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cpn&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>我是默认值<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>我是默认值<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ncpn&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是具名插槽组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>我是默认值<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>我是默认值<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>我是默认值<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> cpn = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#cpn&quot;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> ncpn = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#ncpn&quot;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>:&#123;</span><br><span class="language-javascript">            cpn,</span><br><span class="language-javascript">            ncpn</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>>  作用域插槽在组件作用域外获取组件的数据。1. 给slot插槽定义属性，并将属性通过v-bind绑定到需要的data上。2. 在使用组件时，标签内填充插槽时，通过`v-slot:插槽名=“插槽属性名”`获取到插槽的所有属性，通过`插槽属性.属性名`获取属性名对应的值<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><br><span class="hljs-comment">&lt;!--        默认是访问不到cpn的data属性的--&gt;</span><br><span class="hljs-comment">&lt;!--        &#123;&#123; msg &#125;&#125;--&gt;</span><br><br><span class="hljs-comment">&lt;!--        是vue2.6以后的绑定具名插槽方式template标签内掐架属性v-slot:插槽名--&gt;</span><br><span class="hljs-comment">&lt;!--        v-slot:user=&quot;slotProps&quot;，是为user插槽的属性去个别名叫slotProps--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:user</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--            获取绑定的data属性,又因为data属性绑定了msg，也就获得了msg属性只--&gt;</span><br>            &#123;&#123; slotProps.data &#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cpn&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--        在插槽上绑定data属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> cpn = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;#cpn&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;cpn里的data！&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;&#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>: &#123;cpn&#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>## webpack是一个`打包工具`！]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>前端</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uwsgi</title>
    <link href="/2021/02/09/2021-02-09-uwsgi/"/>
    <url>/2021/02/09/2021-02-09-uwsgi/</url>
    
    <content type="html"><![CDATA[<h1>uWSGI</h1><h2 id="前言">前言</h2><ul class="lvl-0"><li class="lvl-2"><p><code>WSGI</code>是一种web server与web application之间的通信协议</p></li><li class="lvl-2"><p><code>uwsgi</code>也是一种通信协议，和WSGI没关系，用于定义传输信息你的类型</p></li><li class="lvl-2"><p><code>uWSGI</code>是一个web服务器，实现了WSGI协议。</p></li></ul><h3 id="WHY-NEED-uWSGI">WHY NEED uWSGI</h3><p>Django、Flask等框架中集成了简单的WSGI web服务器，但仅限于简单的<strong>开发环境</strong>测试，由于生产环境的复杂性，需要专门的服务器来提供支持。</p><h3 id="WHY-Nginx-uWSGI？">WHY Nginx+uWSGI？</h3><p>uWSGI+web框架已经可以搭建出一个网页，但对于高并发的访问，需要Nginx做负载均衡和反向代理等。</p><h2 id="使用">使用</h2><p><a href="https://blog.csdn.net/besmarterbestronger/article/details/99443856">参考博客</a></p><p>uWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议， flask 中可以使用 uWSGI 作为web服务，运行 flask 开发的项目 。</p><h3 id="独立使用">独立使用</h3><p>即直接通过uWSGI服务器和web框架构建网站。应用于低并发情况。</p><ol><li class="lvl-3"><p>创建配置文件</p></li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[uwsgi]</span><br><span class="hljs-attr">http</span> = :<span class="hljs-number">39001</span>     <span class="hljs-comment">#  启动程序时所使用的地址和端口，通常在本地运行flask项目，</span><br><span class="hljs-attr">chdir</span> = /root/home/proj/web_flask/ForBlueprint          <span class="hljs-comment">#  项目目录</span><br><span class="hljs-attr">wsgi-file</span> = app_run.py      <span class="hljs-comment"># flask程序的启动文件，通常在本地是通过运行  python manage.py runserver 来启动项目的</span><br><span class="hljs-attr">callable</span> = app         <span class="hljs-comment">#  程序内启用的application变量名</span><br><span class="hljs-attr">processes</span> = <span class="hljs-number">4</span>        <span class="hljs-comment">#  处理器个数，进程个数</span><br><span class="hljs-attr">threads</span> = <span class="hljs-number">2</span>        <span class="hljs-comment">#  线程个数</span><br><span class="hljs-attr">stats</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">39002</span>     <span class="hljs-comment">#  获取uwsgi统计信息的服务地址</span><br><span class="hljs-attr">pidfile</span> = uwsgi.pid        <span class="hljs-comment">#  保存pid信息，方便停止服务和重启的时候用</span><br><span class="hljs-attr">daemonize</span> = ../log/uwsgi.log  <span class="hljs-comment">#  后台运行时记录uwsgi的运行日志</span><br><span class="hljs-attr">lazy-apps</span> = <span class="hljs-literal">true</span>             <span class="hljs-comment">#  当需要连接cassandra时,uwsgi无法启动服务,可以使用该选项设置</span><br><span class="hljs-attr">master-fifo</span> = /opt/mt-search/web-service/mfifo   <span class="hljs-comment"># 使用chain-reloading 逐个work重启,服务不中断, 命令是 echo c &gt; mfifo</span><br><span class="hljs-attr">touch-chain-reload</span> = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>运行</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入虚拟环境</span><br>workon flask_env<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行uwsgi</span><br>uwsgi --ini uwsgi.ini  # 指向uwsgi配置文件具体路径<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">常用命令</span><br>uwsgi --ini uwsgi.ini # 启动<br>uwsgi --reload uwsgi.pid  # 重启<br>uwsgi --stop uwsgi.pid # 停止<br>sudo pkill -f uwsgi -9# 强制关闭<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Django】 06.项目实操</title>
    <link href="/2021/01/31/2021-01-31-01-06.%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%93%8D/"/>
    <url>/2021/01/31/2021-01-31-01-06.%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%93%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="项目准备">项目准备</h2><h3 id="配置开发环境">配置开发环境</h3><p>django环境分为<strong>开发环境</strong>和<strong>生产环境</strong><br><br><br><code>manager.py</code>启动的项目是开发调试环境,<code>wsgi.py</code>启动的是生产环境。应该为两个环境分别配置配置环境。</p><p>创建一个专门的包用于管理配置环境，里面存放开发环境和生产环境。</p><h3 id="配置Jinja2">配置Jinja2</h3><p>修改 settinigs配置文件，添加Jinja2引擎</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sml"><span class="hljs-type">TEMPLATES</span> = [<br>    &#123;<br>        <span class="hljs-symbol">&#x27;BACKEND&#x27;</span>: <span class="hljs-symbol">&#x27;django</span>.template.backends.jinja2.<span class="hljs-type">Jinja2&#x27;</span><br>        ,<br>        <span class="hljs-symbol">&#x27;DIRS&#x27;</span>: [os.path.join(<span class="hljs-type">BASE_DIR</span>, <span class="hljs-symbol">&#x27;templates&#x27;</span>)]<br>        ,<br>        <span class="hljs-symbol">&#x27;APP_DIRS&#x27;</span>: <span class="hljs-type">True</span>,<br>        <span class="hljs-symbol">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class="hljs-symbol">&#x27;context_processors&#x27;</span>: [<br>                <span class="hljs-symbol">&#x27;django</span>.template.context_processors.debug&#x27;,<br>                <span class="hljs-symbol">&#x27;django</span>.template.context_processors.request&#x27;,<br>                <span class="hljs-symbol">&#x27;django</span>.contrib.auth.context_processors.auth&#x27;,<br>                <span class="hljs-symbol">&#x27;django</span>.contrib.messages.context_processors.messages&#x27;,<br>            ],<br>            <span class="hljs-symbol">&#x27;environment&#x27;</span>: <span class="hljs-string">&quot;mallProj.utils.jinja2_env.jinja2_environment&quot;</span>  # 添加的环境文件<br>        &#125;,<br></code></pre></td></tr></table></figure><p>Jinja2引擎默认不带有static和url模板标签语法，需要手动添加。<br><br>创建utils包，用于存放工具类文件，新建一个文件用于jinja2环境，通过以下代码提供Jinja2引擎static和url语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">jinja2_environment</span>(<span class="hljs-params">**option</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;确保可以使用模板引擎中的static和url语句&#x27;&#x27;&#x27;</span><br>    env = Environment(**option)<br><br>    <span class="hljs-comment"># 通过django中的函数来实现相关功能</span><br>    env.<span class="hljs-built_in">globals</span>.update(&#123;<br>        <span class="hljs-string">&#x27;static&#x27;</span>: staticfiles_storage.url,  <span class="hljs-comment"># 文件相对路径转绝对路径</span><br>        <span class="hljs-string">&#x27;url&#x27;</span>: reverse,  <span class="hljs-comment"># 命名空间转具体url</span><br>    &#125;)<br>    <span class="hljs-keyword">return</span> env<br></code></pre></td></tr></table></figure><h3 id="配置MySQL数据库">配置MySQL数据库</h3><p>创建对应的mysql数据库，并添加的专门用户用于管理项目数据库。<br><br></p><p>配置django配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">DATABASES = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-comment"># 数据库引擎 --&gt;mysql</span><br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class="hljs-comment"># 数据库名称</span><br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;mall&#x27;</span>,<br>        <span class="hljs-comment"># 用户名</span><br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;mall_admin&#x27;</span>,<br>        <span class="hljs-comment"># 登录密码</span><br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-comment"># 数据库域名</span><br>        <span class="hljs-string">&#x27;HOST&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>        <span class="hljs-comment"># 端口号</span><br>        <span class="hljs-string">&#x27;PORT&#x27;</span>: <span class="hljs-string">&#x27;3306&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于django默认使用的是MySQLdb数据库驱动，但在python3.x中使用的是pymysql驱动，需要在项目目录下的<code>__init__.py</code>文件中导入。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> pymysql<br><span class="hljs-title">pymysql</span>.install_as_MySQLdb()<br></code></pre></td></tr></table></figure><h3 id="配置redis数据库">配置redis数据库</h3><blockquote><p>具体配置方法查看文档：<a href="https://django-redis-chs.readthedocs.io/zh_CN/latest/">https://django-redis-chs.readthedocs.io/zh_CN/latest/</a></p></blockquote><p>安装<code>django-redis</code>包</p><p>django配置文件中添加：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">CACHES</span> = &#123;<br>    <span class="hljs-string">&quot;default&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;BACKEND&quot;</span>: <span class="hljs-string">&quot;django_redis.cache.RedisCache&quot;</span>,<br>        <span class="hljs-string">&quot;LOCATION&quot;</span>: <span class="hljs-string">&quot;redis://127.0.0.1:6379/1&quot;</span>,<br>        <span class="hljs-string">&quot;OPTIONS&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;CLIENT_CLASS&quot;</span>: <span class="hljs-string">&quot;django_redis.client.DefaultClient&quot;</span>,<br>            <span class="hljs-string">&quot;PASSWORD&quot;</span>: <span class="hljs-string">&quot;我的密码&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置工程日志">配置工程日志</h3><p>在django配置文件中添加LOGGING来配置日志</p><blockquote><p>详细配置参照网络博客</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python">LOGGING = &#123;<br>    <span class="hljs-string">&#x27;version&#x27;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&#x27;disable_existing_loggers&#x27;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-string">&#x27;formatters&#x27;</span>: &#123;<br>        <span class="hljs-comment"># 日志格式</span><br>        <span class="hljs-string">&#x27;standard&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;format&#x27;</span>: <span class="hljs-string">&#x27;[%(asctime)s] [%(filename)s:%(lineno)d] [%(module)s:%(funcName)s] &#x27;</span><br>                      <span class="hljs-string">&#x27;[%(levelname)s]- %(message)s&#x27;</span>&#125;,<br>        <span class="hljs-string">&#x27;simple&#x27;</span>: &#123;  <span class="hljs-comment"># 简单格式</span><br>            <span class="hljs-string">&#x27;format&#x27;</span>: <span class="hljs-string">&#x27;%(levelname)s %(message)s&#x27;</span><br>        &#125;,<br>    &#125;,<br>    <span class="hljs-comment"># 过滤</span><br>    <span class="hljs-string">&#x27;filters&#x27;</span>: &#123;<br>    &#125;,<br>    <span class="hljs-comment"># 定义具体处理日志的方式</span><br>    <span class="hljs-string">&#x27;handlers&#x27;</span>: &#123;<br>        <span class="hljs-comment"># 默认记录所有日志</span><br>        <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,<br>            <span class="hljs-string">&#x27;filename&#x27;</span>: os.path.join(log_path, <span class="hljs-string">&#x27;all-&#123;&#125;.log&#x27;</span>.<span class="hljs-built_in">format</span>(time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>))),<br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">5</span>,  <span class="hljs-comment"># 文件大小</span><br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">5</span>,  <span class="hljs-comment"># 备份数</span><br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;standard&#x27;</span>,  <span class="hljs-comment"># 输出格式</span><br>            <span class="hljs-string">&#x27;encoding&#x27;</span>: <span class="hljs-string">&#x27;utf-8&#x27;</span>,  <span class="hljs-comment"># 设置默认编码，否则打印出来汉字乱码</span><br>        &#125;,<br>        <span class="hljs-comment"># 输出错误日志</span><br>        <span class="hljs-string">&#x27;error&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;ERROR&#x27;</span>,<br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,<br>            <span class="hljs-string">&#x27;filename&#x27;</span>: os.path.join(log_path, <span class="hljs-string">&#x27;error-&#123;&#125;.log&#x27;</span>.<span class="hljs-built_in">format</span>(time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>))),<br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">5</span>,  <span class="hljs-comment"># 文件大小</span><br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">5</span>,  <span class="hljs-comment"># 备份数</span><br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;standard&#x27;</span>,  <span class="hljs-comment"># 输出格式</span><br>            <span class="hljs-string">&#x27;encoding&#x27;</span>: <span class="hljs-string">&#x27;utf-8&#x27;</span>,  <span class="hljs-comment"># 设置默认编码</span><br>        &#125;,<br>        <span class="hljs-comment"># 控制台输出</span><br>        <span class="hljs-string">&#x27;console&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.StreamHandler&#x27;</span>,<br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;standard&#x27;</span><br>        &#125;,<br>        <span class="hljs-comment"># 输出info日志</span><br>        <span class="hljs-string">&#x27;info&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,<br>            <span class="hljs-string">&#x27;filename&#x27;</span>: os.path.join(log_path, <span class="hljs-string">&#x27;info-&#123;&#125;.log&#x27;</span>.<span class="hljs-built_in">format</span>(time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>))),<br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">5</span>,<br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;standard&#x27;</span>,<br>            <span class="hljs-string">&#x27;encoding&#x27;</span>: <span class="hljs-string">&#x27;utf-8&#x27;</span>,  <span class="hljs-comment"># 设置默认编码</span><br>        &#125;,<br>    &#125;,<br>    <span class="hljs-comment"># 配置用哪几种 handlers 来处理日志</span><br>    <span class="hljs-string">&#x27;loggers&#x27;</span>: &#123;<br>        <span class="hljs-comment"># 类型 为 django 处理所有类型的日志， 默认调用</span><br>        <span class="hljs-string">&#x27;django&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;default&#x27;</span>, <span class="hljs-string">&#x27;console&#x27;</span>],<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">True</span>  <span class="hljs-comment"># 是否继续传递日志信息</span><br>        &#125;,<br>        <span class="hljs-comment"># log 调用时需要当作参数传入</span><br>        <span class="hljs-string">&#x27;log&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;info&#x27;</span>, <span class="hljs-string">&#x27;console&#x27;</span>, <span class="hljs-string">&#x27;default&#x27;</span>],<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">True</span><br>        &#125;,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>由于git管理项目时会忽略.log文件，此时logs文件夹为空目录，git拒绝管理空目录，可以通过在logs文件夹下新建一个.gitkeep的文件来保证git管理logs文件夹</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>Django</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Django】 04.db</title>
    <link href="/2021/01/31/2021-01-31-04.db/"/>
    <url>/2021/01/31/2021-01-31-04.db/</url>
    
    <content type="html"><![CDATA[<h2 id="数据库连接：">数据库连接：</h2><p>在settings.py文件中设置数据库相关属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">DATABASES = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-comment"># 数据库引擎 --&gt;mysql</span><br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class="hljs-comment"># 数据库名称</span><br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;django_db1&#x27;</span>,<br>        <span class="hljs-comment"># 用户名</span><br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-comment"># 登录密码</span><br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;172706002&#x27;</span>,<br>        <span class="hljs-comment"># 数据库域名</span><br>        <span class="hljs-string">&#x27;HOST&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>        <span class="hljs-comment"># 端口号</span><br>        <span class="hljs-string">&#x27;PORT&#x27;</span>: <span class="hljs-string">&#x27;3306&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在__init__.py文件中设置</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> pymysql<br><span class="hljs-title">pymysql</span>.install_as_MySQLdb()<br></code></pre></td></tr></table></figure><p>创建连接，进行简单操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> connection<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    cursor = connection.cursor()<br>    sql = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    # insert into book(id,name,author) value(null,&#x27;三国演义&#x27;,&#x27;罗贯中&#x27;)</span><br><span class="hljs-string">    select id,name,author from book</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    cursor.execute(sql)<br>    <span class="hljs-built_in">print</span>(cursor.fetchone())<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><br></code></pre></td></tr></table></figure><h2 id="ORM模型：">ORM模型：</h2><h4 id="创建模型：">创建模型：</h4><ol><li class="lvl-3"><p><code>ORM</code>模型一般放在app的<code>model.py</code>文件中。如果这个模型要映射到数据库，需要将模型所在app在<code>settings.py</code>的<code>INSTALLED_APP</code>中进行安装。</p></li><li class="lvl-3"><p>定义一个类，继承自<code>models.Model</code>。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-comment"># 一个类代表数据库中的一张表</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>(models.Model):<br>    <span class="hljs-comment"># 一条属性代表一个字段</span><br><br>    <span class="hljs-comment"># id:自增长，主键</span><br>    <span class="hljs-built_in">id</span> = models.AutoField(primary_key=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># name:最大长度100，varchar类型，不能为空</span><br>    name = models.CharField(max_length=<span class="hljs-number">100</span>, null=<span class="hljs-literal">False</span>)<br>    <span class="hljs-comment"># author:最大长度100，varchar类型，不能为空</span><br>    author = models.CharField(max_length=<span class="hljs-number">100</span>, null=<span class="hljs-literal">False</span>)<br>    <span class="hljs-comment"># price:float类型（在数据库中为double），不能为空，默认值为0</span><br>    price <br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Publisher</span>(models.Model):<br>    <span class="hljs-comment"># 不设置主键，默认会生成一个id字段为主键</span><br>    <span class="hljs-comment"># 相当于 id = models.AutoField(primary_key=True)</span><br>    name = models.CharField(max_length=<span class="hljs-number">100</span>, null=<span class="hljs-literal">False</span>)<br>    address = models.CharField(max_length=<span class="hljs-number">100</span>, null=<span class="hljs-literal">False</span>)<br>    <br>    <span class="hljs-comment"># 设置外键（连表）</span><br>    fo = models.ForeignKey(to=<span class="hljs-string">&#x27;Book&#x27;</span>, to_field=<span class="hljs-string">&#x27;id&#x27;</span>) <span class="hljs-comment"># 参数：to=外键表，to_field=外键字段</span><br></code></pre></td></tr></table></figure><h4 id="映射到数据库中：">映射到数据库中：</h4><ol><li class="lvl-3"><p>在<code>settings.py</code>中配置好相应数据库。</p></li><li class="lvl-3"><p>在app中定义好模型。继承自<code>model.Model</code>。</p></li><li class="lvl-3"><p>把app添加到<code>INSTALLED_APP</code>中。</p></li><li class="lvl-3"><p>在cmd中，项目目录下，执行<code>python manage.py makemigrations</code>生成迁移脚本文件。</p></li><li class="lvl-3"><p>在cmd中，项目目录下，执行<code>python manage.py migrate</code>来将脚本文件映射到数据库中。</p></li></ol><h4 id="操作数据库：">操作数据库：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 添加数据</span><br>    <span class="hljs-comment"># book = Book(name=&#x27;西游记&#x27;, author=&#x27;施耐庵&#x27;, price=200)</span><br>    <span class="hljs-comment"># book.save()</span><br><br>    <span class="hljs-comment"># 查询</span><br>    <span class="hljs-comment"># book = Book.objects.get(pk=2)  # pk:primary key</span><br>        <br>    <span class="hljs-comment"># print(book.fo.author)  # 正向外键信息查询</span><br>    <br>    p = Publisher.objects.<span class="hljs-built_in">all</span>().first() <span class="hljs-comment"># 获得Publisher的第一条信息</span><br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> p.book_set.<span class="hljs-built_in">all</span>(): <span class="hljs-comment"># p.book_set.all()获得Book中外键为p的所有Book对象</span><br>        <span class="hljs-built_in">print</span>(row.<span class="hljs-built_in">id</span>,row.name) <span class="hljs-comment"># 打印对象的信息</span><br>    <br>    <br><br>    <span class="hljs-comment"># 删除数据</span><br>    <span class="hljs-comment"># book = Book.objects.get(pk=1)</span><br>    <span class="hljs-comment"># book.delete()</span><br><br>    <span class="hljs-comment"># 修改数据</span><br>    book = Book.objects.get(pk=<span class="hljs-number">2</span>)<br>    book.price = <span class="hljs-number">125</span><br>    book.save()<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;图书操作完成&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="数据类型-field-：">数据类型(field)：</h4><ol><li class="lvl-3"><p>BigAutoField</p></li><li class="lvl-3"><p>BooleanField (NullBooleanField)</p></li><li class="lvl-3"><p>CharField</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Article</span>(models.Model):<br>    <span class="hljs-comment"># 默认null=False，即数据不能为空</span><br><br>    <span class="hljs-comment"># 自增长，数据范围较大，映射到数据库中是bigint类型</span><br>    <span class="hljs-built_in">id</span> = models.BigAutoField(primary_key=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># BooleanField是布尔类型，映射到字符串中是tinyint类型，0/1，不能为空，默认是none</span><br>    <span class="hljs-comment"># 要为空的话要用removed = models.NullBooleanField()，默认为空值</span><br>    <span class="hljs-comment"># removed = models.BooleanField()</span><br>    removed = models.NullBooleanField()<br>    <span class="hljs-comment"># CharField:字符类型，必须传max_length参数</span><br>    <span class="hljs-comment"># 如果超过了254个字符，建议使用TextField</span><br>    title = models.CharField(max_length=<span class="hljs-number">100</span>, null=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>DateField、DatetimeField、DateField:</p></li></ol><h6 id="DateField：">DateField：</h6><p>日期类型，在python中是datetime.data类型，记录年月日，映射到数据库中是date类型。可传递参数：</p><ul class="lvl-0"><li class="lvl-2"><p>auto_now：每次save时，自动添加属性为当前时间 --&gt; 更新时间</p></li><li class="lvl-2"><p>auto_time_add：创建时，该条属性自动添加为当前时间 --&gt; 创建时间</p></li></ul><h6 id="DateTimeField：">DateTimeField：</h6><p>时间日期类型，可以存储时间日期，映射到数据库是datetime类型。</p><h6 id="TimeField：">TimeField：</h6><p>时间类型。在数据库中是time类型</p><pre><code class="hljs">navie time 和 aware time:    navie time指没有指定时区的时间类型    aware time指已经指定时区的时间类型pytz库：    专门用来处理时区问题的库，安装django时默认安装。    astimezone方法：    pytz库下一个转换不同时区时间的方法，这个方法只能被aware time类型调用。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pytz<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetiem<br>now = datetime.now <span class="hljs-comment"># now是一个naive时间</span><br>utc_time = pytz.timezone(<span class="hljs-string">&#x27;UTC&#x27;</span>) <span class="hljs-comment"># 定义UTC的时区对象</span><br>utc_now = now.astimezone(utc_timezone) <span class="hljs-comment"># 将当前的时区转换为UTC时区下的时间</span><br>&gt;&gt; ValueError：naive时间对象不能使用astimezone方法（在linux系统会发生，Windows不会）<br><br>now = now.replace(tzinfo=pytz.timezone(<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>)) <span class="hljs-comment"># replace方法更改时间中的时区属性</span><br>utc_now = now.astimezone(utc_timezone)<br><span class="hljs-comment"># 这时候可以正确转换</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">属性和方法：    django.utils.timezone.now方法：        会根据settings.py中是否设置了`USE_TZ=True`来获取当前时间。如果设置了，则返回一个aware的UTC时间。没有设置则返回navie时间。    django.utils.timezone.localtime方法：        会根据settings.py中的TIME_ZONE来将一个aware类型的时间转换为TIME_ZONE指定时区的时间</code></pre><ol start="5"><li class="lvl-3"><p>EmailField：类似于CharField，在数据库也是varchar类型，最大长度是254。</p></li><li class="lvl-3"><p>FileField：用来存储文件。</p></li><li class="lvl-3"><p>ImageField：用来存储图片</p></li><li class="lvl-3"><p>FloatFIeld：浮点类型，映射到数据库中是float类型</p></li><li class="lvl-3"><p>IntegerField：整形</p></li><li class="lvl-4"><p>PositiveIntegerField：正整型</p></li><li class="lvl-4"><p>SmallIntegerField：小整型</p></li><li class="lvl-4"><p>PositiveSmallIntegerField：正小整型</p></li><li class="lvl-4"><p>TextField：大量的文本类型，映射到数据库中是longtext类型</p></li><li class="lvl-4"><p>UUIDField：只能存储<code>uuid</code>格式的字符串，一般作为主键</p></li><li class="lvl-4"><p>URlField：类似于<code>CharField</code>，只不过只能存储url格式的字符串，默认<code>max_length</code>为200</p></li></ol><h4 id="Field中的常用参数：">Field中的常用参数：</h4><h6 id="null：">null：</h6><p>默认为False。在使用字符串相关的Field时，建议不要使用这个参数。字符串相关Field默认值是空字符串，若指定null=True会产生歧义。</p><h6 id="blank：">blank：</h6><p>标识这个字符串在表单验证时可以为空。默认是False</p><h6 id="db-column：">db_column：</h6><p>这个字段在数据库中的名字，若没有设置默认使用模型中属性的名字</p><h6 id="default：">default：</h6><p>默认值。可以为一个值，也可以为一个函数，但不支持lambda表达式，也不支持列表字典集合等可变的数据结构</p><h6 id="primary-key：">primary_key：</h6><p>标识主键</p><h6 id="unique：">unique：</h6><p>在表中这个数据是否唯一</p><h4 id="Meta类：">Meta类：</h4><p>对于一些模型级别的配置，可以在模型中定义一个Meta类，在其中添加一些属性来控制模型。</p><h6 id="db-table">db_table:</h6><p>设置表名</p><h6 id="ordering：">ordering：</h6><p>设置在提取数据时的排序方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Page</span>(models.Model):<br>    name = models.CharField(max_length=<span class="hljs-number">100</span>)<br>    creat_time = models.DateTimeField(auto_now=<span class="hljs-literal">True</span>)<br>    title = models.CharField(max_length=<span class="hljs-number">100</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;id：%s，name：%s，creat_time：%s，title：%s&#x27;</span> % (self.<span class="hljs-built_in">id</span>, self.name, self.creat_time, self.title)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;page&#x27;</span>  <span class="hljs-comment"># 表名</span><br>        ordering = [<span class="hljs-string">&#x27;-creat_time&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>]  <span class="hljs-comment"># 排序，前面加&#x27;-&#x27;表示降序，默认升序。</span><br>        <span class="hljs-comment">#优先以第一个元素进行排序，相同时，根据第二个元素</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>Django</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CookBook】 Chapter8</title>
    <link href="/2020/12/11/2020-12-11-Chapter8/"/>
    <url>/2020/12/11/2020-12-11-Chapter8/</url>
    
    <content type="html"><![CDATA[<h1>Chapter8 类与对象</h1><h4 id="5-1-改变对象的字符串显示">5.1 改变对象的字符串显示</h4><pre><code class="hljs">__str__() 和 __repr__()</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x, y</span>):<br>        self.x = x<br>        self.y = y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Pair(&#123;0.x!r&#125;, &#123;0.y!r&#125;)&#x27;</span>.<span class="hljs-built_in">format</span>(self)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;(&#123;0.x!s&#125;, &#123;0.y!s&#125;)&#x27;</span>.<span class="hljs-built_in">format</span>(self)<br>        <br><span class="hljs-meta">&gt;&gt;&gt; </span>p = Pair(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>p<br>Pair(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>) <span class="hljs-comment"># __repr__() output</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(p)<br>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>) <span class="hljs-comment"># __str__() output</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CookBook】 Chapter5</title>
    <link href="/2020/12/11/2020-12-11-Chapter5/"/>
    <url>/2020/12/11/2020-12-11-Chapter5/</url>
    
    <content type="html"><![CDATA[<h1>Chapter5 文件与IO</h1><h4 id="5-1-读写文本数据">5.1 读写文本数据</h4><pre><code class="hljs">ascii对应从U+0000到U+007F范围内的7位字符。latin-1是字节0-255到U+0000至U+00FF范围内Unicode字符的直接映射。当读取一个未知编码的文本时使用latin-1编码永远不会产生解码错误。</code></pre><ul class="lvl-0"><li class="lvl-2"><p>可以给 open() 函数传递一个可选的 errors 参数来处理文本编码错误</p></li></ul><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-comment"># Replace bad chars with Unicode U+fffd replacement char</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sample.txt&#x27;</span>, <span class="hljs-string">&#x27;rt&#x27;</span>, encoding=<span class="hljs-string">&#x27;ascii&#x27;</span>, errors=<span class="hljs-string">&#x27;replace&#x27;</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">f.read()</span><br>&#x27;Spicy Jalape?o!&#x27;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-comment"># Ignore bad chars entirely</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">g = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sample.txt&#x27;</span>, <span class="hljs-string">&#x27;rt&#x27;</span>, encoding=<span class="hljs-string">&#x27;ascii&#x27;</span>, errors=<span class="hljs-string">&#x27;ignore&#x27;</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">g.read()</span><br>&#x27;Spicy Jalapeo!&#x27;<br></code></pre></td></tr></table></figure><h4 id="5-2-3-打印输出">5.2-3 打印输出</h4><blockquote><p>在 print() 函数中指定 <code>file</code> 关键字参数</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;somefile.txt&#x27;</span>, <span class="hljs-string">&#x27;wt&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    print(<span class="hljs-string">&#x27;Hello World!&#x27;</span>, <span class="hljs-built_in">file</span>=f)<br></code></pre></td></tr></table></figure><blockquote><p>改变默认的分隔符或者行尾符，可以使用在 print() 函数中使用<code>sep</code> 和 <code>end</code> 关键字参数</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&gt;&gt;&gt; <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ACME&#x27;</span>, 50, 91.5)<br>ACME 50 91.5<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ACME&#x27;</span>, 50, 91.5, <span class="hljs-attribute">sep</span>=<span class="hljs-string">&#x27;,&#x27;</span>)<br>ACME,50,91.5<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ACME&#x27;</span>, 50, 91.5, <span class="hljs-attribute">sep</span>=<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-attribute">end</span>=<span class="hljs-string">&#x27;!!\n&#x27;</span>)<br>ACME,50,91.5!!<br></code></pre></td></tr></table></figure><h4 id="5-5-x模式–禁止覆盖写入">5.5 x模式–禁止覆盖写入</h4><pre><code class="hljs">你想像一个文件中写入数据，但是前提必须是这个文件在文件系统上不存在。也就是不允许覆盖已存在的文件内容。</code></pre><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;somefile&#x27;</span>, <span class="hljs-string">&#x27;wt&#x27;</span>) <span class="hljs-keyword">as</span> f:</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">    f.write(<span class="hljs-string">&#x27;Hello\n&#x27;</span>)</span><br><span class="hljs-meta prompt_">...</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;somefile&#x27;</span>, <span class="hljs-string">&#x27;xt&#x27;</span>) <span class="hljs-keyword">as</span> f:</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">    f.write(<span class="hljs-string">&#x27;Hello\n&#x27;</span>)</span><br><span class="hljs-meta prompt_">...</span><br>Traceback (most recent call last):<br>File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;<br>FileExistsError: [Errno 17] File exists: &#x27;somefile&#x27;<br></code></pre></td></tr></table></figure><h4 id="5-6-字符串IO">5.6 字符串IO</h4><pre><code class="hljs">使用 io.StringIO() 和 io.BytesIO() 类来创建类文件对象操作字符串数据。</code></pre><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s = io.StringIO()</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s.write(<span class="hljs-string">&#x27;Hello World\n&#x27;</span>)</span><br>12<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;This is a test&#x27;</span>, file=s)</span><br>15<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-comment"># Get all of the data written so far</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s.getvalue()</span><br>&#x27;Hello World\nThis is a test\n&#x27;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span><br><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-comment"># Wrap a file interface around an existing string</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s = io.StringIO(<span class="hljs-string">&#x27;Hello\nWorld\n&#x27;</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s.read(<span class="hljs-number">4</span>)</span><br>&#x27;Hell&#x27;<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">s.read()</span><br>&#x27;o\nWorld\n&#x27;<br></code></pre></td></tr></table></figure><h4 id="5-7-读写压缩文件">5.7 读写压缩文件</h4><h4 id="5-19-临时文件">5.19 临时文件</h4>]]></content>
    
    
    <categories>
      
      <category>语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CookBook】 Chapter2</title>
    <link href="/2020/12/09/2020-12-09-Chapter2/"/>
    <url>/2020/12/09/2020-12-09-Chapter2/</url>
    
    <content type="html"><![CDATA[<h1>Chapter2 字符串和文本</h1><h4 id="对齐–just-format">对齐–just,format</h4><pre><code class="hljs">ljust() , rjust() 和 center()</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>text = <span class="hljs-string">&#x27;Hello World&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>text.ljust(<span class="hljs-number">20</span>)<br><span class="hljs-string">&#x27;Hello World         &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>text.rjust(<span class="hljs-number">20</span>)<br><span class="hljs-string">&#x27;         Hello World&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>text.center(<span class="hljs-number">20</span>)<br><span class="hljs-string">&#x27;    Hello World     &#x27;</span><br><span class="hljs-comment"># 所有这些方法都能接受一个可选的填充字符</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>text.rjust(<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;=&#x27;</span>)<br><span class="hljs-string">&#x27;=========Hello World&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>text.center(<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;*&#x27;</span>)<br><span class="hljs-string">&#x27;****Hello World*****&#x27;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">函数 format() 同样可以用来很容易的对齐字符串。你要做的就是使用&lt;,&gt;或者^字符后面紧跟一个指定的宽度。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">format</span>(text, <span class="hljs-string">&#x27;&gt;20&#x27;</span>)<br><span class="hljs-string">&#x27;         Hello World&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">format</span>(text, <span class="hljs-string">&#x27;&lt;20&#x27;</span>)<br><span class="hljs-string">&#x27;Hello World         &#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">format</span>(text, <span class="hljs-string">&#x27;^20&#x27;</span>)<br><span class="hljs-string">&#x27;    Hello World     &#x27;</span><br><span class="hljs-comment"># 指定一个非空格的填充字符</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">format</span>(text, <span class="hljs-string">&#x27;=&gt;20s&#x27;</span>)<br><span class="hljs-string">&#x27;=========Hello World&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">format</span>(text, <span class="hljs-string">&#x27;*^20s&#x27;</span>)<br><span class="hljs-string">&#x27;****Hello World*****&#x27;</span><br><span class="hljs-comment"># 格式化多个值</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#123;:&gt;10s&#125; &#123;:&gt;10s&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-string">&#x27;World&#x27;</span>)<br><span class="hljs-string">&#x27;     Hello      World&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="合并拼接">合并拼接</h4><pre><code class="hljs">避免字符串拼接！使用join</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>data = [<span class="hljs-string">&#x27;ACME&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-number">91.1</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;,&#x27;</span>.join(<span class="hljs-built_in">str</span>(d) <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> data)<br><span class="hljs-string">&#x27;ACME,50,91.1&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(a + <span class="hljs-string">&#x27;:&#x27;</span> + b + <span class="hljs-string">&#x27;:&#x27;</span> + c) <span class="hljs-comment"># Ugly</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;:&#x27;</span>.join([a, b, c])) <span class="hljs-comment"># Still ugly</span><br><span class="hljs-built_in">print</span>(a, b, c, sep=<span class="hljs-string">&#x27;:&#x27;</span>) <span class="hljs-comment"># Better</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CookBook】 Chapter1</title>
    <link href="/2020/12/08/2020-12-08-Chapter1/"/>
    <url>/2020/12/08/2020-12-08-Chapter1/</url>
    
    <content type="html"><![CDATA[<h2 id="collections-deque">collections.deque</h2><p>使用deque(maxlen=N)构造函数会新建一个固定大小的队列。当新的元素加入并且这个队列已满的时候，最老的元素会自动被移除掉。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>q = deque(maxlen=<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>q.append(<span class="hljs-number">1</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>q.append(<span class="hljs-number">2</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>q.append(<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>q<br>deque([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], maxlen=<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>q.append(<span class="hljs-number">4</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>q<br>deque([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], maxlen=<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>q.append(<span class="hljs-number">5</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>q<br>deque([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], maxlen=<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>如果你不设置最大队列大小，那么就会得到一个无限大小队列，你可以在队列的两端执行添加和弹出元素的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>q = deque()<br><span class="hljs-meta">&gt;&gt;&gt; </span>q.append(<span class="hljs-number">1</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>q.append(<span class="hljs-number">2</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>q.append(<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>q<br>deque([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>q.appendleft(<span class="hljs-number">4</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>q<br>deque([<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>q.pop()<br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>q<br>deque([<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>q.popleft()<br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="heapq">heapq</h2><h2 id="字典操作">字典操作</h2><h6 id="1-寻找相同点-比如相同的键、相同的值等等">1. 寻找相同点(比如相同的键、相同的值等等)</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = &#123;<span class="hljs-string">&#x27;x&#x27;</span> : <span class="hljs-number">1</span>,<span class="hljs-string">&#x27;y&#x27;</span> : <span class="hljs-number">2</span>,<span class="hljs-string">&#x27;z&#x27;</span> : <span class="hljs-number">3</span>&#125;<br>b = &#123;<span class="hljs-string">&#x27;w&#x27;</span> : <span class="hljs-number">10</span>,<span class="hljs-string">&#x27;x&#x27;</span> : <span class="hljs-number">11</span>,<span class="hljs-string">&#x27;y&#x27;</span> : <span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Find keys in common</span><br>a.keys() &amp; b.keys()     <span class="hljs-comment"># &#123; &#x27;x&#x27;, &#x27;y&#x27; &#125;</span><br><span class="hljs-comment"># Find keys in a that are not in b</span><br>a.keys() - b.keys()     <span class="hljs-comment"># &#123; &#x27;z&#x27; &#125;</span><br><span class="hljs-comment"># Find (key,value) pairs in common</span><br>a.items() &amp; b.items()   <span class="hljs-comment"># &#123; (&#x27;y&#x27;, 2) &#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Make a new dictionary with certain keys removed</span><br>c = &#123;key:a[key] <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> a.keys() - &#123;<span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>&#125;&#125;<br><span class="hljs-comment"># c is &#123;&#x27;x&#x27;: 1, &#x27;y&#x27;: 2&#125;</span><br></code></pre></td></tr></table></figure><h6 id="2-字典排序">2. 字典排序</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">prices = &#123;<br>    <span class="hljs-string">&#x27;ACME&#x27;</span>: <span class="hljs-number">45.23</span>,<br>    <span class="hljs-string">&#x27;AAPL&#x27;</span>: <span class="hljs-number">612.78</span>,<br>    <span class="hljs-string">&#x27;IBM&#x27;</span>: <span class="hljs-number">205.55</span>,<br>    <span class="hljs-string">&#x27;HPQ&#x27;</span>: <span class="hljs-number">37.20</span>,<br>    <span class="hljs-string">&#x27;FB&#x27;</span>: <span class="hljs-number">10.75</span><br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">为了对字典值执行计算操作，通常需要使用zip()函数先将键和值反转过来。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">min_price = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">zip</span>(prices.values(), prices.keys()))<br><span class="hljs-comment"># min_price is (10.75, &#x27;FB&#x27;)</span><br>max_price = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">zip</span>(prices.values(), prices.keys()))<br><span class="hljs-comment"># max_price is (612.78, &#x27;AAPL&#x27;)</span><br>prices_sorted = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">zip</span>(prices.values(), prices.keys()))<br><span class="hljs-comment"># prices_sorted is [(10.75, &#x27;FB&#x27;), (37.2, &#x27;HPQ&#x27;),</span><br><span class="hljs-comment">#                   (45.23, &#x27;ACME&#x27;), (205.55, &#x27;IBM&#x27;),</span><br><span class="hljs-comment">#                   (612.78, &#x27;AAPL&#x27;)]</span><br></code></pre></td></tr></table></figure><p><em>需要注意的是zip()函数创建的是一个只能访问一次的迭代器。</em></p><h6 id="3-OrderedDict">3. OrderedDict</h6><br><h6 id="4-合并-ChainMap">4. 合并-ChainMap</h6><pre><code class="hljs">现在有多个字典或者映射，你想将它们从逻辑上合并为一个单一的映射后执行某些操作，比如查找值或者检查某些键是否存在</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = &#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;z&#x27;</span>: <span class="hljs-number">3</span> &#125;<br>b = &#123;<span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;z&#x27;</span>: <span class="hljs-number">4</span> &#125;<br><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> ChainMap<br>c = ChainMap(a,b)<br><span class="hljs-built_in">print</span>(c[<span class="hljs-string">&#x27;x&#x27;</span>]) <span class="hljs-comment"># Outputs 1 (from a)</span><br><span class="hljs-built_in">print</span>(c[<span class="hljs-string">&#x27;y&#x27;</span>]) <span class="hljs-comment"># Outputs 2 (from b)</span><br><span class="hljs-built_in">print</span>(c[<span class="hljs-string">&#x27;z&#x27;</span>]) <span class="hljs-comment"># Outputs 3 (from a)</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>对于字典的更新或删除操作总是影响的是列表中第一个字典</strong></p></li></ul><h2 id="序列-列表-操作">序列(列表)操作</h2><h6 id="1-切片–slice">1. 切片–slice</h6><pre><code class="hljs">内置的slice()函数创建了一个切片对象,供切片命名</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">record = <span class="hljs-string">&#x27;....................100 .......513.25 ..........&#x27;</span><br>SHARES = <span class="hljs-built_in">slice</span>(<span class="hljs-number">20</span>, <span class="hljs-number">23</span>)<br>PRICE = <span class="hljs-built_in">slice</span>(<span class="hljs-number">31</span>, <span class="hljs-number">37</span>)<br>cost = <span class="hljs-built_in">int</span>(record[SHARES]) * <span class="hljs-built_in">float</span>(record[PRICE])<br></code></pre></td></tr></table></figure><pre><code class="hljs">部分属性及方法</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-built_in">slice</span>(<span class="hljs-number">5</span>, <span class="hljs-number">50</span>, <span class="hljs-number">2</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.start<br><span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.stop<br><span class="hljs-number">50</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.step<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">另外，你还能通过调用切片的indices(size)方法将它映射到一个确定大小的序列上，这个方法返回一个三元组(start,stop,step)，所有值都会被合适的缩小以满足边界限制，从而使用的时候避免出现IndexError异常。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;HelloWorld&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.indices(<span class="hljs-built_in">len</span>(s))<br>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(*a.indices(<span class="hljs-built_in">len</span>(s))):<br><span class="hljs-meta">... </span><span class="hljs-built_in">print</span>(s[i])<br>...<br>W<br>r<br>d<br></code></pre></td></tr></table></figure><h6 id="2-排序–itemgetter，attrgetter">2. 排序–itemgetter，attrgetter</h6><pre><code class="hljs">都可以用lambda表达式替代，但使用内置函数效率更高</code></pre><br><pre><code class="hljs">*字典列表排序*通过使用operator模块的itemgetter函数，可以非常容易的排序这样的数据结构</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">rows = [<br>    &#123;<span class="hljs-string">&#x27;fname&#x27;</span>: <span class="hljs-string">&#x27;Brian&#x27;</span>, <span class="hljs-string">&#x27;lname&#x27;</span>: <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">1003</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;fname&#x27;</span>: <span class="hljs-string">&#x27;David&#x27;</span>, <span class="hljs-string">&#x27;lname&#x27;</span>: <span class="hljs-string">&#x27;Beazley&#x27;</span>, <span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">1002</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;fname&#x27;</span>: <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;lname&#x27;</span>: <span class="hljs-string">&#x27;Cleese&#x27;</span>, <span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">1001</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;fname&#x27;</span>: <span class="hljs-string">&#x27;Big&#x27;</span>, <span class="hljs-string">&#x27;lname&#x27;</span>: <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">1004</span>&#125;<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> itemgetter<br><span class="hljs-meta">&gt;&gt;&gt; </span>rows_by_fname = <span class="hljs-built_in">sorted</span>(rows,key=itemgetter(<span class="hljs-string">&#x27;fname&#x27;</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>rows_by_uid = <span class="hljs-built_in">sorted</span>(rows,key=itemgetter(<span class="hljs-string">&#x27;uid&#x27;</span>))<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>rows_by_fname<br>[&#123;<span class="hljs-string">&#x27;fname&#x27;</span>: <span class="hljs-string">&#x27;Big&#x27;</span>, <span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">1004</span>, <span class="hljs-string">&#x27;lname&#x27;</span>: <span class="hljs-string">&#x27;Jones&#x27;</span>&#125;,<br>&#123;<span class="hljs-string">&#x27;fname&#x27;</span>: <span class="hljs-string">&#x27;Brian&#x27;</span>, <span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">1003</span>, <span class="hljs-string">&#x27;lname&#x27;</span>: <span class="hljs-string">&#x27;Jones&#x27;</span>&#125;,<br>&#123;<span class="hljs-string">&#x27;fname&#x27;</span>: <span class="hljs-string">&#x27;David&#x27;</span>, <span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">1002</span>, <span class="hljs-string">&#x27;lname&#x27;</span>: <span class="hljs-string">&#x27;Beazley&#x27;</span>&#125;,<br>&#123;<span class="hljs-string">&#x27;fname&#x27;</span>: <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">1001</span>, <span class="hljs-string">&#x27;lname&#x27;</span>: <span class="hljs-string">&#x27;Cleese&#x27;</span>&#125;]<br><span class="hljs-meta">&gt;&gt;&gt; </span>rows_by_uid<br>[&#123;<span class="hljs-string">&#x27;fname&#x27;</span>: <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">1001</span>, <span class="hljs-string">&#x27;lname&#x27;</span>: <span class="hljs-string">&#x27;Cleese&#x27;</span>&#125;,<br>&#123;<span class="hljs-string">&#x27;fname&#x27;</span>: <span class="hljs-string">&#x27;David&#x27;</span>, <span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">1002</span>, <span class="hljs-string">&#x27;lname&#x27;</span>: <span class="hljs-string">&#x27;Beazley&#x27;</span>&#125;,<br>&#123;<span class="hljs-string">&#x27;fname&#x27;</span>: <span class="hljs-string">&#x27;Brian&#x27;</span>, <span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">1003</span>, <span class="hljs-string">&#x27;lname&#x27;</span>: <span class="hljs-string">&#x27;Jones&#x27;</span>&#125;,<br>&#123;<span class="hljs-string">&#x27;fname&#x27;</span>: <span class="hljs-string">&#x27;Big&#x27;</span>, <span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">1004</span>, <span class="hljs-string">&#x27;lname&#x27;</span>: <span class="hljs-string">&#x27;Jones&#x27;</span>&#125;]<br><br><span class="hljs-comment"># itemgetter()函数也支持多个keys</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>rows_by_lfname = <span class="hljs-built_in">sorted</span>(rows,  key=itemgetter(<span class="hljs-string">&#x27;lname&#x27;</span>,<span class="hljs-string">&#x27;fname&#x27;</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>rows_by_lfname<br>[&#123;<span class="hljs-string">&#x27;fname&#x27;</span>: <span class="hljs-string">&#x27;David&#x27;</span>, <span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">1002</span>, <span class="hljs-string">&#x27;lname&#x27;</span>: <span class="hljs-string">&#x27;Beazley&#x27;</span>&#125;,<br>&#123;<span class="hljs-string">&#x27;fname&#x27;</span>: <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">1001</span>, <span class="hljs-string">&#x27;lname&#x27;</span>: <span class="hljs-string">&#x27;Cleese&#x27;</span>&#125;,<br>&#123;<span class="hljs-string">&#x27;fname&#x27;</span>: <span class="hljs-string">&#x27;Big&#x27;</span>, <span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">1004</span>, <span class="hljs-string">&#x27;lname&#x27;</span>: <span class="hljs-string">&#x27;Jones&#x27;</span>&#125;,<br>&#123;<span class="hljs-string">&#x27;fname&#x27;</span>: <span class="hljs-string">&#x27;Brian&#x27;</span>, <span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-number">1003</span>, <span class="hljs-string">&#x27;lname&#x27;</span>: <span class="hljs-string">&#x27;Jones&#x27;</span>&#125;]<br></code></pre></td></tr></table></figure><pre><code class="hljs">排序类型相同的对象</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, user_id</span>):<br>        self.user_id = user_id<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;User(&#123;&#125;)&#x27;</span>.<span class="hljs-built_in">format</span>(self.user_id)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> attrgetter<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">sorted</span>(users, key=attrgetter(<span class="hljs-string">&#x27;user_id&#x27;</span>))<br>[User(<span class="hljs-number">3</span>), User(<span class="hljs-number">23</span>), User(<span class="hljs-number">99</span>)]<br></code></pre></td></tr></table></figure><h6 id="3-分组–itertools-groupby">3. 分组–itertools.groupby()</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>rows = [<br>    &#123;<span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;5412 N CLARK&#x27;</span>, <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;07/01/2012&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;5148 N CLARK&#x27;</span>, <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;07/04/2012&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;5800 E 58TH&#x27;</span>, <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;07/02/2012&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;2122 N CLARK&#x27;</span>, <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;07/03/2012&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;5645 N RAVENSWOOD&#x27;</span>, <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;07/02/2012&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;1060 W ADDISON&#x27;</span>, <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;07/02/2012&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;4801 N BROADWAY&#x27;</span>, <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;07/01/2012&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;1039 W GRANVILLE&#x27;</span>, <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;07/04/2012&#x27;</span>&#125;,<br>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> date, items <span class="hljs-keyword">in</span> groupby(rows, key=itemgetter(<span class="hljs-string">&#x27;date&#x27;</span>)):<br>    <span class="hljs-built_in">print</span>(date)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>, i)<br><br>07/01/<span class="hljs-number">2012</span><br>  &#123;<span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;07/01/2012&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;5412 N CLARK&#x27;</span>&#125;<br>  &#123;<span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;07/01/2012&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;4801 N BROADWAY&#x27;</span>&#125;<br>07/02/<span class="hljs-number">2012</span><br>  &#123;<span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;07/02/2012&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;5800 E 58TH&#x27;</span>&#125;<br>  &#123;<span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;07/02/2012&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;5645 N RAVENSWOOD&#x27;</span>&#125;<br>  &#123;<span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;07/02/2012&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;1060 W ADDISON&#x27;</span>&#125;<br>07/03/<span class="hljs-number">2012</span><br>  &#123;<span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;07/03/2012&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;2122 N CLARK&#x27;</span>&#125;<br>07/04/<span class="hljs-number">2012</span><br>  &#123;<span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;07/04/2012&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;5148 N CLARK&#x27;</span>&#125;<br>  &#123;<span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;07/04/2012&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;1039 W GRANVILLE&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h6 id="4-过滤–itertools-compress">4. 过滤–itertools.compress()</h6><pre><code class="hljs">以一个 iterable 对象和一个相对应的Boolean选择器序列作为输入参数。然后输出 iterable 对象中对应选择器为True的元素也可以通过filter()和推导式</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">addresses = [<br>    <span class="hljs-string">&#x27;5412 N CLARK&#x27;</span>,<br>    <span class="hljs-string">&#x27;5148 N CLARK&#x27;</span>,<br>    <span class="hljs-string">&#x27;5800 E 58TH&#x27;</span>,<br>    <span class="hljs-string">&#x27;2122 N CLARK&#x27;</span><br>    <span class="hljs-string">&#x27;5645 N RAVENSWOOD&#x27;</span>,<br>    <span class="hljs-string">&#x27;1060 W ADDISON&#x27;</span>,<br>    <span class="hljs-string">&#x27;4801 N BROADWAY&#x27;</span>,<br>    <span class="hljs-string">&#x27;1039 W GRANVILLE&#x27;</span>,<br>]<br>counts = [ <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> compress<br><span class="hljs-meta">&gt;&gt;&gt; </span>more5 = [n &gt; <span class="hljs-number">5</span> <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> counts]<br><span class="hljs-meta">&gt;&gt;&gt; </span>more5<br>[<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(compress(addresses, more5))<br>[<span class="hljs-string">&#x27;5800 E 58TH&#x27;</span>, <span class="hljs-string">&#x27;4801 N BROADWAY&#x27;</span>, <span class="hljs-string">&#x27;1039 W GRANVILLE&#x27;</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Linux命令】 05_关机重启命令</title>
    <link href="/2020/11/22/2020-11-22-05_%E5%85%B3%E6%9C%BA%E9%87%8D%E5%90%AF%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/11/22/2020-11-22-05_%E5%85%B3%E6%9C%BA%E9%87%8D%E5%90%AF%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="系统运行级别">系统运行级别</h3><pre><code class="hljs">0 关机1 单用户（相当于Windows安全模式）2 不完全多用户，不含NFS服务（不能联网）3 完全多用户4 未分配5 图形界面6 重启命令：runlevel 查看运行级别会显示上一个运行级别和当前运行级别</code></pre><h4 id="1-shutdown">1. shutdown</h4><pre><code class="hljs">功能：关机，重启选项： -c 取消前一个关机命令       -h 关机       -r 重启语法：shutdown 选项 时间例：shutdown -h now 马上关机    shutdown -r 20:30 指定时间重启    其他关机命令：    halt    poweroff    init0其他重启命令：    reboot    init 6注：推荐使用shutdown，更安全</code></pre><h4 id="2-logout">2. logout</h4><pre><code class="hljs">功能：退出登录语法：logout</code></pre>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Django】 03.Template</title>
    <link href="/2020/11/22/2020-11-22-03.Template/"/>
    <url>/2020/11/22/2020-11-22-03.Template/</url>
    
    <content type="html"><![CDATA[## 渲染模板：#### 两种方式：1.`render_to_string`：找到模板，然后将模板编译后渲染成python的字符串格式。最后通过HttpResponse类包装成一个对象返回。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br><span class="hljs-keyword">from</span> django.template.loader <span class="hljs-keyword">import</span> render_to_string<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    html = render_to_string(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br>    <span class="hljs-keyword">return</span> HttpResponse(html)<br></code></pre></td></tr></table></figure>2.`render`：直接将模板渲染成字符串并包装成HttpResponse对象。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;index.html&#x27;</span>)<br></code></pre></td></tr></table></figure>## 模板路径配置：1.模板文件应放在`template`文件夹中2.调用模板文件，不用写文件夹路径，直接写名字就行，会默认从template文件夹调用3.这部分设置在settings.py文件`TEMPLATE属性`中，可以更改其中的`DIRS`属性来更改默认查找位置4.settings.py关于templates配置的属性介绍：- `DIRS`：这是一个列表，在这个列表中可以存放所有的模板路径，在使用render方法渲染函数时，会在这个列表中优先查找路径- `APP_DIRS`：默认为`True`，设置为True时，会在`INSTALLED_APPS`的安装了的app下的templates文件夹中查找模板- 查找顺序：    - 先在DIRS列表下查找模板，如果有，就返回    - 如果DIRS列表中路径找不到，会检查当前视图函数所在的app是否安装，若安装，在当前这个app下的templates文件夹中查找模板    - 若当前app下templates文件夹下没找到模板，则在其他已安装的app的templates文件夹中查找    - 若还没找到，跑出TemplateDoesNotExist异常<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class="hljs-comment"># 要安装直接写进去</span><br>    <span class="hljs-string">&#x27;front&#x27;</span><br>]<br><br>TEMPLATES = [<br>    &#123;<br>        <span class="hljs-string">&#x27;BACKEND&#x27;</span>: <span class="hljs-string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,<br>        <span class="hljs-string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="hljs-string">&#x27;templates&#x27;</span>)]<br>        ,<br>        <span class="hljs-string">&#x27;APP_DIRS&#x27;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;context_processors&#x27;</span>: [<br>                <span class="hljs-string">&#x27;django.template.context_processors.debug&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.template.context_processors.request&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,<br>            ],<br>        &#125;,<br>    &#125;,<br>]<br></code></pre></td></tr></table></figure>## 模板变量：1.模板中使用变量要在html文件中，把变量放在`{{ 变量 }}`中2.变量内容放在render的`context`参数中，以`字典形式{'变量名': 变量值}`<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, username</span>):<br>        self.username = username<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br><br>    <span class="hljs-comment"># 字符串型：</span><br>    <span class="hljs-comment"># content = &#123;</span><br>    <span class="hljs-comment">#     &#x27;person&#x27;: &#x27;鲁班大师&#x27;</span><br>    <span class="hljs-comment"># &#125;</span><br><br>    <span class="hljs-comment"># 类属性型：</span><br>    <span class="hljs-comment"># p = Person(&#x27;wxh&#x27;)</span><br>    <span class="hljs-comment"># content = &#123;</span><br>    <span class="hljs-comment">#     &#x27;person&#x27;: p</span><br>    <span class="hljs-comment"># &#125;</span><br><br>    <span class="hljs-comment"># 列表型：</span><br>    <span class="hljs-comment"># content = &#123;</span><br>    <span class="hljs-comment">#     &#x27;person&#x27;: [</span><br>    <span class="hljs-comment">#         &#x27;鲁班一号&#x27;,</span><br>    <span class="hljs-comment">#         &#x27;程咬金&#x27;,</span><br>    <span class="hljs-comment">#         &#x27;李白&#x27;,</span><br>    <span class="hljs-comment">#         &#x27;刘禅&#x27;</span><br>    <span class="hljs-comment">#     ]</span><br>    <span class="hljs-comment"># &#125;</span><br><br>    <span class="hljs-comment"># 字典型：</span><br>    content = &#123;<br>        <span class="hljs-string">&#x27;person&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;user&#x27;</span>: <span class="hljs-string">&#x27;wxh&#x27;</span>,<br>            <span class="hljs-string">&#x27;admin&#x27;</span>: <span class="hljs-string">&#x27;wxhnb&#x27;</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;index.html&#x27;</span>, context=content)<br></code></pre></td></tr></table></figure>3.四种变量访问方式：- 类属性：`变量名.属性名` <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123; person.uername &#125;&#125;<br></code></pre></td></tr></table></figure>- 列表/元组：`变量名.下标`<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123; person<span class="hljs-number">.1</span> &#125;&#125;<br></code></pre></td></tr></table></figure>- 字典：`变量名.key名`<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123; person.admin &#125;&#125; <br></code></pre></td></tr></table></figure>- 字符串：`变量名`<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123; person &#125;&#125;<br></code></pre></td></tr></table></figure>4.注意：在变量类型是字典时，尽量不要使用`keys,values,items`等字典的方法来做key名，不然访问时会出现`{{ person.items }}`等会出现歧义## 模板标签：#### if语句标签：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span> <span class="hljs-keyword">and</span> age &lt;= <span class="hljs-number">100</span>%&#125;<br>    &lt;p&gt;你是成年人了，请进&lt;/p&gt;<br>&#123;% <span class="hljs-keyword">elif</span> age &gt; <span class="hljs-number">100</span> %&#125;<br>    &lt;p&gt;神仙给爷爬&lt;/p&gt;<br>&#123;% <span class="hljs-keyword">else</span> %&#125;<br>    &lt;p&gt;未成年人滚蛋&lt;/p&gt;<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure>1.所有标签都是在`{% 语句内容 %}`之间2.if标签是闭合标签，就是要有结束标记`{% endif %}`3.if标签内语法跟python中基本类似#### for标签：`for...in...`类似python中的for...in...语句，可以遍历列表、元组、字符串、字典等可迭代对象。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;ul&gt;<br>    &#123;% <span class="hljs-keyword">for</span> book <span class="hljs-keyword">in</span> books %&#125;<br>        &lt;li&gt;&#123;&#123; book &#125;&#125;&lt;/li&gt;<br>    &#123;% endfor %&#125;<br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure>如果想要反向遍历，在for..in..标签后加`reversed`<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;ul&gt;<br>    &#123;% <span class="hljs-keyword">for</span> book <span class="hljs-keyword">in</span> books <span class="hljs-built_in">reversed</span> %&#125;<br>        &lt;li&gt;&#123;&#123; book &#125;&#125;&lt;/li&gt;<br>    &#123;% endfor %&#125;<br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure>`for..in..empty`：这个标签跟for..in...一样，只不过如果遍历的对象没有元素（即为空）时，会执行`empty`中的内容。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;ul&gt;<br>    &#123;% <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> empty %&#125;<br>        &lt;li&gt;e&lt;/li&gt;<br>    &#123;% empty %&#125;<br>        &lt;li&gt;暂时没有评论&lt;/li&gt;<br>    &#123;% endfor %&#125;<br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure>遍历字典时，使用`items`,`keys`,`values`等方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> goods.items %&#125;<br>    &lt;li&gt;&#123;&#123; key &#125;&#125;&lt;/li&gt;<br>    &lt;li&gt;&#123;&#123; value &#125;&#125;&lt;/li&gt;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure>在遍历时，`DLT`提供了一些变量：- `forloop.counter`：当前循环的下标，从1开始- `forloop.counter0`：当前循环的下标，从0开始- `forloop.recounter`：当前循环的反向下标值，比如列表有5个元素，第一次遍历得到的值就是5。- `forloop.first`：是否是第一次遍历- `forloop.last`：是否是最后一次遍历<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;tbody&gt;<br>    &#123;% <span class="hljs-keyword">for</span> person <span class="hljs-keyword">in</span> persons %&#125;<br>        &#123;% <span class="hljs-keyword">if</span> forloop.first %&#125;<br>            &lt;tr style=<span class="hljs-string">&quot;background: pink&quot;</span>&gt;<br>        &#123;% <span class="hljs-keyword">elif</span> forloop.last %&#125;<br>            &lt;tr style=<span class="hljs-string">&quot;background: aqua&quot;</span>&gt;<br>        &#123;% <span class="hljs-keyword">else</span> %&#125;<br>            &lt;tr&gt;<br>        &#123;% endif %&#125;<br>            &lt;td&gt;&#123;&#123; forloop.counter &#125;&#125;&lt;/td&gt;<br>            &lt;td&gt;&#123;&#123; person.name &#125;&#125;&lt;/td&gt;<br>            &lt;td&gt;&#123;&#123; person.age &#125;&#125;&lt;/td&gt;<br>            &lt;td&gt;&#123;&#123; person.height &#125;&#125;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &#123;% endfor %&#125;<br>&lt;/tbody&gt;<br></code></pre></td></tr></table></figure>**注：模板中的for..in..没有`continue`和`break`语句**#### with标签：1.用来定义便于调用2.有两种使用方式- with xxx=xxx- with xx as xx3.定义变量仅在with标签内有效<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">with</span> zs=person<span class="hljs-number">.0</span> %&#125; <br>    &lt;p&gt;&#123;&#123; zs &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;&#123;&#123; zs &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;&#123;&#123; zs &#125;&#125;&lt;/p&gt;<br>&#123;% endwith %&#125;<br><br>    &lt;p&gt;&#123;&#123; zs &#125;&#125;&lt;/p&gt;  <span class="hljs-comment"># 超出with语句，无效</span><br>    <br>&#123;% <span class="hljs-keyword">with</span> person<span class="hljs-number">.1</span> <span class="hljs-keyword">as</span> ls %&#125;<br>    &lt;p&gt;&#123;&#123; ls &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;&#123;&#123; ls &#125;&#125;&lt;/p&gt;<br>&#123;% endwith %&#125;<br></code></pre></td></tr></table></figure>#### url标签：`<a href="{% url 'url名称' [url参数 url参数] %}">`<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># path部分，定义名字</span><br>path(<span class="hljs-string">&#x27;book/&#x27;</span>, views.books, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;book&#x27;</span>)<br><span class="hljs-comment"># url标签部分</span><br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;&#123;% url &#x27;book&#x27; %&#125;&quot;</span>&gt;读书&lt;/a&gt;<br></code></pre></td></tr></table></figure>带参数url：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># path部分</span><br>path(<span class="hljs-string">&#x27;book/detail/&lt;book_id&gt;/&lt;category&gt;/&#x27;</span>, views.book_detail, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;detail&#x27;</span>)<br><br><span class="hljs-comment"># url标签部分</span><br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;&#123;% url &#x27;detail&#x27; book_id=1 category=&#x27;好书&#x27; %&#125;&quot;</span>&gt;图书id&lt;/a&gt;<br></code></pre></td></tr></table></figure>查询字符串url（拼接）：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># path部分</span><br>path(<span class="hljs-string">&#x27;login/&#x27;</span>, views.login, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;login&#x27;</span>)<br><span class="hljs-comment"># url标签部分</span><br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;&#123;% url &#x27;login&#x27; %&#125;?next=/&quot;</span>&gt;登陆&lt;/a&gt;<br></code></pre></td></tr></table></figure>#### autoscape自动转义标签：1.DTL中默认已经开启了自动转义，会将特殊字符进行转义，如`<`转义为`&lt`等。2.如果变量是确实可信任的，可以使用`autoscape`标签关掉自动转义。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">content = &#123;<br>    <span class="hljs-string">&#x27;info&#x27;</span>: <span class="hljs-string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span><br>&#125;<br><br>&#123;%  autoescape off %&#125;<br>    &#123;&#123; info &#125;&#125;<br>&#123;% endautoescape %&#125;<br><span class="hljs-comment"># 转义后结果一个百度超链接</span><br><span class="hljs-comment"># 与&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;等价</span><br><br><span class="hljs-comment"># 若不关闭自动转义，即直接使用&#123;&#123; info &#125;&#125;，会输出&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;而不是可点击的超链接</span><br></code></pre></td></tr></table></figure>#### spaceless标签：作用：去掉作用域内的代码空白<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">spaceless</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>谷歌<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endspaceless</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"># 等价与<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>谷歌<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure>#### verbatim标签：作用：去除DTL对作用域内代码的解析，如{{ xxx }}会被解析为变量<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">content = &#123;<br>    <span class="hljs-string">&#x27;info&#x27;</span>: <span class="hljs-string">&#x27;hello&#x27;</span><br>&#125;<br><span class="hljs-comment"># 输出为&#123;&#123; info &#125;&#125;，防止被解析成变量</span><br>&#123;% verbatim %&#125;<br>    &#123;&#123; info &#125;&#125;<br>&#123;% endverbatim %&#125;<br><br><span class="hljs-comment"># 不使用verbatim标签的话会输出hello</span><br></code></pre></td></tr></table></figure>## 过滤器：#### add过滤器：    {{ value|add:arg }}如果两个参数都是：- 整形或者是数字字符串，进行数值运算- 字符串型，进行拼接- 列表，进行组合<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 源码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">value, arg</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Add the arg to the value.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(value) + <span class="hljs-built_in">int</span>(arg)<br>    <span class="hljs-keyword">except</span> (ValueError, TypeError):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> value + arg<br>        <span class="hljs-keyword">except</span> Exception:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">content = &#123;</span><br><span class="language-xml">    &#x27;value1&#x27;: [1, 2, 3],</span><br><span class="language-xml">    &#x27;value2&#x27;: [7, 8, 8],</span><br><span class="language-xml">    &#x27;str1&#x27;: &#x27;abc&#x27;,</span><br><span class="language-xml">    &#x27;str2&#x27;: &#x27;jkl&#x27;,</span><br><span class="language-xml">    &#x27;int_str1&#x27;: &#x27;1&#x27;,</span><br><span class="language-xml">    &#x27;int_str2&#x27;: &#x27;2&#x27;,</span><br><span class="language-xml">    &#x27;int1&#x27;: 100,</span><br><span class="language-xml">    &#x27;int2&#x27;: 200</span><br><span class="language-xml">&#125;</span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; value<span class="hljs-number">1</span><span class="hljs-punctuation">|</span>add:value<span class="hljs-number">2</span> &#125;&#125;</span><span class="language-xml"> --&gt; [1, 2, 3, 7, 8, 8]</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; str<span class="hljs-number">1</span><span class="hljs-punctuation">|</span>add:str<span class="hljs-number">2</span> &#125;&#125;</span><span class="language-xml"> --&gt; abcjkl</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; int_str<span class="hljs-number">1</span><span class="hljs-punctuation">|</span>add:int_str<span class="hljs-number">2</span> &#125;&#125;</span><span class="language-xml"> --&gt; 3</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; int<span class="hljs-number">1</span><span class="hljs-punctuation">|</span>add:int<span class="hljs-number">2</span> &#125;&#125;</span><span class="language-xml"> --&gt; 300</span><br></code></pre></td></tr></table></figure>#### cut过滤器：    {{ value|cut:arg }}移除所有value中arg所指定的字符串。类似python中的`replace(str,'')`<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"> content = &#123;<br>        <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;hello world&#x27;</span><br>    &#125;<br>    <br>&#123;&#123; word|cut:<span class="hljs-string">&#x27;he&#x27;</span> &#125;&#125;<br><span class="hljs-comment"># 输出为 llo world</span><br><br></code></pre></td></tr></table></figure>    #### data过滤器：    {{ value|date:arg }}    value传入日期，arg传入格式化方法代码将日期按照指定格式格式化为字符串。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">content = &#123;<br>    <span class="hljs-string">&#x27;time&#x27;</span>: datetime.now()<br>&#125;<br><br>&#123;&#123; time|date:<span class="hljs-string">&#x27;Y/m/d h:i:s&#x27;</span> &#125;&#125; --&gt;当前时间输出为 年/月/日 时:分:秒格式<br>&#123;&#123; time|date:<span class="hljs-string">&#x27;d-n-Y H:i:s&#x27;</span> &#125;&#125; --&gt;当前时间输出为 日-月-年 时:分:秒格式<br></code></pre></td></tr></table></figure>常用格式字符 | 描述 | 示例      ---|---|---Y | 四位年份 | 2019m | 两位数字的月份 | 01-12n | 月份，1-9前没有0 | 1-12d | 两位数字的天 | x-09j | 天，1-9前面没有0 | x-9g | 小时，12小时格式，1-9前没有0 | 9:xx:xxG | 小时，24小时格式，1-9前没有0 | 21:xx:xxh | 小时，12小时格式，1-9前有0 | 09:xx:xxH | 小时，24小时格式，1-9前有0 | 21:xx:xxi | 分钟，1-9前有0 | xx:01:xxs | 秒，1-9前有0 | xx:xx:05#### default过滤器：    {{ value|default:arg}}将`False`值，比如`[]`,`''`,`None`,`{}`等在if判断中判定为False的值，都会使用False过滤器提供的默认值。    {{ value|default:arg }}    用arg值替换为False的value值，不为False则不处理，返回原value值。    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">context = &#123;<br>    <span class="hljs-string">&#x27;value1&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-string">&#x27;value2&#x27;</span>: [],<br>    <span class="hljs-string">&#x27;value3&#x27;</span>: &#123;&#125;,<br>    <span class="hljs-string">&#x27;value4&#x27;</span>: <span class="hljs-literal">None</span><br>    &#125;<br>&#123;&#123; value1|default:<span class="hljs-string">&#x27;我是&quot;&quot;默认值&#x27;</span> &#125;&#125;<br>&#123;&#123; value2|default:<span class="hljs-string">&#x27;我是[]]默认值&#x27;</span> &#125;&#125;<br>&#123;&#123; value3|default:<span class="hljs-string">&#x27;我是&#123;&#125;默认值&#x27;</span> &#125;&#125;<br>&#123;&#123; value4|default:<span class="hljs-string">&#x27;我是None默认值&#x27;</span> &#125;&#125;<br></code></pre></td></tr></table></figure>#### default_if_none过滤器：    {{ value|default_if_none:arg }}功能同default，不过只有在值为none时才过滤，其他false值不过滤。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">context = &#123;<br>    <span class="hljs-string">&#x27;value1&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-string">&#x27;value2&#x27;</span>: [],<br>    <span class="hljs-string">&#x27;value3&#x27;</span>: &#123;&#125;,<br>    <span class="hljs-string">&#x27;value4&#x27;</span>: <span class="hljs-literal">None</span><br>    &#125;<br>&#123;&#123; value2|default_if_none:<span class="hljs-string">&#x27;我是[]默认值&#x27;</span> &#125;&#125;  <span class="hljs-comment"># 输出为 []，不会过滤</span><br>&#123;&#123; value4|default_if_none:<span class="hljs-string">&#x27;我是None默认值&#x27;</span> &#125;&#125; <span class="hljs-comment"># 输出为 我是None默认值</span><br></code></pre></td></tr></table></figure>#### first，last过滤器：    {{ value|first }}    {{ value|last }}取出列表中第一/最后一个元素。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"> context = &#123;<br>        <span class="hljs-string">&#x27;value&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>    &#125;<br>&#123;&#123; value|first &#125;&#125; <span class="hljs-comment"># 1</span><br>&#123;&#123; value|last &#125;&#125; <span class="hljs-comment"># 3</span><br></code></pre></td></tr></table></figure>#### floatformat过滤器：    {{ value\|floatformat[:arg] }}四舍五入的方式格式化浮点型数据。如果没有传参数，会默认保留1位小数，若小数后面全为0，则只保留整数。可以传递参数来标识具体保留几位小数。1. 没传参数：value | 模板代码 | 输出---|---|---34.23234 | {{ value\|floatformat }} | 34.234.0000 | {{ value\|floatformat }} | 3434.260 | {{ value\|floatformat }} | 34.32. 传参数;value | 模板代码 | 输出---|---|---34.23234 | {{ value\|floatformat:3 }} | 34.23234.00000 | {{ value\|floatformat:3 }} | 34.00034.26000 | {{ value\|floatformat:3 }} | 34.260#### join过滤器：    {{ value|join:arg }}相当于python中的join方法，用一个字符串当连接符，连接一个列表。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">context = &#123;<br>    <span class="hljs-string">&#x27;value&#x27;</span>: [<span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br>&#125;<br><br>&#123;&#123; value|join:<span class="hljs-string">&#x27;==&#x27;</span> &#125;&#125;<br><br><span class="hljs-comment"># 输出为 w==a==z==d</span><br></code></pre></td></tr></table></figure>#### lower upper过滤器：    {{ value|lower }}    {{ value|upper }}大小写转换<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">context = &#123;<br>    <span class="hljs-string">&#x27;value_low&#x27;</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>    <span class="hljs-string">&#x27;value_up&#x27;</span>: <span class="hljs-string">&#x27;HELLO&#x27;</span>,<br>&#125;<br>&#123;&#123; value_up|lower &#125;&#125; <span class="hljs-comment"># --&gt; hello</span><br>&#123;&#123; value_low|upper &#125;&#125; <span class="hljs-comment"># --&gt; HELLO</span><br></code></pre></td></tr></table></figure>#### random过滤器：        {{ value|random }}作用相当于python中的random.choice，从可迭代对象中随机取出一个值。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">context = &#123;<br>    <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>))<br>&#125;<br><br>&#123;&#123; value|random &#125;&#125;<br></code></pre></td></tr></table></figure>#### safe过滤器：    {{ value|safe }}相当于autoscape自动转义标签，防止value值被转义<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">context = &#123;<br>    <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-string">&#x27;&lt;div style=&quot;background: aqua&quot;&gt;safe成功&lt;/div&gt;&#x27;</span><br>&#125;<br><br>&#123;&#123; value|safe &#125;&#125;<br></code></pre></td></tr></table></figure>#### slice过滤器：    {{ value|slice:arg }}切片操作,arg参数写法同列表切片操作<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">context = &#123;<br>    <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>))<br>&#125;<br><br>&#123;&#123; value|<span class="hljs-built_in">slice</span>:<span class="hljs-string">&#x27;10:&#x27;</span> &#125;&#125;<br>&#123;&#123; value|<span class="hljs-built_in">slice</span>:<span class="hljs-string">&#x27;:15&#x27;</span> &#125;&#125;<br>&#123;&#123; value|<span class="hljs-built_in">slice</span>:<span class="hljs-string">&#x27;3:10&#x27;</span> &#125;&#125;<br>&#123;&#123; value|<span class="hljs-built_in">slice</span>:<span class="hljs-string">&#x27;:10:2&#x27;</span> &#125;&#125; <span class="hljs-comment"># 取步长</span><br></code></pre></td></tr></table></figure>#### striptags过滤器;        {{ value|striptags }}去除value中的html标签<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">context = &#123;<br>    <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-string">&#x27;&lt;p&gt;是我dio哒&lt;/p&gt;&#x27;</span><br>&#125;<br>&#123;&#123; value &#125;&#125; <span class="hljs-comment"># --&gt;&lt;p&gt;是我dio哒&lt;/p&gt;</span><br>&#123;&#123; value|striptags &#125;&#125; <span class="hljs-comment"># --&gt;是我dio哒</span><br></code></pre></td></tr></table></figure>#### truncatechars过滤器：        {{ value|truncatechars:arg }}如果给定的value字符串超过了所给定的长度，会进行切割，并拼接上`...`.- 如果字符串长度小于给定的arg，不会进行操作- 给定的arg包含了`...`的长度，所以若保留两个字符，应给定arg=5<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">context = &#123;<br>    <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-string">&#x27;北京欢迎你~&#x27;</span>,<br>    <span class="hljs-string">&#x27;value1&#x27;</span>: <span class="hljs-string">&#x27;&lt;p&gt;北京欢迎你~&lt;/p&gt;&#x27;</span><br>&#125;<br><br>&#123;&#123; value|truncatechars:<span class="hljs-number">5</span> &#125;&#125; <span class="hljs-comment"># --&gt;北京...</span><br><br></code></pre></td></tr></table></figure>#### truncatechars_html过滤器：        {{ value1|truncatechars_html:arg }}作用同truncatechars，不过在切割时会保留html标签。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">context = &#123;<br>    <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-string">&#x27;北京欢迎你~&#x27;</span>,<br>    <span class="hljs-string">&#x27;value1&#x27;</span>: <span class="hljs-string">&#x27;&lt;p&gt;北京欢迎你~&lt;/p&gt;&#x27;</span><br>&#125;<br><br>&#123;&#123; value1|truncatechars:<span class="hljs-number">5</span> &#125;&#125; <span class="hljs-comment"># &lt;p...</span><br>&#123;&#123; value1|truncatechars_html:<span class="hljs-number">5</span> &#125;&#125; <span class="hljs-comment"># &lt;p&gt;北京...&lt;/p&gt;</span><br></code></pre></td></tr></table></figure>## 自定义过滤器：1. 在app下创建一个python包，叫`templatetags`。注意，必须叫这个名字，不然django找不到。2. 在这个包下面创建一个py文件，用来存储过滤器。3. 在新建的py文件中，定义过滤器（也就是函数）。函数第一个参数是被过滤的值也就是value，第二个参数是arg，可有可无。最多两个参数。4. 写完过滤器后，要注册过滤器。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> template<br><br>register = template.Library()<br><br>register.<span class="hljs-built_in">filter</span>(name, filter_func)<br></code></pre></td></tr></table></figure>5. 把这个过滤器所在的app添加到`settings.py`文件中的`INSTALLED_APP`中，不然找不到过滤器。6. 在html模板中使用load标签加载过滤器所在的py文件。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% load py文件名 %&#125;<br></code></pre></td></tr></table></figure>示例代码：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># my_filter.py文件中的代码</span><br><br><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> template<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">value, word</span>):<br>    <span class="hljs-keyword">return</span> value + word<br><br><br><span class="hljs-comment"># 创建一个注册对象</span><br>register = template.Library()<br><span class="hljs-comment"># 使用对象注册自定义的过滤器</span><br>register.<span class="hljs-built_in">filter</span>(<span class="hljs-string">&#x27;greet&#x27;</span>, greet)  <span class="hljs-comment"># 第一个参数写调用时的名称，第二个参数是过滤器对应的函数</span><br><br><span class="hljs-comment"># 或者使用装饰器注册，会直接用函数名当成调用名注册</span><br><span class="hljs-comment"># register = template.Library()</span><br><span class="hljs-comment"># @register.filter</span><br><span class="hljs-comment"># def greet(value, word):</span><br><span class="hljs-comment">#     return value + word</span><br><br><span class="hljs-comment"># 若想自定义调用名，可在装饰器传参</span><br><span class="hljs-comment"># @register.filter(&#x27;my_greet&#x27;)</span><br><span class="hljs-comment"># def greet(value, word):</span><br><span class="hljs-comment">#     return value + word</span><br><br></code></pre></td></tr></table></figure><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-comment">&lt;!-- html模板文件的代码--&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">load</span></span> my_filter %&#125;</span><span class="language-xml">  <span class="hljs-comment">&lt;!-- 这句话用来加载自定义的过滤器文件--&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; value|greet:<span class="hljs-string">&#x27;还钱&#x27;</span> &#125;&#125;</span><span class="language-xml">  <span class="hljs-comment">&lt;!-- 调用自定义的过滤器--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 过滤器使用</span><br>context = &#123;<br>    <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-string">&#x27;张三&#x27;</span><br>&#125;<br>&#123;&#123; value|greet:<span class="hljs-string">&#x27;还钱&#x27;</span> &#125;&#125; <span class="hljs-comment"># --&gt; 张三还钱</span><br></code></pre></td></tr></table></figure>## 模板结构优化：#### include标签:提高模板代码复用性。有些模板的代码是重复的，可以单独抽取出来，以后哪里用到使用`include`导入进来。如果想在`include`子模板时传递一些参数，可以使用`with xxx=xxx`的形式。<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"># include的代码</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">url</span></span> &#x27;index&#x27; %&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">url</span></span> &#x27;school&#x27; %&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>学校<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">url</span></span> &#x27;company&#x27; %&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>公司<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; username &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>     </span><span class="hljs-comment">&#123;#  带参数  #&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"> </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">include</span></span> &#x27;header.html&#x27; with username=&#x27;wxh&#x27; %&#125;</span><br></code></pre></td></tr></table></figure>#### 继承：子模板可以继承父模板的html代码，如果子模板需要有自己的代码，通过block接口实现。<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-comment">&lt;!--父模板代码base.html--&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">url</span></span> &#x27;index&#x27; %&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">url</span></span> &#x27;school&#x27; %&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>学校<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--block用来给子模板提供自定义代码接口--&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> content %&#125;</span><span class="language-xml">  <span class="hljs-comment">&lt;!--content是定义block名，调用时要有名字--&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--父模板block内的文字子模板如果需要调用要是用</span></span><span class="hljs-template-variable">&#123;&#123; block.super &#125;&#125;</span><span class="language-xml"><span class="hljs-comment">变量调用--&gt;</span></span><br><span class="language-xml">        这是父模板的文字</span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-comment">&lt;!--子模板调用代码--&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">extends</span></span> &#x27;base.html&#x27; %&#125;</span><span class="language-xml">  <span class="hljs-comment">&lt;!--这句话表示该模板继承自哪个模板，要写在代码开头--&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> content %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是子模板的文字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; block.super &#125;&#125;</span><span class="language-xml">  <span class="hljs-comment">&lt;!--调用父模板block中的文字--&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--外面的代码不会输出，无效代码--&gt;</span></span><br><span class="language-xml">这是block外面的代码</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure>## 加载静态文件：    使用static标签    1. 确保`INSTALLED_APP`中添加了`django.contrib.staticfiles`这条。（默认添加）2. 确保在settings.py中设置了`STATIC_URL`。（默认设置已经为`STATIC_URL = '/static/'`即可）3. 创建文件夹存储静态文件。- 在app下创建static文件夹以存储app所使用的静态文件。为了防止app间的静态文件存在同名不能分辨的现象，推荐在app下的static文件夹下新建一个与app同名的文件夹，将静态文件放入其中。这样调用时路径就为`app_name/xxx.jpg`同名文件不会冲突。- 一些静态文件与app不挂钩。可以在settings.py文件中添加`STATICFILES_DIRS`属性，以后DTL就会在这个属性所指向的路径下查找静态文件。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 这里路径设置为项目根路径下的static文件夹</span><br>STATICFILES_DIRS = [<br>    os.path.join(BASE_DIR, <span class="hljs-string">&#x27;static&#x27;</span>)<br>]<br></code></pre></td></tr></table></figure>5. 在模板中使用`load`标签加载static标签。因为static不是DTL的内置标签，若要想省去这步，可在settings.py文件的TEMPLATES下的OPTIONS下添加属性。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">TEMPLATES = [<br>    &#123;<br>        <span class="hljs-string">&#x27;BACKEND&#x27;</span>: <span class="hljs-string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,<br>        <span class="hljs-string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="hljs-string">&#x27;templates&#x27;</span>)]<br>        ,<br>        <span class="hljs-string">&#x27;APP_DIRS&#x27;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;context_processors&#x27;</span>: [<br>                <span class="hljs-string">&#x27;django.template.context_processors.debug&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.template.context_processors.request&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,<br>            ],<br>            <span class="hljs-comment">####添加这条</span><br>            <span class="hljs-string">&#x27;builtins&#x27;</span>: [<span class="hljs-string">&#x27;django.templatetags.static&#x27;</span>],  <span class="hljs-comment"># 添加这句话来使static成为内置标签</span><br>            <span class="hljs-comment">####添加这条</span><br>        &#125;,<br>    &#125;,<br>]<br></code></pre></td></tr></table></figure>6. 使用`static`标签导入静态文件。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;img src=<span class="hljs-string">&quot;&#123;% static &#x27;front/gologo.jpeg&#x27;%&#125;&quot;</span> alt=<span class="hljs-string">&quot;&quot;</span>&gt; <span class="hljs-comment"># 导入图片</span><br>&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;&#123;% static &#x27;index.css&#x27; %&#125;&quot;</span>&gt; <span class="hljs-comment"># 导入css样式</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>Django</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Django】 00.虚拟环境</title>
    <link href="/2020/11/22/2020-11-22-00.Django_env/"/>
    <url>/2020/11/22/2020-11-22-00.Django_env/</url>
    
    <content type="html"><![CDATA[<h2 id="虚拟环境：">虚拟环境：</h2><h4 id="virtualenvwrapper：">virtualenvwrapper：</h4><ol><li class="lvl-3">创建虚拟环境：</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mkvirtualenv xxx</span><br></code></pre></td></tr></table></figure><p>默认在当前用户目录下创建<code>Env</code>的文件夹，将虚拟环境安装到这个目录下</p><ol start="2"><li class="lvl-3"><p>切换到某个虚拟环境下：</p></li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">workon xxx</span><br></code></pre></td></tr></table></figure><p>3.退出当前虚拟环境：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">deactivate</span><br></code></pre></td></tr></table></figure><p>4.删除某个虚拟环境：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">rmvirtualenv xxx</span><br></code></pre></td></tr></table></figure><p>5.列出所有虚拟环境：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">lsvirtualenv</span> <br></code></pre></td></tr></table></figure><p>6.进入虚拟环境所在目录：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">cdvirtualenv</span><br></code></pre></td></tr></table></figure><h3 id="修改mkvirtualenv默认路径：">修改<code>mkvirtualenv</code>默认路径：</h3><p>创建WORKON_HOME环境变量，指定路径</p><h3 id="创建虚拟环境指定python版本：">创建虚拟环境指定python版本：</h3><p>使用-python参数指定python路径</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">mkvirtualenv --<span class="hljs-keyword">python</span>==C:\python27\<span class="hljs-keyword">python</span>.exe xx-<span class="hljs-keyword">env</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>Django</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Django】 01.创建项目</title>
    <link href="/2020/11/22/2020-11-22-01.%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
    <url>/2020/11/22/2020-11-22-01.%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1>第一个Django项目：</h1><h2 id="创建Django项目：">创建Django项目：</h2><h3 id="命令行方式：">命令行方式：</h3><p>1.创建项目<code>django-admin startproject [项目名称]</code></p><p>2.创建应用（app）要：进入项目所在路径，然后执行<code>python manage.py startapp [app名称]</code></p><p>3.启动项目：进入项目文件夹，然后执行<code>python manage.py runserver</code></p><p>4.端口和host设置：在启动项目<code>python manage.py runserver 0.0.0.0:9000</code>在最后设置端口号，默认为127.0.0.1:8000</p><h3 id="pycharm方式：">pycharm方式：</h3><ul class="lvl-0"><li class="lvl-2"><p>创建项目</p><ol><li class="lvl-7"><p>设置项目路径</p></li><li class="lvl-7"><p>设置解释器</p></li></ol></li></ul><h3 id="局域网访问：">局域网访问：</h3><p>1.设置host为0.0.0.0</p><p>2.在settings.py文件中设置ALLOWED_HOSTS = [‘192.168.0.104’]设置内容为局域网内ip</p><p>3.访问时通过浏览器输入ip:port访问</p><ul class="lvl-0"><li class="lvl-2"><p>自己可以访问，局域网内不能访问，可能要主机关闭防火墙</p></li></ul><h3 id="创建app：">创建app：</h3><ul class="lvl-0"><li class="lvl-2"><p>创建（app）要：进入项目所在路径，然后执行<code>python manage.py startapp [app名称]</code></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>Django</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Django】 02.URL</title>
    <link href="/2020/11/22/2020-11-22-02.URL/"/>
    <url>/2020/11/22/2020-11-22-02.URL/</url>
    
    <content type="html"><![CDATA[<h2 id="视图函数-FBV-：">视图函数(FBV)：</h2><p>1.视图函数第一个参数必须是request，这个参数绝对不能少。</p><p>2.视图函数的返回值必须是django.http.response.HttpResponseBase的子类的对象</p><ul class="lvl-0"><li class="lvl-2"><p>视图函数<code>映射关系</code>写在项目下的<code>url.py</code>文件下</p></li><li class="lvl-2"><p>视图函数的<code>具体内容</code>写在app下的<code>views.py</code>文件下</p></li></ul><h2 id="视图类-CBV">视图类(CBV):</h2><ol><li class="lvl-3"><p>创建视图类需继承django.views.View类</p></li><li class="lvl-3"><p>在url.py映射关系下，若指定映射为视图类需要调用类的as.view()方法</p></li><li class="lvl-3"><p>类方法中要加request参数</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">### view.py</span><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Index</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-comment"># get方法访问时调用</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;get&#x27;</span>)<br>    <span class="hljs-comment"># post方法访问时调用</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;post&#x27;</span>)<br>        <br><span class="hljs-comment">### url.py</span><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    <span class="hljs-comment"># 调用as_view()方法，表示映射的是类</span><br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.Index.as_view()),<br>]<br></code></pre></td></tr></table></figure><h2 id="url传参数：">url传参数：</h2><p>1.url需要传参可以在path的url中<code>&lt;参数名&gt;</code>的形式加入参数，参数名与视图函数的参数对应。可传递多个参数。</p><ul class="lvl-0"><li class="lvl-2"><p>指定参数类型(其实是将进行url转换)<code>&lt;int:publisher_id&gt;</code>指定参数为int类型，输入其他类型会找不到页面</p></li><li class="lvl-2"><p>默认是str转换器，其他转换器还有int，slug，uuid，path</p><ul class="lvl-2"><li class="lvl-7">str：[^/]  除了<code>/</code></li><li class="lvl-7">int：[0-9]</li><li class="lvl-7">slug：[-0-9a-zA-Z_]</li><li class="lvl-7">path：.+</li><li class="lvl-7">uuid</li></ul></li></ul><p>2.查询字符串：在url中不需要单独的匹配查询字符串的部分，只需在视图函数中使用<code>request.GET.get('参数名称')</code>的方式获取。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">def author_detail(request):<br>    author_id = request.<span class="hljs-keyword">GET</span>.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;id&#x27;</span>)<br>    <span class="hljs-type">text</span> = <span class="hljs-string">&#x27;作者的id是%s&#x27;</span> % author_id<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-type">text</span>)<br></code></pre></td></tr></table></figure><p>在浏览器输入url时<code>http://127.0.0.1:8000/book/author/?id=1</code>需要在链接后跟<code>?[参数名]=[内容]</code>。</p><h2 id="映射模块化–include函数：">映射模块化–include函数：</h2><p>1.为了便于管理，将一个app的url链接放在app模块下，在主url.py文件中通过include函数拼接url。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class="hljs-string">&#x27;book/&#x27;</span>, include(<span class="hljs-string">&#x27;book.book_urls&#x27;</span>))<br>]<br></code></pre></td></tr></table></figure><p>2.在app文件下的url.py中，url也要放在urlpatterns的变量下。</p><p>3.url会根据主urls.py和app中的url.py文件进行拼接</p><h2 id="url命名：">url命名：</h2><p>1.为什么要对url命名：<br>url是经常变换的，一个url的改变会引起很多url的改变，为了减少修改代码的工作量</p><p>2.如何命名：<code>path</code>函数中，传递一个<code>name</code>参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index, name=<span class="hljs-string">&#x27;index&#x27;</span>),<br>    path(<span class="hljs-string">&#x27;login/&#x27;</span>, views.login, name=<span class="hljs-string">&#x27;login&#x27;</span>)<br>]<br></code></pre></td></tr></table></figure><p>3.应用命名空间：解决不同app间name重名问题</p><ul class="lvl-0"><li class="lvl-2"><p>在<code>app内的urls.py</code>中定义<code>app_name</code>变量</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">app_name = <span class="hljs-string">&#x27;front&#x27;</span><br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index, name=<span class="hljs-string">&#x27;index&#x27;</span>),<br>    path(<span class="hljs-string">&#x27;login/&#x27;</span>, views.login, name=<span class="hljs-string">&#x27;login&#x27;</span>)<br>]<br></code></pre></td></tr></table></figure><p>以后在做反转(revese)的时候就可以使用<code>app_name:name</code>的方式进行反转</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">login_url = reverse(<span class="hljs-string">&#x27;front:login&#x27;</span>)<br></code></pre></td></tr></table></figure><p>4.实例命名空间：解决同一app下不同实例url访问问题</p><pre><code class="hljs">使用应用命名空间：- cms1 --&gt; cms1/login- cms2 --&gt; cms1/login使用实例命名空间：    - cms1 --&gt; cms1/login- cms2 --&gt; cms2/login</code></pre><ul class="lvl-0"><li class="lvl-2"><p>在<code>include</code>函数中传递<code>namespace</code>参数</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, include(<span class="hljs-string">&#x27;front.urls&#x27;</span>)),<br><br>    <span class="hljs-comment"># 同一个app下的两个实例</span><br>    path(<span class="hljs-string">&#x27;cms1/&#x27;</span>, include(<span class="hljs-string">&#x27;cms.urls&#x27;</span>, namespace=<span class="hljs-string">&#x27;cms1&#x27;</span>)),  <span class="hljs-comment"># namespace定义实例命名空间</span><br>    path(<span class="hljs-string">&#x27;cms2/&#x27;</span>, include(<span class="hljs-string">&#x27;cms.urls&#x27;</span>, namespace=<span class="hljs-string">&#x27;cms2&#x27;</span>))<br>]<br></code></pre></td></tr></table></figure><p>以后在反转的时候。就可以根据实例命名空间来指定具体的url。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    username = request.GET.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>    <span class="hljs-keyword">if</span> username:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;CMS首页&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 获得访问页面的实例命名</span><br>        current_namespace = request.resolver_match.namespace  <br>        <span class="hljs-keyword">return</span> redirect(reverse(<span class="hljs-string">&#x27;%s:login&#x27;</span> % current_namespace))<br></code></pre></td></tr></table></figure><h2 id="re-path函数：">re_path函数：</h2><p>1.re_path和path的作用一样，不过re_path在写url时可用正则表达式。</p><p>2.在正则表达式中若有参数，要用圆括号括起来，参数名字使用<code>?P&lt;name&gt;</code>的方式，再在后面添加正则规则。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index),<br>    re_path(<span class="hljs-string">r&#x27;list/(?P&lt;year&gt;\d&#123;4&#125;)&#x27;</span>, views.article_list_y),<br>    re_path(<span class="hljs-string">r&#x27;list/(?P&lt;month&gt;\d&#123;2&#125;)&#x27;</span>, views.article_list_m)<br>]<br><br></code></pre></td></tr></table></figure><h2 id="reverse-反转：">reverse()反转：</h2><p>1.如果反转的url带有参数，可以传递参数给<code>kwarg</code>参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    username = request.GET.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>    <span class="hljs-keyword">if</span> username:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;图书首页&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        detail_url = reverse(<span class="hljs-string">&#x27;detail&#x27;</span>, kwargs=&#123;<span class="hljs-string">&#x27;article_id&#x27;</span>: <span class="hljs-number">1</span>&#125;)<br>        <span class="hljs-keyword">return</span> redirect(detail_url)<br></code></pre></td></tr></table></figure><p>2.如果反转的函数带有查询字符串，只能手动拼接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    username = request.GET.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>    <span class="hljs-keyword">if</span> username:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;图书首页&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        login_url = reverse(<span class="hljs-string">&#x27;login&#x27;</span>) + <span class="hljs-string">&#x27;?next=/&#x27;</span><br>        <span class="hljs-keyword">return</span> redirect(login_url)<br></code></pre></td></tr></table></figure><h2 id="自定义url转换器：">自定义url转换器：</h2><p>1.定义一个类</p><p>2.在类中定义<code>regex</code>属性，用来限制url转换器的规则</p><p>3.类中定义<code>to_python(self,value)</code>函数，这个方法是用来将url中的值转换后传递给视图函数</p><p>4.实现<code>to_url(self,value)</code>方法，这个方法是在url做反转的时候，将传进来的参数转换后拼接成一个正确的url</p><p>5.将定义好的转换器注册到django中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># converters.register_converter(类名, &#x27;调用时的命名&#x27;)</span><br>converters.register_converter(CategoryConverter, <span class="hljs-string">&#x27;cate&#x27;</span>)<br></code></pre></td></tr></table></figure><p>定义转换器实例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> converters<br><br><br><span class="hljs-comment"># converter的写法，照着源码改就行</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CategoryConverter</span>:<br>    regex = <span class="hljs-string">r&#x27;\w|(\w+\+\w+)+&#x27;</span><br><br>    <span class="hljs-comment"># to_python 是用在path路径转换时</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">to_python</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-comment"># value : python + django + flask</span><br>        result = value.split(<span class="hljs-string">&#x27;+&#x27;</span>)<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-comment"># to_url是用在反转（reverse）时</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">to_url</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-comment"># value : [python, django, flask]</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(value, <span class="hljs-built_in">list</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;+&#x27;</span>.join(value)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&#x27;转换url时出错&#x27;</span>)<br>            <br><span class="hljs-comment"># 注册到django</span><br>converters.register_converter(CategoryConverter, <span class="hljs-string">&#x27;cate&#x27;</span>)<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>若要把转换器写到独立的py文件中，要在包的<code>__init__</code>文件中import一下该文件。(import时会执行文件内容，把自定义的转换器注册到django中，<code>__init__.py</code>文件是初始化文件，默认执行)</p></li></ul><h2 id="url映射时指定默认参数：">url映射时指定默认参数：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.books),<br>    path(<span class="hljs-string">&#x27;page/&lt;int:page&gt;&#x27;</span>,views.books)<br>]<br><br><br><span class="hljs-comment"># views.py</span><br>book_list = [<br>    <span class="hljs-string">&#x27;三国演义&#x27;</span>,<br>    <span class="hljs-string">&#x27;水浒传&#x27;</span>,<br>    <span class="hljs-string">&#x27;红楼梦&#x27;</span>,<br>    <span class="hljs-string">&#x27;西游记&#x27;</span><br>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">books</span>(<span class="hljs-params">request, page=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(book_list[page-<span class="hljs-number">1</span>])<br><br></code></pre></td></tr></table></figure><p>在访问<code>path('', views.books)</code>的时候因为没有参数传递，会用views.books的默认参数1，在访问<code> path('page/&lt;int:page&gt;',views.books)</code>时，传递了参数，则用传递的参数。</p>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>Django</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Linux命令】 01_文件处理命令</title>
    <link href="/2020/11/22/2020-11-22-01_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/11/22/2020-11-22-01_%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="命令格式：命令-选项-参数">命令格式：命令[-选项][参数]</h3><pre><code class="hljs">例：ls -la /etc</code></pre><p><strong>注：</strong></p><ul class="lvl-0"><li class="lvl-2">各别命令不遵循此格式</li><li class="lvl-2">当有多个选项时，可以写在一起</li><li class="lvl-2">简化选项与完整选项 <code>-a 等于--all</code></li></ul><h2 id="一-命令格式与目录处理命令">一. 命令格式与目录处理命令</h2><h4 id="1-ls">1. ls</h4><pre><code class="hljs">功能：显示目录文件  选项：-a 显示所有文件，包括隐藏文件。（隐藏文件文件名为 .xxx，即以.开头）     -l 详细信息显示     -d 查看目录属性，通过与-l连用 例：ls -ld /etc     通用选项：    -i 显示文件index    -h 单位显示人性化</code></pre><h4 id="2-mkdir">2. mkdir</h4><pre><code class="hljs">功能：创建新目录选项：-p 递归创建例：mkdir /tmp/Japan  在tmp目录下创建Japan目录    mkdir /tmp/China/wo  会报错，不存在China目录，即不能在不存在的目录下直接创建目录，需要使用-p参数递归创建    mkdir -p /tmp/China/wo /tmp/China/you  在tmp目录下创建China目录并在其下创建wo和yuo目录</code></pre><h4 id="3-cd">3. cd</h4><pre><code class="hljs">功能：切换目录</code></pre><h4 id="4-pwd">4. pwd</h4><pre><code class="hljs">功能：显示当前所在  目录</code></pre><h4 id="5-rmdir">5. rmdir</h4><pre><code class="hljs">功能：删除空目录例：rmdir /tmp/Japan</code></pre><h4 id="6-cp">6. cp</h4><pre><code class="hljs">功能：复制文件或目录选项： -r 复制目录       -p 保留文件属性（默认复制后文件属性中创建时间等会为复制的时间，-p可以保留原文件的属性）例：cp /etc/grub.conf /tmp 把grub.conf文件复制到tmp中    cp -r /tmp/China/wo /root 把wo目录复制到/root下，即/root下会有一个/wo目录    cp -r /tmp/China/you /root/u 把/you目录复制到/root并改名为/u</code></pre><h4 id="7-mv">7. mv</h4><pre><code class="hljs">功能：剪切或改名使用方法同cp，不过剪切目录不需要-r参数在原目录剪切即为改名例：mv /tmp/Japan /tmp/Jap  Japan目录改名为Japmv /tmp/China/wo /root  将/wo目录剪切到/root目录</code></pre><h4 id="8-rm">8.rm</h4><pre><code class="hljs">功能：删除文件或目录选项：-f 强制删除（不询问是否删除等）      -r 删除目录例：rm -rf /  删除/目录下的所有文件</code></pre><h2 id="二-文件处理命令">二. 文件处理命令</h2><h4 id="1-touch">1. touch</h4><pre><code class="hljs">功能：创建空文件</code></pre><h4 id="2-1-cat">2.1 cat</h4><pre><code class="hljs">功能：查看文件内容选项：-n 查看时显示行号例： cat -n /etc/issue</code></pre><h4 id="2-2-tac">2.2. tac</h4><pre><code class="hljs">功能：查看文件内容，从最后一行往前显示</code></pre><h4 id="3-1-more">3.1 more</h4><pre><code class="hljs">功能：分页查看文件内容进入浏览状态后，按回车显示下一行，空格或f翻页，q退出</code></pre><h4 id="3-2-less">3.2 less</h4><pre><code class="hljs">功能：分页查看文件内容进入浏览状态后，按回车显示下一行，空格或f翻页，q退出。pageup上翻页，↑上一行。也可按关键词查询，n显示下一个关键词位置。</code></pre><h4 id="3-3-head">3.3 head</h4><pre><code class="hljs">功能：显示文件前几行选项：-n 行数   显示前几行，默认10行例：head -n 7 /etc/services</code></pre><h4 id="3-4-tail">3.4 tail</h4><pre><code class="hljs">功能：显示文件最后几行选项：-n 行数      -f 动态显示文件末尾内容（实时更新）</code></pre><h4 id="4-ln">4. ln</h4><pre><code class="hljs">功能：生成链接文件选项：-s 生成软链接例：ln -s /etc/issue /tmp/issue.soft 创建issue的软链接/tmp/issue.soft    ln /etc/issue /tmp/issue.hard 创建issue的硬链接/tmp/issue.hard软链接：类似windows的快捷方式        文件权限lrwxrwxrwx，l代表是软链接硬链接：相当于拷贝+同步更新        通过i节点识别（两个文件i节点相同）        不能跨分区硬链接        不能对目录进行硬链接        原文件丢失不影响链接文件</code></pre>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Linux命令】 02_权限处理命令</title>
    <link href="/2020/11/22/2020-11-22-02_%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/11/22/2020-11-22-02_%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="权限">权限</h3><pre><code class="hljs">lrwxrwxrwx第一位是文件类型，-表示文件，d表示目录等          三个一组表示一种用户的权限。第一组是所有者(u)权限，第二组是所有组(g)权限，第三组是其他组(o)权限。          r表示读，w表示写，x表示执行。          一般用二进制表示权限。r为4，w为2，x为1。rwx即为7，---为0。对文件来说：r代表查看内容，w代表写入内容，x代表执行（多用于脚本命令等）对目录来说，r代表可以查看目录内的内容，即ls；w代表可以操作目录下的内容，可以在目录下新建或删除文件目录等；x代表可以cd进入目录</code></pre><h4 id="1-chmod">1. chmod</h4><pre><code class="hljs">功能：修改文件或目录权限语法： chmod [&#123;ugoa&#125;&#123;+-=&#125;&#123;rwx&#125;][文件或目录]选项：-R 递归修改  表示修改目录和其下的所有文件及目录例：chmod u+x /tmp/China   u+x表示所有者添加x（执行）权限    chmod g-r /tmp/Japan  g-r表示所有组移除查看权限    chmod o=r-- /tmp/China/wo  表示修改其他组权限为只读    chmod 777 /tmp/China/you  表示修改you为rwxrwxrwx。</code></pre><h4 id="2-0-chown">2.0 chown</h4><pre><code class="hljs">功能：修改所有者语法：chown [用户] [文件或目录]例：chown wxh /tmp/Japan/youban wxh 更改文件youban的所有者为wxh</code></pre><h4 id="2-1-useradd">2.1 useradd</h4><pre><code class="hljs">功能：添加新用户例：useradd wxh</code></pre><h4 id="3-0-chgrp">3.0 chgrp</h4><pre><code class="hljs">功能：修改所属组例：chgrp lsp /tmp/Japan/youban lsp</code></pre><h4 id="3-1-groupadd">3.1 groupadd</h4><pre><code class="hljs">功能：添加组例：groupadd lsp</code></pre><h4 id="4-umask">4. umask</h4><pre><code class="hljs">功能：显示、设置文件的默认权限选项：-S 表示以rwx显示权限</code></pre> <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua">[<span class="hljs-built_in">input</span>:]umask -S<br>[<span class="hljs-built_in">output</span>:]u=rwx,g=rx,o=rx<br><br>[<span class="hljs-built_in">input</span>:]umask<br>[<span class="hljs-built_in">output</span>:]<span class="hljs-number">0022</span><br><br>[<span class="hljs-built_in">input</span>:]umask <span class="hljs-number">077</span>  表示修改默认权限为rwx<span class="hljs-comment">------</span><br>[<span class="hljs-built_in">output</span>:]无<br></code></pre></td></tr></table></figure><pre><code class="hljs">0022，第一位0表示特殊权限。022表示 --- -w- -w-与777相减后为最终结果755，即rwx r-x r-x</code></pre><p><strong>注：目录默认权限如上，文件默认权限均没有x</strong></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Linux命令】 03_文件搜索命令</title>
    <link href="/2020/11/22/2020-11-22-03_%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/11/22/2020-11-22-03_%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="数据块">数据块</h3><pre><code class="hljs">linux中存储文件的最小单位1数据块 = 512字节 = 0.5K</code></pre><h2 id="一、文件搜索命令">一、文件搜索命令</h2><h4 id="1-find">1. find</h4><pre><code class="hljs">功能：文件搜索语法：find [搜索范围] [匹配条件]例：    - 按文件名查找 (-name -iname)        find /etc -name init 在/etc目录下（会递归搜索），根据文件名精确匹配init的文件        find /etc -name *init* 模糊搜索，*为通配符，替代0或大于0个字符        find /etc -name init??? 模糊搜索，?替代一个字符                find /etc -iname init* 搜索时不区分文件名大小写            - 按文件大小查找 (-size)        find /etc -size +204800   查找目录下大于100MB的文件204800的单位是数据块。 +204800表示大于100MB，-204800表示小于，无单位表示=(不常用)        - 按所有者查找 (-user)    - 按所属组查找 (-group)        find /etc -user wxh        find /home -group lsp            - 按时间查找 (-amin访问时间,-cmin文件属性,-mmin文件内容)        find /etc -cmin -5 查找目录下5分钟内文件属性被修改过的文件，-5表示5分钟内。默认单位为分钟        - 按文件类型查找 (-type)        f文件，d目录，l软链接        find /etc -name init -a -type f 目录下找init名的且文件类型是文件的        - 按i节点查找 (-inum)        find . -inum 31531  当前目录下找到i节点为31531的文件        - 条件连接符 (-a与,-o或)        find /etc -size +163840 -a -size -204800  找大于80MB小于100MB的文件        - 命令连接符 (-exec，-ok)        语法：-exec 命令 &#123;&#125; \ ;        功能：对查找到的文件执行输入的命令        例：            find /etc -name init -exec ls -l &#123;&#125; \ ; 找到文件名为init的文件，并列出文件信息                        find /etc -name init -ok ls -l &#123;&#125; \ ;  找到文件名为init的文件，并列出文件信息，对每个文件是否执行操作会询问</code></pre><h4 id="2-locate">2. locate</h4><pre><code class="hljs">功能：在文件资料库中查找文件。特点：新创建的文件可能没有收录进文件资料库，可以使用updatedb命令更新资料库。    /tmp目录下的文件查找不到。    查找效率高例：    locate init  文件资料库中查找init的文件(模糊查找)    locate -i ttt 选项-i是查询时不区分大小写</code></pre><h4 id="3-which">3. which</h4><pre><code class="hljs">功能：搜索命令所在目录及别名信息语法：which 命令例：which ls</code></pre><h4 id="4-whereis">4. whereis</h4><pre><code class="hljs">功能：搜索命令所在目录及帮助文档路径例： where ls</code></pre><h4 id="5-grep">5. grep</h4><pre><code class="hljs">功能：查找文件中指定字符串所在行选项：-i 不区分大小写      -v 排除指定字符串所在行例：    grep -v ^# /etc/inittab  显示不以#开头的行。(^表示行首)</code></pre><h2 id="二、帮助命令">二、帮助命令</h2><h4 id="6-man-info">6. man/info</h4><pre><code class="hljs">功能：查看命令和配置文件的帮助信息例：man ls    man 5 passwd  查询passwd配置文件的帮助注：当存在帮助和命令同名的情况，如：passwd。1代表命令，5代表配置文件</code></pre><h4 id="7-help">7. help</h4><pre><code class="hljs">功能：查看内置命令的帮助例：help cd注：内置命令无法用man等命令查找帮助文档，只能用help</code></pre><h2 id="三、用户管理命令">三、用户管理命令</h2><h4 id="8-useradd">8. useradd</h4><pre><code class="hljs">功能：添加新用户例： useradd me</code></pre><h4 id="9-passwd">9. passwd</h4><pre><code class="hljs">功能：设置用户密码例：passwd me</code></pre><h4 id="10-who">10. who</h4><pre><code class="hljs">功能：查看登陆用户信息</code></pre><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[input]</span> who<br><span class="hljs-string">[output]</span><br>root     tty1         <span class="hljs-number">2020</span><span class="hljs-number">-08</span><span class="hljs-number">-03</span> <span class="hljs-number">02</span>:<span class="hljs-number">40</span><br>root     pts/<span class="hljs-number">0</span>        <span class="hljs-number">2020</span><span class="hljs-number">-08</span><span class="hljs-number">-03</span> <span class="hljs-number">04</span>:<span class="hljs-number">28</span> (<span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.104</span>)<br><span class="hljs-comment">// 登陆用户     登陆终端    登陆时间（IP地址）</span><br><span class="hljs-comment">// 登陆终端：tty本地终端，pts远程终端 </span><br></code></pre></td></tr></table></figure><h4 id="11-w">11.w</h4><pre><code class="hljs">功能：获得登陆用户详细信息</code></pre><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">[input] w<br>[output]<br> <span class="hljs-number">05</span>:<span class="hljs-number">01</span>:<span class="hljs-number">47</span> up  <span class="hljs-number">2</span>:<span class="hljs-number">23</span>,  <span class="hljs-number">2</span> users,  load average: <span class="hljs-number">0.01</span>, <span class="hljs-number">0.01</span>, <span class="hljs-number">0.00</span><br>USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT<br>root     tty1     -                <span class="hljs-number">02</span>:<span class="hljs-number">40</span>   <span class="hljs-number">33</span>:<span class="hljs-number">57</span>   <span class="hljs-number">0.08</span>s  <span class="hljs-number">0.08</span>s -bash<br>root     pts/<span class="hljs-number">0</span>    <span class="hljs-number">192.168</span>.<span class="hljs-number">0.104</span>    <span class="hljs-number">04</span>:<span class="hljs-number">28</span>    <span class="hljs-number">0.00</span>s  <span class="hljs-number">0.07</span>s  <span class="hljs-number">0.04</span>s w<br><span class="hljs-regexp">//</span> 第一行中<br><span class="hljs-regexp">//</span>系统时间  up表示系统持续运行时间  用户数量    系统负载情况<br><span class="hljs-regexp">//</span> 下面表格中<br><span class="hljs-regexp">//</span> 用户    终端类型    IP   登陆时间    用户空闲时间  累计占用CPU时间   当前操作占用CPU时间     当前操作<br></code></pre></td></tr></table></figure><h2 id="四、文件压缩命令">四、文件压缩命令</h2><h4 id="12-gzip">12. gzip</h4><pre><code class="hljs">功能：压缩文件语法：gzip [文件]压缩后文件格式：.gz例： gzip file注：只能压缩文件，不能压缩目录。压缩完后原文件不保留</code></pre><h4 id="13-gunzip（gzip-d）">13. gunzip（gzip -d）</h4><pre><code class="hljs">功能:解压.gz文件例：gunzip file.gz注：只能解压文件，不能解压目录</code></pre><h4 id="14-tar">14. tar</h4><pre><code class="hljs">功能：打包目录语法：tar [-zcf] [压缩后文件名] 要压缩的目录]注：-f 要放在选项最后*打包压缩选项：      -c 打包      -v 显示打包目录信息      -f 指定文件名      -z 打包同时压缩压缩后文件格式：.tar.gz例：tar -cvf Jac.tar Jac  仅打包目录，还需要自己压缩    tar -zcf Jac.tar.gz Jac 打包并压缩*解包解压选项：      -x 解包      -v 显示打包目录信息      -f 指定解压文件      -z 解压缩例：tar -zxvf Jac.tar.gz</code></pre><h4 id="15-zip">15. zip</h4><pre><code class="hljs">功能：压缩文件或目录压缩后格式：.zip语法：zip [-r] [压缩后文件名] [文件或目录]选项： -r 压缩目录例: zip zipedfile.zip file  压缩文件    zip -r zipeddir.zip dir  压缩目录</code></pre><h4 id="16-unzip">16. unzip</h4><pre><code class="hljs">功能：解压.zip文件语法：unzip [压缩文件]例：unzip test.zip</code></pre><h4 id="17-bzip2">17. bzip2</h4><pre><code class="hljs">功能：压缩文件压缩后格式：.bz2语法：bzip2 [-k] [文件]选项：-k 压缩后保留原文件例: bzip2 -k files    tar -cjf Jac.tar.bz2 Jac</code></pre><h4 id="18-bunzip2">18. bunzip2</h4><pre><code class="hljs">功能：解压文件语法：bunzip2 [-k] [压缩文件]选项：-k 解压后保留原文件例：bunzip2 -k files.bz2    tar -xjf Jac.tar.bz2</code></pre>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Linux命令】 04_网络命令</title>
    <link href="/2020/11/22/2020-11-22-04_%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/11/22/2020-11-22-04_%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="1-write">1. write</h4><pre><code class="hljs">功能：给在线用户发信息，Ctrl+D保存结束并发送语法：write &lt;用户名&gt;例：write wxh</code></pre><h4 id="2-wall">2. wall</h4><pre><code class="hljs">功能：给所有用户发送广播信息语法： wall [message]例：wall r u ok?</code></pre><h4 id="3-ping">3. ping</h4><pre><code class="hljs">功能：测试网络连通性语法：ping 选项 IP地址选项： -c 指定发送次数例：ping 192.168.0.155    ping -c 5 192.168.0.155</code></pre><h4 id="4-ifconfig">4. ifconfig</h4><pre><code class="hljs">功能：查看和设置网卡信息语法：ifconfig 网卡名称 IP地址例：ifconfig eth0 192.168.0.155注：高版本linux系统网卡是ens33</code></pre><h4 id="5-mail">5. mail</h4><pre><code class="hljs">功能：查看，发送电子邮件语法：mail [用户名]</code></pre><h4 id="6-last">6. last</h4><pre><code class="hljs">功能：查看目前与过去登入系统的用户信息语法：last</code></pre><h4 id="7-lastlog">7. lastlog</h4><pre><code class="hljs">功能：查看用户上次登陆的时间选项：-u 查看特定用户的登陆信息例：lastlog    lastlog -u 502   这里的502是用户的uid</code></pre><h4 id="8-traceroute">8. traceroute</h4><pre><code class="hljs">功能：显示数据包到主机间的路径例：traceroute www.sina.com</code></pre><h4 id="9-netstat">9. netstat</h4><pre><code class="hljs">功能：显示网络相关信息选项： -t TCP协议       -u UDP协议       -l 监听       -r 路由       -n 显示IP地址和端口号例：netstat -tlun 查看本机监听的端口    netstat -an 查看本机所有的网络连接    netstat -rn 查看本机路由表</code></pre><h4 id="10-setup">10. setup</h4><pre><code class="hljs">功能：配置网络语法：setup</code></pre><h4 id="11-mount">11. mount</h4><pre><code class="hljs">功能：挂载语法：mount [-t 文件系统] 设备文件名 挂载点例：mount -t iso9660 /dev/sr0 /mnt/cdrom  挂载点的文件需要事先创建    mount /dev/sr0 /mnt/cdrom   -t选项可省略，系统默认为iso9660</code></pre><h4 id="12-umount">12. umount</h4><pre><code class="hljs">功能：卸载(取消挂载)语法：umount 设备文件名例：umount /dev/sr0</code></pre>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Django】 05.视图高级</title>
    <link href="/2020/11/22/2020-11-22-05.%E8%A7%86%E5%9B%BE%E9%AB%98%E7%BA%A7/"/>
    <url>/2020/11/22/2020-11-22-05.%E8%A7%86%E5%9B%BE%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="限制请求method">限制请求method:</h2><h4 id="使用装饰器：">使用装饰器：</h4><ol><li class="lvl-3"><code>django.http.decorators.http.require_http_methods</code>:传递一个列表参数指定访问方法。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.views.decorators.http <span class="hljs-keyword">import</span> require_http_methods<br><br><span class="hljs-meta">@require_http_methods(<span class="hljs-params">[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_view</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure><p>2.<code> django..http.decorators.http.require_GET</code>:只允许GET请求访问</p><ol start="3"><li class="lvl-3"><p><code> django..http.decorators.http.require_POST</code>:只允许POST请求访问</p></li></ol><h2 id="WSGIRequest对象：">WSGIRequest对象：</h2><h4 id="常用属性：">常用属性：</h4><ol><li class="lvl-3"><p><code>path</code>:请求服务器的路径，不包括域名和参数。比如<code>https://www.bilibili.com/video/av89954133?p=102</code>返回<code>/video/av89954133</code></p></li><li class="lvl-3"><p><code>method</code>：返回请求的方法，GET、POST等</p></li><li class="lvl-3"><p><code>Meta</code>：返回客户端发送的<code>header</code>信息</p></li><li class="lvl-3"><p><code>GET</code>：一个<code>django.http.request.QueryDict</code>对象。这个属性中包含了url中查询字符的内容参数</p></li><li class="lvl-3"><p><code>POST</code>：：一个<code>django.http.request.QueryDict</code>对象。这个属性中包含了所有已POST方式传上来的参数，比如一些表单数据</p></li></ol><h4 id="常用方法：">常用方法：</h4><ol><li class="lvl-3"><p>is_secure()：是否采用https协议</p></li><li class="lvl-3"><p>is_ajax()：是否采用ajax发送的请求。原理是判断请求头中是否存在<code>X-Requested-With: XMLHttpRequest</code></p></li><li class="lvl-3"><p>get_host():服务器的域名。如果访问时有端口号，还会加上端口号。比如<code>www.baidu.com:9000</code></p></li><li class="lvl-3"><p>get_full_path()：返回完整的path。如果有查询字符串，会加上查询字符串。比如<code>/video/av89954133?p=102</code></p></li><li class="lvl-3"><p>get_raw_uri()：获取完整的url。比如<code>https://www.bilibili.com/video/av89954133?p=102</code></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>Django</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Linux命令】 06_软件包管理</title>
    <link href="/2020/11/22/2020-11-22-06_%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <url>/2020/11/22/2020-11-22-06_%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="软件包">软件包</h3><pre><code class="hljs">- 源码包：    例：脚本安装包    优点：开源          开源自由选择功能          编译安装，效率高          卸载方便    缺点：安装步骤多          编译时间长          报错解决麻烦- 二进制包(RPM包)：    优点：包管理系统简单          安装速度快    缺点：经过编译，不能看到源代码          功能选择不如源码包灵活          依赖性</code></pre><h3 id="软件包安装位置">软件包安装位置</h3><p><strong>RPM包默认安装位置</strong></p><table><thead><tr><th>安装位置</th><th>说明</th></tr></thead><tbody><tr><td>/etc/</td><td>配置文件安装目录</td></tr><tr><td>/usr/bin/</td><td>可执行的命令安装目录</td></tr><tr><td>/usr/lib/</td><td>程序所使用的函数的保存位置</td></tr><tr><td>/usr/share/doc/</td><td>基本的软件使用手册保存位置</td></tr><tr><td>/usr/share/man/</td><td>帮助文件的保存位置</td></tr><tr><td><strong>源码包软件安装位置</strong></td><td></td></tr></tbody></table><blockquote><p>安装在指定位置中，一般是/usr/local/软件名/</p></blockquote><p><strong>源码安装包保存位置</strong></p><blockquote><p>/usr/local/src</p></blockquote><h4 id="1-rpm">1. rpm</h4><pre><code class="hljs">功能：管理rpm包选项： -i 安装       -U 升级       -e 卸载           -v 显示详细信息           -h 显示进度           --nodeps 不检测依赖性              -q 查询包是否安装           -i 查询软件信息           -l 查询包中文件安装位置           -f 查询系统文件属于哪个软件包           -R 查询软件包的依赖性           -p 查询未安装包信息           语法：安装--&gt; rpm -ivh 包全名      升级--&gt; rpm -Uvh 包全名      卸载--&gt; rpm -e 包名(不用全名)                  rpm -q 包名   查询包是否安装      rpm -qa   查询所有已安装的RPM包            rpm -qi 包名  查询软件信息      rpm -qip 包全名  查询未安装软件包信息           rpm -ql 包名  查询包中文件安装位置      rpm -qlp 包全名  查询未安装包中文件安装位置            rpm -qf 系统文件名  查询系统文件属于哪个软件包            rpm -qR 包名  查询软件包的依赖性      rpm -qRp 包全名  查询未安装软件包的依赖性                  rpm -V 已安装包名  校验包安装的文件是否发生修改      注：安装升级需要在rpm包目录下，卸载查询不用。    前两者需要包全名，卸载查询不用。</code></pre><h4 id="2-rpm2cpio">2. rpm2cpio</h4><pre><code class="hljs">功能：从安装包中提取文件语法：rpm2cpio 包全名 | \ cpio -idv .文件绝对路径    其中 \ 表示换行</code></pre><h4 id="3-yum">3. yum</h4><pre><code class="hljs">功能：在线管理rpm包语法：    yum list  查询所有可用软件包列表    yum search 关键字(包名)   搜索服务器上所有和关键字相关的包        安装--&gt; yum install 包名        选项：-y 自动回答yes (不添加，每个包安装会询问是否安装)        例：yum -y install gcc    升级--&gt; yum update 包名        选项同上        例：yum -y update gcc        注：不写包名会更新所有包，包括linux内核，导致系统崩溃！    卸载--&gt; yum remove 包名        选项同上        例：yum -y remove gcc        注：卸载会卸载包和所有相关依赖，可能会卸载系统相关的依赖导致系统崩溃        软件组管理：    语法：        yum grouplist  列出所有可用的软件组列表        yum groupinstall 软件组名     安装指定软件组，组名由上一条命令查询(带空格分隔的用双引号引起来)        yum groupremove 软件组名    卸载指定软件组        指定光盘作为源：    进入/etc/yum.repos.d/目录    查看文件    将除了CentOS-Media.repo以外的文件重命名（后缀加个.bak）    进入CentOS-Media.repo文件，修改baseurl为挂载点，将enabled修改为=1。    （注：严格注意格式问题）</code></pre>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
